2023-11-10 00:35:56,274 gpu device = 0
2023-11-10 00:35:56,274 args = Namespace(data='/sdb_new/wz/dataset/ISIC-2017', dataset='isic2017', batch_size=8, learning_rate=0.025, momentum=0.9, weight_decay=0.0003, report_freq=50, gpu=0, epochs=200, init_channels=36, layers=8, model_path='saved_models', auxiliary=False, auxiliary_weight=0.4, cutout=True, cutout_length=16, drop_path_prob=0.2, save='eval-EXP-20231110-003545', seed=1, train_portion=0.7, arch='AGNAS', grad_clip=5)
2023-11-10 00:35:56,275 genotype = [Normal_Genotype(normal=[('skip_connect', 1), ('skip_connect', 0), ('eca', 0), ('eca', 2), ('max_pool_3x3', 3), ('skip_connect', 2), ('cbam', 3), ('max_pool_3x3', 4)], normal_concat=range(2, 6)), Reduce_Genotype(reduce=[('cbam', 1), ('dil_conv_3x3', 0), ('sep_conv_3x3', 2), ('eca', 1), ('sep_conv_3x3', 3), ('sep_conv_3x3', 1), ('eca', 4), ('cbam', 3)], reduce_concat=range(2, 6)), Normal_Genotype(normal=[('eca', 1), ('avg_pool_3x3', 0), ('avg_pool_3x3', 1), ('sep_conv_3x3', 2), ('cbam', 3), ('cbam', 2), ('cbam', 4), ('dil_conv_3x3', 3)], normal_concat=range(2, 6)), Reduce_Genotype(reduce=[('sep_conv_3x3', 1), ('max_pool_3x3', 0), ('skip_connect', 2), ('avg_pool_3x3', 0), ('max_pool_3x3', 3), ('skip_connect', 2), ('avg_pool_3x3', 4), ('dil_conv_3x3', 3)], reduce_concat=range(2, 6)), Normal_Genotype(normal=[('cbam', 1), ('dil_conv_3x3', 0), ('avg_pool_3x3', 2), ('sep_conv_3x3', 0), ('cbam', 0), ('max_pool_3x3', 2), ('sep_conv_3x3', 4), ('skip_connect', 3)], normal_concat=range(2, 6))]
2023-11-10 00:37:02,859 NetworkCIFAR(
  (stem): Sequential(
    (0): Conv2d(3, 108, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
    (1): BatchNorm2d(108, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (cells): ModuleList(
    (0): Cell(
      (preprocess0): ReLUConvBN(
        (op): Sequential(
          (0): ReLU()
          (1): Conv2d(108, 36, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (2): BatchNorm2d(36, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (preprocess1): ReLUConvBN(
        (op): Sequential(
          (0): ReLU()
          (1): Conv2d(108, 36, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (2): BatchNorm2d(36, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (_ops): ModuleList(
        (0): Identity()
        (1): Identity()
        (2): eca(
          (avg_pool): AdaptiveAvgPool2d(output_size=1)
          (conv): Conv1d(1, 1, kernel_size=(3,), stride=(1,), padding=(1,), bias=False)
          (sigmoid): Sigmoid()
        )
        (3): eca(
          (avg_pool): AdaptiveAvgPool2d(output_size=1)
          (conv): Conv1d(1, 1, kernel_size=(3,), stride=(1,), padding=(1,), bias=False)
          (sigmoid): Sigmoid()
        )
        (4): MaxPool2d(kernel_size=3, stride=1, padding=1, dilation=1, ceil_mode=False)
        (5): Identity()
        (6): CBAM(
          (ChannelGate): ChannelGate(
            (mlp): Sequential(
              (0): Flatten()
              (1): Linear(in_features=36, out_features=2, bias=True)
              (2): ReLU()
              (3): Linear(in_features=2, out_features=36, bias=True)
            )
          )
          (SpatialGate): SpatialGate(
            (compress): ChannelPool()
            (spatial): BasicConv(
              (conv): Conv2d(2, 1, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), bias=False)
              (bn): BatchNorm2d(1, eps=1e-05, momentum=0.01, affine=True, track_running_stats=True)
            )
          )
        )
        (7): MaxPool2d(kernel_size=3, stride=1, padding=1, dilation=1, ceil_mode=False)
      )
    )
    (1): Cell(
      (preprocess0): ReLUConvBN(
        (op): Sequential(
          (0): ReLU()
          (1): Conv2d(108, 36, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (2): BatchNorm2d(36, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (preprocess1): ReLUConvBN(
        (op): Sequential(
          (0): ReLU()
          (1): Conv2d(144, 36, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (2): BatchNorm2d(36, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (_ops): ModuleList(
        (0): Identity()
        (1): Identity()
        (2): eca(
          (avg_pool): AdaptiveAvgPool2d(output_size=1)
          (conv): Conv1d(1, 1, kernel_size=(3,), stride=(1,), padding=(1,), bias=False)
          (sigmoid): Sigmoid()
        )
        (3): eca(
          (avg_pool): AdaptiveAvgPool2d(output_size=1)
          (conv): Conv1d(1, 1, kernel_size=(3,), stride=(1,), padding=(1,), bias=False)
          (sigmoid): Sigmoid()
        )
        (4): MaxPool2d(kernel_size=3, stride=1, padding=1, dilation=1, ceil_mode=False)
        (5): Identity()
        (6): CBAM(
          (ChannelGate): ChannelGate(
            (mlp): Sequential(
              (0): Flatten()
              (1): Linear(in_features=36, out_features=2, bias=True)
              (2): ReLU()
              (3): Linear(in_features=2, out_features=36, bias=True)
            )
          )
          (SpatialGate): SpatialGate(
            (compress): ChannelPool()
            (spatial): BasicConv(
              (conv): Conv2d(2, 1, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), bias=False)
              (bn): BatchNorm2d(1, eps=1e-05, momentum=0.01, affine=True, track_running_stats=True)
            )
          )
        )
        (7): MaxPool2d(kernel_size=3, stride=1, padding=1, dilation=1, ceil_mode=False)
      )
    )
    (2): Cell(
      (preprocess0): ReLUConvBN(
        (op): Sequential(
          (0): ReLU()
          (1): Conv2d(144, 72, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (2): BatchNorm2d(72, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (preprocess1): ReLUConvBN(
        (op): Sequential(
          (0): ReLU()
          (1): Conv2d(144, 72, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (2): BatchNorm2d(72, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (_ops): ModuleList(
        (0): CBAM(
          (ChannelGate): ChannelGate(
            (mlp): Sequential(
              (0): Flatten()
              (1): Linear(in_features=72, out_features=4, bias=True)
              (2): ReLU()
              (3): Linear(in_features=4, out_features=72, bias=True)
            )
          )
          (SpatialGate): SpatialGate(
            (compress): ChannelPool()
            (spatial): BasicConv(
              (conv): Conv2d(2, 1, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), bias=False)
              (bn): BatchNorm2d(1, eps=1e-05, momentum=0.01, affine=True, track_running_stats=True)
            )
          )
          (avg): AvgPool2d(kernel_size=3, stride=2, padding=1)
        )
        (1): DilConv(
          (op): Sequential(
            (0): ReLU()
            (1): Conv2d(72, 72, kernel_size=(3, 3), stride=(2, 2), padding=(2, 2), dilation=(2, 2), groups=72, bias=False)
            (2): Conv2d(72, 72, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (3): BatchNorm2d(72, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (2): SepConv(
          (op): Sequential(
            (0): ReLU()
            (1): Conv2d(72, 72, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=72, bias=False)
            (2): Conv2d(72, 72, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (3): BatchNorm2d(72, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (4): ReLU()
            (5): Conv2d(72, 72, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=72, bias=False)
            (6): Conv2d(72, 72, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (7): BatchNorm2d(72, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (3): eca(
          (avg_pool): AdaptiveAvgPool2d(output_size=1)
          (conv): Conv1d(1, 1, kernel_size=(3,), stride=(1,), padding=(1,), bias=False)
          (sigmoid): Sigmoid()
          (avg): AvgPool2d(kernel_size=3, stride=2, padding=1)
        )
        (4): SepConv(
          (op): Sequential(
            (0): ReLU()
            (1): Conv2d(72, 72, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=72, bias=False)
            (2): Conv2d(72, 72, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (3): BatchNorm2d(72, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (4): ReLU()
            (5): Conv2d(72, 72, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=72, bias=False)
            (6): Conv2d(72, 72, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (7): BatchNorm2d(72, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (5): SepConv(
          (op): Sequential(
            (0): ReLU()
            (1): Conv2d(72, 72, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=72, bias=False)
            (2): Conv2d(72, 72, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (3): BatchNorm2d(72, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (4): ReLU()
            (5): Conv2d(72, 72, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=72, bias=False)
            (6): Conv2d(72, 72, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (7): BatchNorm2d(72, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (6): eca(
          (avg_pool): AdaptiveAvgPool2d(output_size=1)
          (conv): Conv1d(1, 1, kernel_size=(3,), stride=(1,), padding=(1,), bias=False)
          (sigmoid): Sigmoid()
        )
        (7): CBAM(
          (ChannelGate): ChannelGate(
            (mlp): Sequential(
              (0): Flatten()
              (1): Linear(in_features=72, out_features=4, bias=True)
              (2): ReLU()
              (3): Linear(in_features=4, out_features=72, bias=True)
            )
          )
          (SpatialGate): SpatialGate(
            (compress): ChannelPool()
            (spatial): BasicConv(
              (conv): Conv2d(2, 1, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), bias=False)
              (bn): BatchNorm2d(1, eps=1e-05, momentum=0.01, affine=True, track_running_stats=True)
            )
          )
        )
      )
    )
    (3): Cell(
      (preprocess0): FactorizedReduce(
        (relu): ReLU()
        (conv_1): Conv2d(144, 36, kernel_size=(1, 1), stride=(2, 2), bias=False)
        (conv_2): Conv2d(144, 36, kernel_size=(1, 1), stride=(2, 2), bias=False)
        (bn): BatchNorm2d(72, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (preprocess1): ReLUConvBN(
        (op): Sequential(
          (0): ReLU()
          (1): Conv2d(288, 72, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (2): BatchNorm2d(72, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (_ops): ModuleList(
        (0): eca(
          (avg_pool): AdaptiveAvgPool2d(output_size=1)
          (conv): Conv1d(1, 1, kernel_size=(3,), stride=(1,), padding=(1,), bias=False)
          (sigmoid): Sigmoid()
        )
        (1): AvgPool2d(kernel_size=3, stride=1, padding=1)
        (2): AvgPool2d(kernel_size=3, stride=1, padding=1)
        (3): SepConv(
          (op): Sequential(
            (0): ReLU()
            (1): Conv2d(72, 72, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=72, bias=False)
            (2): Conv2d(72, 72, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (3): BatchNorm2d(72, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (4): ReLU()
            (5): Conv2d(72, 72, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=72, bias=False)
            (6): Conv2d(72, 72, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (7): BatchNorm2d(72, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (4): CBAM(
          (ChannelGate): ChannelGate(
            (mlp): Sequential(
              (0): Flatten()
              (1): Linear(in_features=72, out_features=4, bias=True)
              (2): ReLU()
              (3): Linear(in_features=4, out_features=72, bias=True)
            )
          )
          (SpatialGate): SpatialGate(
            (compress): ChannelPool()
            (spatial): BasicConv(
              (conv): Conv2d(2, 1, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), bias=False)
              (bn): BatchNorm2d(1, eps=1e-05, momentum=0.01, affine=True, track_running_stats=True)
            )
          )
        )
        (5): CBAM(
          (ChannelGate): ChannelGate(
            (mlp): Sequential(
              (0): Flatten()
              (1): Linear(in_features=72, out_features=4, bias=True)
              (2): ReLU()
              (3): Linear(in_features=4, out_features=72, bias=True)
            )
          )
          (SpatialGate): SpatialGate(
            (compress): ChannelPool()
            (spatial): BasicConv(
              (conv): Conv2d(2, 1, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), bias=False)
              (bn): BatchNorm2d(1, eps=1e-05, momentum=0.01, affine=True, track_running_stats=True)
            )
          )
        )
        (6): CBAM(
          (ChannelGate): ChannelGate(
            (mlp): Sequential(
              (0): Flatten()
              (1): Linear(in_features=72, out_features=4, bias=True)
              (2): ReLU()
              (3): Linear(in_features=4, out_features=72, bias=True)
            )
          )
          (SpatialGate): SpatialGate(
            (compress): ChannelPool()
            (spatial): BasicConv(
              (conv): Conv2d(2, 1, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), bias=False)
              (bn): BatchNorm2d(1, eps=1e-05, momentum=0.01, affine=True, track_running_stats=True)
            )
          )
        )
        (7): DilConv(
          (op): Sequential(
            (0): ReLU()
            (1): Conv2d(72, 72, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=72, bias=False)
            (2): Conv2d(72, 72, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (3): BatchNorm2d(72, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
      )
    )
    (4): Cell(
      (preprocess0): ReLUConvBN(
        (op): Sequential(
          (0): ReLU()
          (1): Conv2d(288, 72, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (2): BatchNorm2d(72, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (preprocess1): ReLUConvBN(
        (op): Sequential(
          (0): ReLU()
          (1): Conv2d(288, 72, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (2): BatchNorm2d(72, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (_ops): ModuleList(
        (0): eca(
          (avg_pool): AdaptiveAvgPool2d(output_size=1)
          (conv): Conv1d(1, 1, kernel_size=(3,), stride=(1,), padding=(1,), bias=False)
          (sigmoid): Sigmoid()
        )
        (1): AvgPool2d(kernel_size=3, stride=1, padding=1)
        (2): AvgPool2d(kernel_size=3, stride=1, padding=1)
        (3): SepConv(
          (op): Sequential(
            (0): ReLU()
            (1): Conv2d(72, 72, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=72, bias=False)
            (2): Conv2d(72, 72, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (3): BatchNorm2d(72, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (4): ReLU()
            (5): Conv2d(72, 72, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=72, bias=False)
            (6): Conv2d(72, 72, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (7): BatchNorm2d(72, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (4): CBAM(
          (ChannelGate): ChannelGate(
            (mlp): Sequential(
              (0): Flatten()
              (1): Linear(in_features=72, out_features=4, bias=True)
              (2): ReLU()
              (3): Linear(in_features=4, out_features=72, bias=True)
            )
          )
          (SpatialGate): SpatialGate(
            (compress): ChannelPool()
            (spatial): BasicConv(
              (conv): Conv2d(2, 1, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), bias=False)
              (bn): BatchNorm2d(1, eps=1e-05, momentum=0.01, affine=True, track_running_stats=True)
            )
          )
        )
        (5): CBAM(
          (ChannelGate): ChannelGate(
            (mlp): Sequential(
              (0): Flatten()
              (1): Linear(in_features=72, out_features=4, bias=True)
              (2): ReLU()
              (3): Linear(in_features=4, out_features=72, bias=True)
            )
          )
          (SpatialGate): SpatialGate(
            (compress): ChannelPool()
            (spatial): BasicConv(
              (conv): Conv2d(2, 1, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), bias=False)
              (bn): BatchNorm2d(1, eps=1e-05, momentum=0.01, affine=True, track_running_stats=True)
            )
          )
        )
        (6): CBAM(
          (ChannelGate): ChannelGate(
            (mlp): Sequential(
              (0): Flatten()
              (1): Linear(in_features=72, out_features=4, bias=True)
              (2): ReLU()
              (3): Linear(in_features=4, out_features=72, bias=True)
            )
          )
          (SpatialGate): SpatialGate(
            (compress): ChannelPool()
            (spatial): BasicConv(
              (conv): Conv2d(2, 1, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), bias=False)
              (bn): BatchNorm2d(1, eps=1e-05, momentum=0.01, affine=True, track_running_stats=True)
            )
          )
        )
        (7): DilConv(
          (op): Sequential(
            (0): ReLU()
            (1): Conv2d(72, 72, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=72, bias=False)
            (2): Conv2d(72, 72, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (3): BatchNorm2d(72, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
      )
    )
    (5): Cell(
      (preprocess0): ReLUConvBN(
        (op): Sequential(
          (0): ReLU()
          (1): Conv2d(288, 144, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (2): BatchNorm2d(144, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (preprocess1): ReLUConvBN(
        (op): Sequential(
          (0): ReLU()
          (1): Conv2d(288, 144, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (2): BatchNorm2d(144, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (_ops): ModuleList(
        (0): SepConv(
          (op): Sequential(
            (0): ReLU()
            (1): Conv2d(144, 144, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=144, bias=False)
            (2): Conv2d(144, 144, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (3): BatchNorm2d(144, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (4): ReLU()
            (5): Conv2d(144, 144, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=144, bias=False)
            (6): Conv2d(144, 144, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (7): BatchNorm2d(144, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (1): MaxPool2d(kernel_size=3, stride=2, padding=1, dilation=1, ceil_mode=False)
        (2): Identity()
        (3): AvgPool2d(kernel_size=3, stride=2, padding=1)
        (4): MaxPool2d(kernel_size=3, stride=1, padding=1, dilation=1, ceil_mode=False)
        (5): Identity()
        (6): AvgPool2d(kernel_size=3, stride=1, padding=1)
        (7): DilConv(
          (op): Sequential(
            (0): ReLU()
            (1): Conv2d(144, 144, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=144, bias=False)
            (2): Conv2d(144, 144, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (3): BatchNorm2d(144, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
      )
    )
    (6): Cell(
      (preprocess0): FactorizedReduce(
        (relu): ReLU()
        (conv_1): Conv2d(288, 72, kernel_size=(1, 1), stride=(2, 2), bias=False)
        (conv_2): Conv2d(288, 72, kernel_size=(1, 1), stride=(2, 2), bias=False)
        (bn): BatchNorm2d(144, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (preprocess1): ReLUConvBN(
        (op): Sequential(
          (0): ReLU()
          (1): Conv2d(576, 144, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (2): BatchNorm2d(144, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (_ops): ModuleList(
        (0): CBAM(
          (ChannelGate): ChannelGate(
            (mlp): Sequential(
              (0): Flatten()
              (1): Linear(in_features=144, out_features=9, bias=True)
              (2): ReLU()
              (3): Linear(in_features=9, out_features=144, bias=True)
            )
          )
          (SpatialGate): SpatialGate(
            (compress): ChannelPool()
            (spatial): BasicConv(
              (conv): Conv2d(2, 1, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), bias=False)
              (bn): BatchNorm2d(1, eps=1e-05, momentum=0.01, affine=True, track_running_stats=True)
            )
          )
        )
        (1): DilConv(
          (op): Sequential(
            (0): ReLU()
            (1): Conv2d(144, 144, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=144, bias=False)
            (2): Conv2d(144, 144, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (3): BatchNorm2d(144, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (2): AvgPool2d(kernel_size=3, stride=1, padding=1)
        (3): SepConv(
          (op): Sequential(
            (0): ReLU()
            (1): Conv2d(144, 144, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=144, bias=False)
            (2): Conv2d(144, 144, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (3): BatchNorm2d(144, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (4): ReLU()
            (5): Conv2d(144, 144, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=144, bias=False)
            (6): Conv2d(144, 144, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (7): BatchNorm2d(144, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (4): CBAM(
          (ChannelGate): ChannelGate(
            (mlp): Sequential(
              (0): Flatten()
              (1): Linear(in_features=144, out_features=9, bias=True)
              (2): ReLU()
              (3): Linear(in_features=9, out_features=144, bias=True)
            )
          )
          (SpatialGate): SpatialGate(
            (compress): ChannelPool()
            (spatial): BasicConv(
              (conv): Conv2d(2, 1, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), bias=False)
              (bn): BatchNorm2d(1, eps=1e-05, momentum=0.01, affine=True, track_running_stats=True)
            )
          )
        )
        (5): MaxPool2d(kernel_size=3, stride=1, padding=1, dilation=1, ceil_mode=False)
        (6): SepConv(
          (op): Sequential(
            (0): ReLU()
            (1): Conv2d(144, 144, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=144, bias=False)
            (2): Conv2d(144, 144, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (3): BatchNorm2d(144, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (4): ReLU()
            (5): Conv2d(144, 144, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=144, bias=False)
            (6): Conv2d(144, 144, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (7): BatchNorm2d(144, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (7): Identity()
      )
    )
    (7): Cell(
      (preprocess0): ReLUConvBN(
        (op): Sequential(
          (0): ReLU()
          (1): Conv2d(576, 144, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (2): BatchNorm2d(144, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (preprocess1): ReLUConvBN(
        (op): Sequential(
          (0): ReLU()
          (1): Conv2d(576, 144, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (2): BatchNorm2d(144, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (_ops): ModuleList(
        (0): CBAM(
          (ChannelGate): ChannelGate(
            (mlp): Sequential(
              (0): Flatten()
              (1): Linear(in_features=144, out_features=9, bias=True)
              (2): ReLU()
              (3): Linear(in_features=9, out_features=144, bias=True)
            )
          )
          (SpatialGate): SpatialGate(
            (compress): ChannelPool()
            (spatial): BasicConv(
              (conv): Conv2d(2, 1, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), bias=False)
              (bn): BatchNorm2d(1, eps=1e-05, momentum=0.01, affine=True, track_running_stats=True)
            )
          )
        )
        (1): DilConv(
          (op): Sequential(
            (0): ReLU()
            (1): Conv2d(144, 144, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=144, bias=False)
            (2): Conv2d(144, 144, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (3): BatchNorm2d(144, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (2): AvgPool2d(kernel_size=3, stride=1, padding=1)
        (3): SepConv(
          (op): Sequential(
            (0): ReLU()
            (1): Conv2d(144, 144, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=144, bias=False)
            (2): Conv2d(144, 144, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (3): BatchNorm2d(144, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (4): ReLU()
            (5): Conv2d(144, 144, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=144, bias=False)
            (6): Conv2d(144, 144, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (7): BatchNorm2d(144, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (4): CBAM(
          (ChannelGate): ChannelGate(
            (mlp): Sequential(
              (0): Flatten()
              (1): Linear(in_features=144, out_features=9, bias=True)
              (2): ReLU()
              (3): Linear(in_features=9, out_features=144, bias=True)
            )
          )
          (SpatialGate): SpatialGate(
            (compress): ChannelPool()
            (spatial): BasicConv(
              (conv): Conv2d(2, 1, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), bias=False)
              (bn): BatchNorm2d(1, eps=1e-05, momentum=0.01, affine=True, track_running_stats=True)
            )
          )
        )
        (5): MaxPool2d(kernel_size=3, stride=1, padding=1, dilation=1, ceil_mode=False)
        (6): SepConv(
          (op): Sequential(
            (0): ReLU()
            (1): Conv2d(144, 144, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=144, bias=False)
            (2): Conv2d(144, 144, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (3): BatchNorm2d(144, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (4): ReLU()
            (5): Conv2d(144, 144, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=144, bias=False)
            (6): Conv2d(144, 144, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (7): BatchNorm2d(144, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (7): Identity()
      )
    )
  )
  (global_pooling): AdaptiveAvgPool2d(output_size=1)
  (classifier): Linear(in_features=576, out_features=3, bias=True)
)
2023-11-10 00:37:02,893 param size = 0.876983MB
2023-11-10 00:37:02,923 epoch 0 lr 2.499692e-02
