2023-11-03 21:53:48,558 gpu device = 0
2023-11-03 21:53:48,558 args = Namespace(data='/sdb_new/wz/dataset/ISIC-2017', batch_size=2, learning_rate=0.025, learning_rate_min=0.001, momentum=0.9, weight_decay=0.0003, report_freq=50, gpu=0, epochs=25, init_channels=16, layers=6, model_path='saved_models', cutout=False, cutout_length=16, drop_path_prob=0.3, save='search-EXP-20231103-215343', seed=0, grad_clip=5, train_portion=0.7, unrolled=False, arch_learning_rate=0.0003, arch_weight_decay=0.001)
2023-11-03 21:53:48,941 Network(
  (_criterion): CrossEntropyLoss()
  (stem): Sequential(
    (0): Conv2d(3, 48, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
    (1): BatchNorm2d(48, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (cells): ModuleList(
    (0): Cell(
      (preprocess0): ReLUConvBN(
        (op): Sequential(
          (0): ReLU()
          (1): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (2): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
        )
      )
      (preprocess1): ReLUConvBN(
        (op): Sequential(
          (0): ReLU()
          (1): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (2): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
        )
      )
      (_ops): ModuleList(
        (0): MixedOp(
          (_ops): ModuleList(
            (0): SepConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=16, bias=False)
                (2): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
                (4): ReLU()
                (5): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=16, bias=False)
                (6): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (7): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
            (1): DilConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=16, bias=False)
                (2): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
            (2): Identity()
            (3): Sequential(
              (0): AvgPool2d(kernel_size=3, stride=1, padding=1)
              (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
            )
            (4): Sequential(
              (0): MaxPool2d(kernel_size=3, stride=1, padding=1, dilation=1, ceil_mode=False)
              (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
            )
            (5): Zero()
            (6): CBAM(
              (ChannelGate): ChannelGate(
                (mlp): Sequential(
                  (0): Flatten()
                  (1): Linear(in_features=16, out_features=1, bias=True)
                  (2): ReLU()
                  (3): Linear(in_features=1, out_features=16, bias=True)
                )
              )
              (SpatialGate): SpatialGate(
                (compress): ChannelPool()
                (spatial): BasicConv(
                  (conv): Conv2d(2, 1, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), bias=False)
                  (bn): BatchNorm2d(1, eps=1e-05, momentum=0.01, affine=True, track_running_stats=True)
                )
              )
            )
            (7): eca(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv): Conv1d(1, 1, kernel_size=(3,), stride=(1,), padding=(1,), bias=False)
              (sigmoid): Sigmoid()
            )
          )
          (attention): AttentionModule(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (fc): Sequential(
              (0): Linear(in_features=128, out_features=16, bias=False)
              (1): ReLU(inplace=True)
              (2): Linear(in_features=16, out_features=128, bias=False)
              (3): Sigmoid()
            )
          )
        )
        (1): MixedOp(
          (_ops): ModuleList(
            (0): SepConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=16, bias=False)
                (2): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
                (4): ReLU()
                (5): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=16, bias=False)
                (6): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (7): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
            (1): DilConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=16, bias=False)
                (2): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
            (2): Identity()
            (3): Sequential(
              (0): AvgPool2d(kernel_size=3, stride=1, padding=1)
              (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
            )
            (4): Sequential(
              (0): MaxPool2d(kernel_size=3, stride=1, padding=1, dilation=1, ceil_mode=False)
              (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
            )
            (5): Zero()
            (6): CBAM(
              (ChannelGate): ChannelGate(
                (mlp): Sequential(
                  (0): Flatten()
                  (1): Linear(in_features=16, out_features=1, bias=True)
                  (2): ReLU()
                  (3): Linear(in_features=1, out_features=16, bias=True)
                )
              )
              (SpatialGate): SpatialGate(
                (compress): ChannelPool()
                (spatial): BasicConv(
                  (conv): Conv2d(2, 1, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), bias=False)
                  (bn): BatchNorm2d(1, eps=1e-05, momentum=0.01, affine=True, track_running_stats=True)
                )
              )
            )
            (7): eca(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv): Conv1d(1, 1, kernel_size=(3,), stride=(1,), padding=(1,), bias=False)
              (sigmoid): Sigmoid()
            )
          )
          (attention): AttentionModule(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (fc): Sequential(
              (0): Linear(in_features=128, out_features=16, bias=False)
              (1): ReLU(inplace=True)
              (2): Linear(in_features=16, out_features=128, bias=False)
              (3): Sigmoid()
            )
          )
        )
        (2): MixedOp(
          (_ops): ModuleList(
            (0): SepConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=16, bias=False)
                (2): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
                (4): ReLU()
                (5): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=16, bias=False)
                (6): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (7): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
            (1): DilConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=16, bias=False)
                (2): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
            (2): Identity()
            (3): Sequential(
              (0): AvgPool2d(kernel_size=3, stride=1, padding=1)
              (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
            )
            (4): Sequential(
              (0): MaxPool2d(kernel_size=3, stride=1, padding=1, dilation=1, ceil_mode=False)
              (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
            )
            (5): Zero()
            (6): CBAM(
              (ChannelGate): ChannelGate(
                (mlp): Sequential(
                  (0): Flatten()
                  (1): Linear(in_features=16, out_features=1, bias=True)
                  (2): ReLU()
                  (3): Linear(in_features=1, out_features=16, bias=True)
                )
              )
              (SpatialGate): SpatialGate(
                (compress): ChannelPool()
                (spatial): BasicConv(
                  (conv): Conv2d(2, 1, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), bias=False)
                  (bn): BatchNorm2d(1, eps=1e-05, momentum=0.01, affine=True, track_running_stats=True)
                )
              )
            )
            (7): eca(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv): Conv1d(1, 1, kernel_size=(3,), stride=(1,), padding=(1,), bias=False)
              (sigmoid): Sigmoid()
            )
          )
          (attention): AttentionModule(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (fc): Sequential(
              (0): Linear(in_features=128, out_features=16, bias=False)
              (1): ReLU(inplace=True)
              (2): Linear(in_features=16, out_features=128, bias=False)
              (3): Sigmoid()
            )
          )
        )
        (3): MixedOp(
          (_ops): ModuleList(
            (0): SepConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=16, bias=False)
                (2): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
                (4): ReLU()
                (5): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=16, bias=False)
                (6): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (7): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
            (1): DilConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=16, bias=False)
                (2): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
            (2): Identity()
            (3): Sequential(
              (0): AvgPool2d(kernel_size=3, stride=1, padding=1)
              (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
            )
            (4): Sequential(
              (0): MaxPool2d(kernel_size=3, stride=1, padding=1, dilation=1, ceil_mode=False)
              (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
            )
            (5): Zero()
            (6): CBAM(
              (ChannelGate): ChannelGate(
                (mlp): Sequential(
                  (0): Flatten()
                  (1): Linear(in_features=16, out_features=1, bias=True)
                  (2): ReLU()
                  (3): Linear(in_features=1, out_features=16, bias=True)
                )
              )
              (SpatialGate): SpatialGate(
                (compress): ChannelPool()
                (spatial): BasicConv(
                  (conv): Conv2d(2, 1, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), bias=False)
                  (bn): BatchNorm2d(1, eps=1e-05, momentum=0.01, affine=True, track_running_stats=True)
                )
              )
            )
            (7): eca(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv): Conv1d(1, 1, kernel_size=(3,), stride=(1,), padding=(1,), bias=False)
              (sigmoid): Sigmoid()
            )
          )
          (attention): AttentionModule(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (fc): Sequential(
              (0): Linear(in_features=128, out_features=16, bias=False)
              (1): ReLU(inplace=True)
              (2): Linear(in_features=16, out_features=128, bias=False)
              (3): Sigmoid()
            )
          )
        )
        (4): MixedOp(
          (_ops): ModuleList(
            (0): SepConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=16, bias=False)
                (2): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
                (4): ReLU()
                (5): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=16, bias=False)
                (6): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (7): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
            (1): DilConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=16, bias=False)
                (2): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
            (2): Identity()
            (3): Sequential(
              (0): AvgPool2d(kernel_size=3, stride=1, padding=1)
              (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
            )
            (4): Sequential(
              (0): MaxPool2d(kernel_size=3, stride=1, padding=1, dilation=1, ceil_mode=False)
              (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
            )
            (5): Zero()
            (6): CBAM(
              (ChannelGate): ChannelGate(
                (mlp): Sequential(
                  (0): Flatten()
                  (1): Linear(in_features=16, out_features=1, bias=True)
                  (2): ReLU()
                  (3): Linear(in_features=1, out_features=16, bias=True)
                )
              )
              (SpatialGate): SpatialGate(
                (compress): ChannelPool()
                (spatial): BasicConv(
                  (conv): Conv2d(2, 1, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), bias=False)
                  (bn): BatchNorm2d(1, eps=1e-05, momentum=0.01, affine=True, track_running_stats=True)
                )
              )
            )
            (7): eca(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv): Conv1d(1, 1, kernel_size=(3,), stride=(1,), padding=(1,), bias=False)
              (sigmoid): Sigmoid()
            )
          )
          (attention): AttentionModule(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (fc): Sequential(
              (0): Linear(in_features=128, out_features=16, bias=False)
              (1): ReLU(inplace=True)
              (2): Linear(in_features=16, out_features=128, bias=False)
              (3): Sigmoid()
            )
          )
        )
        (5): MixedOp(
          (_ops): ModuleList(
            (0): SepConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=16, bias=False)
                (2): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
                (4): ReLU()
                (5): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=16, bias=False)
                (6): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (7): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
            (1): DilConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=16, bias=False)
                (2): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
            (2): Identity()
            (3): Sequential(
              (0): AvgPool2d(kernel_size=3, stride=1, padding=1)
              (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
            )
            (4): Sequential(
              (0): MaxPool2d(kernel_size=3, stride=1, padding=1, dilation=1, ceil_mode=False)
              (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
            )
            (5): Zero()
            (6): CBAM(
              (ChannelGate): ChannelGate(
                (mlp): Sequential(
                  (0): Flatten()
                  (1): Linear(in_features=16, out_features=1, bias=True)
                  (2): ReLU()
                  (3): Linear(in_features=1, out_features=16, bias=True)
                )
              )
              (SpatialGate): SpatialGate(
                (compress): ChannelPool()
                (spatial): BasicConv(
                  (conv): Conv2d(2, 1, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), bias=False)
                  (bn): BatchNorm2d(1, eps=1e-05, momentum=0.01, affine=True, track_running_stats=True)
                )
              )
            )
            (7): eca(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv): Conv1d(1, 1, kernel_size=(3,), stride=(1,), padding=(1,), bias=False)
              (sigmoid): Sigmoid()
            )
          )
          (attention): AttentionModule(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (fc): Sequential(
              (0): Linear(in_features=128, out_features=16, bias=False)
              (1): ReLU(inplace=True)
              (2): Linear(in_features=16, out_features=128, bias=False)
              (3): Sigmoid()
            )
          )
        )
        (6): MixedOp(
          (_ops): ModuleList(
            (0): SepConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=16, bias=False)
                (2): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
                (4): ReLU()
                (5): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=16, bias=False)
                (6): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (7): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
            (1): DilConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=16, bias=False)
                (2): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
            (2): Identity()
            (3): Sequential(
              (0): AvgPool2d(kernel_size=3, stride=1, padding=1)
              (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
            )
            (4): Sequential(
              (0): MaxPool2d(kernel_size=3, stride=1, padding=1, dilation=1, ceil_mode=False)
              (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
            )
            (5): Zero()
            (6): CBAM(
              (ChannelGate): ChannelGate(
                (mlp): Sequential(
                  (0): Flatten()
                  (1): Linear(in_features=16, out_features=1, bias=True)
                  (2): ReLU()
                  (3): Linear(in_features=1, out_features=16, bias=True)
                )
              )
              (SpatialGate): SpatialGate(
                (compress): ChannelPool()
                (spatial): BasicConv(
                  (conv): Conv2d(2, 1, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), bias=False)
                  (bn): BatchNorm2d(1, eps=1e-05, momentum=0.01, affine=True, track_running_stats=True)
                )
              )
            )
            (7): eca(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv): Conv1d(1, 1, kernel_size=(3,), stride=(1,), padding=(1,), bias=False)
              (sigmoid): Sigmoid()
            )
          )
          (attention): AttentionModule(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (fc): Sequential(
              (0): Linear(in_features=128, out_features=16, bias=False)
              (1): ReLU(inplace=True)
              (2): Linear(in_features=16, out_features=128, bias=False)
              (3): Sigmoid()
            )
          )
        )
        (7): MixedOp(
          (_ops): ModuleList(
            (0): SepConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=16, bias=False)
                (2): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
                (4): ReLU()
                (5): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=16, bias=False)
                (6): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (7): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
            (1): DilConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=16, bias=False)
                (2): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
            (2): Identity()
            (3): Sequential(
              (0): AvgPool2d(kernel_size=3, stride=1, padding=1)
              (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
            )
            (4): Sequential(
              (0): MaxPool2d(kernel_size=3, stride=1, padding=1, dilation=1, ceil_mode=False)
              (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
            )
            (5): Zero()
            (6): CBAM(
              (ChannelGate): ChannelGate(
                (mlp): Sequential(
                  (0): Flatten()
                  (1): Linear(in_features=16, out_features=1, bias=True)
                  (2): ReLU()
                  (3): Linear(in_features=1, out_features=16, bias=True)
                )
              )
              (SpatialGate): SpatialGate(
                (compress): ChannelPool()
                (spatial): BasicConv(
                  (conv): Conv2d(2, 1, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), bias=False)
                  (bn): BatchNorm2d(1, eps=1e-05, momentum=0.01, affine=True, track_running_stats=True)
                )
              )
            )
            (7): eca(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv): Conv1d(1, 1, kernel_size=(3,), stride=(1,), padding=(1,), bias=False)
              (sigmoid): Sigmoid()
            )
          )
          (attention): AttentionModule(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (fc): Sequential(
              (0): Linear(in_features=128, out_features=16, bias=False)
              (1): ReLU(inplace=True)
              (2): Linear(in_features=16, out_features=128, bias=False)
              (3): Sigmoid()
            )
          )
        )
        (8): MixedOp(
          (_ops): ModuleList(
            (0): SepConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=16, bias=False)
                (2): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
                (4): ReLU()
                (5): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=16, bias=False)
                (6): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (7): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
            (1): DilConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=16, bias=False)
                (2): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
            (2): Identity()
            (3): Sequential(
              (0): AvgPool2d(kernel_size=3, stride=1, padding=1)
              (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
            )
            (4): Sequential(
              (0): MaxPool2d(kernel_size=3, stride=1, padding=1, dilation=1, ceil_mode=False)
              (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
            )
            (5): Zero()
            (6): CBAM(
              (ChannelGate): ChannelGate(
                (mlp): Sequential(
                  (0): Flatten()
                  (1): Linear(in_features=16, out_features=1, bias=True)
                  (2): ReLU()
                  (3): Linear(in_features=1, out_features=16, bias=True)
                )
              )
              (SpatialGate): SpatialGate(
                (compress): ChannelPool()
                (spatial): BasicConv(
                  (conv): Conv2d(2, 1, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), bias=False)
                  (bn): BatchNorm2d(1, eps=1e-05, momentum=0.01, affine=True, track_running_stats=True)
                )
              )
            )
            (7): eca(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv): Conv1d(1, 1, kernel_size=(3,), stride=(1,), padding=(1,), bias=False)
              (sigmoid): Sigmoid()
            )
          )
          (attention): AttentionModule(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (fc): Sequential(
              (0): Linear(in_features=128, out_features=16, bias=False)
              (1): ReLU(inplace=True)
              (2): Linear(in_features=16, out_features=128, bias=False)
              (3): Sigmoid()
            )
          )
        )
        (9): MixedOp(
          (_ops): ModuleList(
            (0): SepConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=16, bias=False)
                (2): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
                (4): ReLU()
                (5): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=16, bias=False)
                (6): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (7): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
            (1): DilConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=16, bias=False)
                (2): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
            (2): Identity()
            (3): Sequential(
              (0): AvgPool2d(kernel_size=3, stride=1, padding=1)
              (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
            )
            (4): Sequential(
              (0): MaxPool2d(kernel_size=3, stride=1, padding=1, dilation=1, ceil_mode=False)
              (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
            )
            (5): Zero()
            (6): CBAM(
              (ChannelGate): ChannelGate(
                (mlp): Sequential(
                  (0): Flatten()
                  (1): Linear(in_features=16, out_features=1, bias=True)
                  (2): ReLU()
                  (3): Linear(in_features=1, out_features=16, bias=True)
                )
              )
              (SpatialGate): SpatialGate(
                (compress): ChannelPool()
                (spatial): BasicConv(
                  (conv): Conv2d(2, 1, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), bias=False)
                  (bn): BatchNorm2d(1, eps=1e-05, momentum=0.01, affine=True, track_running_stats=True)
                )
              )
            )
            (7): eca(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv): Conv1d(1, 1, kernel_size=(3,), stride=(1,), padding=(1,), bias=False)
              (sigmoid): Sigmoid()
            )
          )
          (attention): AttentionModule(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (fc): Sequential(
              (0): Linear(in_features=128, out_features=16, bias=False)
              (1): ReLU(inplace=True)
              (2): Linear(in_features=16, out_features=128, bias=False)
              (3): Sigmoid()
            )
          )
        )
        (10): MixedOp(
          (_ops): ModuleList(
            (0): SepConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=16, bias=False)
                (2): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
                (4): ReLU()
                (5): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=16, bias=False)
                (6): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (7): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
            (1): DilConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=16, bias=False)
                (2): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
            (2): Identity()
            (3): Sequential(
              (0): AvgPool2d(kernel_size=3, stride=1, padding=1)
              (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
            )
            (4): Sequential(
              (0): MaxPool2d(kernel_size=3, stride=1, padding=1, dilation=1, ceil_mode=False)
              (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
            )
            (5): Zero()
            (6): CBAM(
              (ChannelGate): ChannelGate(
                (mlp): Sequential(
                  (0): Flatten()
                  (1): Linear(in_features=16, out_features=1, bias=True)
                  (2): ReLU()
                  (3): Linear(in_features=1, out_features=16, bias=True)
                )
              )
              (SpatialGate): SpatialGate(
                (compress): ChannelPool()
                (spatial): BasicConv(
                  (conv): Conv2d(2, 1, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), bias=False)
                  (bn): BatchNorm2d(1, eps=1e-05, momentum=0.01, affine=True, track_running_stats=True)
                )
              )
            )
            (7): eca(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv): Conv1d(1, 1, kernel_size=(3,), stride=(1,), padding=(1,), bias=False)
              (sigmoid): Sigmoid()
            )
          )
          (attention): AttentionModule(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (fc): Sequential(
              (0): Linear(in_features=128, out_features=16, bias=False)
              (1): ReLU(inplace=True)
              (2): Linear(in_features=16, out_features=128, bias=False)
              (3): Sigmoid()
            )
          )
        )
        (11): MixedOp(
          (_ops): ModuleList(
            (0): SepConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=16, bias=False)
                (2): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
                (4): ReLU()
                (5): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=16, bias=False)
                (6): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (7): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
            (1): DilConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=16, bias=False)
                (2): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
            (2): Identity()
            (3): Sequential(
              (0): AvgPool2d(kernel_size=3, stride=1, padding=1)
              (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
            )
            (4): Sequential(
              (0): MaxPool2d(kernel_size=3, stride=1, padding=1, dilation=1, ceil_mode=False)
              (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
            )
            (5): Zero()
            (6): CBAM(
              (ChannelGate): ChannelGate(
                (mlp): Sequential(
                  (0): Flatten()
                  (1): Linear(in_features=16, out_features=1, bias=True)
                  (2): ReLU()
                  (3): Linear(in_features=1, out_features=16, bias=True)
                )
              )
              (SpatialGate): SpatialGate(
                (compress): ChannelPool()
                (spatial): BasicConv(
                  (conv): Conv2d(2, 1, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), bias=False)
                  (bn): BatchNorm2d(1, eps=1e-05, momentum=0.01, affine=True, track_running_stats=True)
                )
              )
            )
            (7): eca(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv): Conv1d(1, 1, kernel_size=(3,), stride=(1,), padding=(1,), bias=False)
              (sigmoid): Sigmoid()
            )
          )
          (attention): AttentionModule(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (fc): Sequential(
              (0): Linear(in_features=128, out_features=16, bias=False)
              (1): ReLU(inplace=True)
              (2): Linear(in_features=16, out_features=128, bias=False)
              (3): Sigmoid()
            )
          )
        )
        (12): MixedOp(
          (_ops): ModuleList(
            (0): SepConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=16, bias=False)
                (2): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
                (4): ReLU()
                (5): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=16, bias=False)
                (6): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (7): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
            (1): DilConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=16, bias=False)
                (2): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
            (2): Identity()
            (3): Sequential(
              (0): AvgPool2d(kernel_size=3, stride=1, padding=1)
              (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
            )
            (4): Sequential(
              (0): MaxPool2d(kernel_size=3, stride=1, padding=1, dilation=1, ceil_mode=False)
              (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
            )
            (5): Zero()
            (6): CBAM(
              (ChannelGate): ChannelGate(
                (mlp): Sequential(
                  (0): Flatten()
                  (1): Linear(in_features=16, out_features=1, bias=True)
                  (2): ReLU()
                  (3): Linear(in_features=1, out_features=16, bias=True)
                )
              )
              (SpatialGate): SpatialGate(
                (compress): ChannelPool()
                (spatial): BasicConv(
                  (conv): Conv2d(2, 1, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), bias=False)
                  (bn): BatchNorm2d(1, eps=1e-05, momentum=0.01, affine=True, track_running_stats=True)
                )
              )
            )
            (7): eca(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv): Conv1d(1, 1, kernel_size=(3,), stride=(1,), padding=(1,), bias=False)
              (sigmoid): Sigmoid()
            )
          )
          (attention): AttentionModule(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (fc): Sequential(
              (0): Linear(in_features=128, out_features=16, bias=False)
              (1): ReLU(inplace=True)
              (2): Linear(in_features=16, out_features=128, bias=False)
              (3): Sigmoid()
            )
          )
        )
        (13): MixedOp(
          (_ops): ModuleList(
            (0): SepConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=16, bias=False)
                (2): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
                (4): ReLU()
                (5): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=16, bias=False)
                (6): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (7): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
            (1): DilConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=16, bias=False)
                (2): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
            (2): Identity()
            (3): Sequential(
              (0): AvgPool2d(kernel_size=3, stride=1, padding=1)
              (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
            )
            (4): Sequential(
              (0): MaxPool2d(kernel_size=3, stride=1, padding=1, dilation=1, ceil_mode=False)
              (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
            )
            (5): Zero()
            (6): CBAM(
              (ChannelGate): ChannelGate(
                (mlp): Sequential(
                  (0): Flatten()
                  (1): Linear(in_features=16, out_features=1, bias=True)
                  (2): ReLU()
                  (3): Linear(in_features=1, out_features=16, bias=True)
                )
              )
              (SpatialGate): SpatialGate(
                (compress): ChannelPool()
                (spatial): BasicConv(
                  (conv): Conv2d(2, 1, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), bias=False)
                  (bn): BatchNorm2d(1, eps=1e-05, momentum=0.01, affine=True, track_running_stats=True)
                )
              )
            )
            (7): eca(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv): Conv1d(1, 1, kernel_size=(3,), stride=(1,), padding=(1,), bias=False)
              (sigmoid): Sigmoid()
            )
          )
          (attention): AttentionModule(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (fc): Sequential(
              (0): Linear(in_features=128, out_features=16, bias=False)
              (1): ReLU(inplace=True)
              (2): Linear(in_features=16, out_features=128, bias=False)
              (3): Sigmoid()
            )
          )
        )
      )
      (_bns): ModuleList()
    )
    (1): Cell(
      (preprocess0): ReLUConvBN(
        (op): Sequential(
          (0): ReLU()
          (1): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (2): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
        )
      )
      (preprocess1): ReLUConvBN(
        (op): Sequential(
          (0): ReLU()
          (1): Conv2d(64, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (2): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
        )
      )
      (_ops): ModuleList(
        (0): MixedOp(
          (_ops): ModuleList(
            (0): SepConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=16, bias=False)
                (2): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
                (4): ReLU()
                (5): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=16, bias=False)
                (6): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (7): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
            (1): DilConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=16, bias=False)
                (2): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
            (2): Identity()
            (3): Sequential(
              (0): AvgPool2d(kernel_size=3, stride=1, padding=1)
              (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
            )
            (4): Sequential(
              (0): MaxPool2d(kernel_size=3, stride=1, padding=1, dilation=1, ceil_mode=False)
              (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
            )
            (5): Zero()
            (6): CBAM(
              (ChannelGate): ChannelGate(
                (mlp): Sequential(
                  (0): Flatten()
                  (1): Linear(in_features=16, out_features=1, bias=True)
                  (2): ReLU()
                  (3): Linear(in_features=1, out_features=16, bias=True)
                )
              )
              (SpatialGate): SpatialGate(
                (compress): ChannelPool()
                (spatial): BasicConv(
                  (conv): Conv2d(2, 1, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), bias=False)
                  (bn): BatchNorm2d(1, eps=1e-05, momentum=0.01, affine=True, track_running_stats=True)
                )
              )
            )
            (7): eca(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv): Conv1d(1, 1, kernel_size=(3,), stride=(1,), padding=(1,), bias=False)
              (sigmoid): Sigmoid()
            )
          )
          (attention): AttentionModule(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (fc): Sequential(
              (0): Linear(in_features=128, out_features=16, bias=False)
              (1): ReLU(inplace=True)
              (2): Linear(in_features=16, out_features=128, bias=False)
              (3): Sigmoid()
            )
          )
        )
        (1): MixedOp(
          (_ops): ModuleList(
            (0): SepConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=16, bias=False)
                (2): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
                (4): ReLU()
                (5): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=16, bias=False)
                (6): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (7): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
            (1): DilConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=16, bias=False)
                (2): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
            (2): Identity()
            (3): Sequential(
              (0): AvgPool2d(kernel_size=3, stride=1, padding=1)
              (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
            )
            (4): Sequential(
              (0): MaxPool2d(kernel_size=3, stride=1, padding=1, dilation=1, ceil_mode=False)
              (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
            )
            (5): Zero()
            (6): CBAM(
              (ChannelGate): ChannelGate(
                (mlp): Sequential(
                  (0): Flatten()
                  (1): Linear(in_features=16, out_features=1, bias=True)
                  (2): ReLU()
                  (3): Linear(in_features=1, out_features=16, bias=True)
                )
              )
              (SpatialGate): SpatialGate(
                (compress): ChannelPool()
                (spatial): BasicConv(
                  (conv): Conv2d(2, 1, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), bias=False)
                  (bn): BatchNorm2d(1, eps=1e-05, momentum=0.01, affine=True, track_running_stats=True)
                )
              )
            )
            (7): eca(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv): Conv1d(1, 1, kernel_size=(3,), stride=(1,), padding=(1,), bias=False)
              (sigmoid): Sigmoid()
            )
          )
          (attention): AttentionModule(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (fc): Sequential(
              (0): Linear(in_features=128, out_features=16, bias=False)
              (1): ReLU(inplace=True)
              (2): Linear(in_features=16, out_features=128, bias=False)
              (3): Sigmoid()
            )
          )
        )
        (2): MixedOp(
          (_ops): ModuleList(
            (0): SepConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=16, bias=False)
                (2): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
                (4): ReLU()
                (5): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=16, bias=False)
                (6): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (7): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
            (1): DilConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=16, bias=False)
                (2): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
            (2): Identity()
            (3): Sequential(
              (0): AvgPool2d(kernel_size=3, stride=1, padding=1)
              (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
            )
            (4): Sequential(
              (0): MaxPool2d(kernel_size=3, stride=1, padding=1, dilation=1, ceil_mode=False)
              (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
            )
            (5): Zero()
            (6): CBAM(
              (ChannelGate): ChannelGate(
                (mlp): Sequential(
                  (0): Flatten()
                  (1): Linear(in_features=16, out_features=1, bias=True)
                  (2): ReLU()
                  (3): Linear(in_features=1, out_features=16, bias=True)
                )
              )
              (SpatialGate): SpatialGate(
                (compress): ChannelPool()
                (spatial): BasicConv(
                  (conv): Conv2d(2, 1, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), bias=False)
                  (bn): BatchNorm2d(1, eps=1e-05, momentum=0.01, affine=True, track_running_stats=True)
                )
              )
            )
            (7): eca(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv): Conv1d(1, 1, kernel_size=(3,), stride=(1,), padding=(1,), bias=False)
              (sigmoid): Sigmoid()
            )
          )
          (attention): AttentionModule(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (fc): Sequential(
              (0): Linear(in_features=128, out_features=16, bias=False)
              (1): ReLU(inplace=True)
              (2): Linear(in_features=16, out_features=128, bias=False)
              (3): Sigmoid()
            )
          )
        )
        (3): MixedOp(
          (_ops): ModuleList(
            (0): SepConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=16, bias=False)
                (2): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
                (4): ReLU()
                (5): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=16, bias=False)
                (6): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (7): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
            (1): DilConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=16, bias=False)
                (2): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
            (2): Identity()
            (3): Sequential(
              (0): AvgPool2d(kernel_size=3, stride=1, padding=1)
              (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
            )
            (4): Sequential(
              (0): MaxPool2d(kernel_size=3, stride=1, padding=1, dilation=1, ceil_mode=False)
              (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
            )
            (5): Zero()
            (6): CBAM(
              (ChannelGate): ChannelGate(
                (mlp): Sequential(
                  (0): Flatten()
                  (1): Linear(in_features=16, out_features=1, bias=True)
                  (2): ReLU()
                  (3): Linear(in_features=1, out_features=16, bias=True)
                )
              )
              (SpatialGate): SpatialGate(
                (compress): ChannelPool()
                (spatial): BasicConv(
                  (conv): Conv2d(2, 1, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), bias=False)
                  (bn): BatchNorm2d(1, eps=1e-05, momentum=0.01, affine=True, track_running_stats=True)
                )
              )
            )
            (7): eca(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv): Conv1d(1, 1, kernel_size=(3,), stride=(1,), padding=(1,), bias=False)
              (sigmoid): Sigmoid()
            )
          )
          (attention): AttentionModule(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (fc): Sequential(
              (0): Linear(in_features=128, out_features=16, bias=False)
              (1): ReLU(inplace=True)
              (2): Linear(in_features=16, out_features=128, bias=False)
              (3): Sigmoid()
            )
          )
        )
        (4): MixedOp(
          (_ops): ModuleList(
            (0): SepConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=16, bias=False)
                (2): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
                (4): ReLU()
                (5): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=16, bias=False)
                (6): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (7): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
            (1): DilConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=16, bias=False)
                (2): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
            (2): Identity()
            (3): Sequential(
              (0): AvgPool2d(kernel_size=3, stride=1, padding=1)
              (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
            )
            (4): Sequential(
              (0): MaxPool2d(kernel_size=3, stride=1, padding=1, dilation=1, ceil_mode=False)
              (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
            )
            (5): Zero()
            (6): CBAM(
              (ChannelGate): ChannelGate(
                (mlp): Sequential(
                  (0): Flatten()
                  (1): Linear(in_features=16, out_features=1, bias=True)
                  (2): ReLU()
                  (3): Linear(in_features=1, out_features=16, bias=True)
                )
              )
              (SpatialGate): SpatialGate(
                (compress): ChannelPool()
                (spatial): BasicConv(
                  (conv): Conv2d(2, 1, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), bias=False)
                  (bn): BatchNorm2d(1, eps=1e-05, momentum=0.01, affine=True, track_running_stats=True)
                )
              )
            )
            (7): eca(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv): Conv1d(1, 1, kernel_size=(3,), stride=(1,), padding=(1,), bias=False)
              (sigmoid): Sigmoid()
            )
          )
          (attention): AttentionModule(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (fc): Sequential(
              (0): Linear(in_features=128, out_features=16, bias=False)
              (1): ReLU(inplace=True)
              (2): Linear(in_features=16, out_features=128, bias=False)
              (3): Sigmoid()
            )
          )
        )
        (5): MixedOp(
          (_ops): ModuleList(
            (0): SepConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=16, bias=False)
                (2): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
                (4): ReLU()
                (5): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=16, bias=False)
                (6): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (7): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
            (1): DilConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=16, bias=False)
                (2): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
            (2): Identity()
            (3): Sequential(
              (0): AvgPool2d(kernel_size=3, stride=1, padding=1)
              (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
            )
            (4): Sequential(
              (0): MaxPool2d(kernel_size=3, stride=1, padding=1, dilation=1, ceil_mode=False)
              (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
            )
            (5): Zero()
            (6): CBAM(
              (ChannelGate): ChannelGate(
                (mlp): Sequential(
                  (0): Flatten()
                  (1): Linear(in_features=16, out_features=1, bias=True)
                  (2): ReLU()
                  (3): Linear(in_features=1, out_features=16, bias=True)
                )
              )
              (SpatialGate): SpatialGate(
                (compress): ChannelPool()
                (spatial): BasicConv(
                  (conv): Conv2d(2, 1, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), bias=False)
                  (bn): BatchNorm2d(1, eps=1e-05, momentum=0.01, affine=True, track_running_stats=True)
                )
              )
            )
            (7): eca(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv): Conv1d(1, 1, kernel_size=(3,), stride=(1,), padding=(1,), bias=False)
              (sigmoid): Sigmoid()
            )
          )
          (attention): AttentionModule(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (fc): Sequential(
              (0): Linear(in_features=128, out_features=16, bias=False)
              (1): ReLU(inplace=True)
              (2): Linear(in_features=16, out_features=128, bias=False)
              (3): Sigmoid()
            )
          )
        )
        (6): MixedOp(
          (_ops): ModuleList(
            (0): SepConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=16, bias=False)
                (2): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
                (4): ReLU()
                (5): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=16, bias=False)
                (6): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (7): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
            (1): DilConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=16, bias=False)
                (2): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
            (2): Identity()
            (3): Sequential(
              (0): AvgPool2d(kernel_size=3, stride=1, padding=1)
              (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
            )
            (4): Sequential(
              (0): MaxPool2d(kernel_size=3, stride=1, padding=1, dilation=1, ceil_mode=False)
              (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
            )
            (5): Zero()
            (6): CBAM(
              (ChannelGate): ChannelGate(
                (mlp): Sequential(
                  (0): Flatten()
                  (1): Linear(in_features=16, out_features=1, bias=True)
                  (2): ReLU()
                  (3): Linear(in_features=1, out_features=16, bias=True)
                )
              )
              (SpatialGate): SpatialGate(
                (compress): ChannelPool()
                (spatial): BasicConv(
                  (conv): Conv2d(2, 1, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), bias=False)
                  (bn): BatchNorm2d(1, eps=1e-05, momentum=0.01, affine=True, track_running_stats=True)
                )
              )
            )
            (7): eca(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv): Conv1d(1, 1, kernel_size=(3,), stride=(1,), padding=(1,), bias=False)
              (sigmoid): Sigmoid()
            )
          )
          (attention): AttentionModule(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (fc): Sequential(
              (0): Linear(in_features=128, out_features=16, bias=False)
              (1): ReLU(inplace=True)
              (2): Linear(in_features=16, out_features=128, bias=False)
              (3): Sigmoid()
            )
          )
        )
        (7): MixedOp(
          (_ops): ModuleList(
            (0): SepConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=16, bias=False)
                (2): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
                (4): ReLU()
                (5): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=16, bias=False)
                (6): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (7): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
            (1): DilConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=16, bias=False)
                (2): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
            (2): Identity()
            (3): Sequential(
              (0): AvgPool2d(kernel_size=3, stride=1, padding=1)
              (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
            )
            (4): Sequential(
              (0): MaxPool2d(kernel_size=3, stride=1, padding=1, dilation=1, ceil_mode=False)
              (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
            )
            (5): Zero()
            (6): CBAM(
              (ChannelGate): ChannelGate(
                (mlp): Sequential(
                  (0): Flatten()
                  (1): Linear(in_features=16, out_features=1, bias=True)
                  (2): ReLU()
                  (3): Linear(in_features=1, out_features=16, bias=True)
                )
              )
              (SpatialGate): SpatialGate(
                (compress): ChannelPool()
                (spatial): BasicConv(
                  (conv): Conv2d(2, 1, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), bias=False)
                  (bn): BatchNorm2d(1, eps=1e-05, momentum=0.01, affine=True, track_running_stats=True)
                )
              )
            )
            (7): eca(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv): Conv1d(1, 1, kernel_size=(3,), stride=(1,), padding=(1,), bias=False)
              (sigmoid): Sigmoid()
            )
          )
          (attention): AttentionModule(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (fc): Sequential(
              (0): Linear(in_features=128, out_features=16, bias=False)
              (1): ReLU(inplace=True)
              (2): Linear(in_features=16, out_features=128, bias=False)
              (3): Sigmoid()
            )
          )
        )
        (8): MixedOp(
          (_ops): ModuleList(
            (0): SepConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=16, bias=False)
                (2): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
                (4): ReLU()
                (5): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=16, bias=False)
                (6): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (7): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
            (1): DilConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=16, bias=False)
                (2): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
            (2): Identity()
            (3): Sequential(
              (0): AvgPool2d(kernel_size=3, stride=1, padding=1)
              (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
            )
            (4): Sequential(
              (0): MaxPool2d(kernel_size=3, stride=1, padding=1, dilation=1, ceil_mode=False)
              (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
            )
            (5): Zero()
            (6): CBAM(
              (ChannelGate): ChannelGate(
                (mlp): Sequential(
                  (0): Flatten()
                  (1): Linear(in_features=16, out_features=1, bias=True)
                  (2): ReLU()
                  (3): Linear(in_features=1, out_features=16, bias=True)
                )
              )
              (SpatialGate): SpatialGate(
                (compress): ChannelPool()
                (spatial): BasicConv(
                  (conv): Conv2d(2, 1, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), bias=False)
                  (bn): BatchNorm2d(1, eps=1e-05, momentum=0.01, affine=True, track_running_stats=True)
                )
              )
            )
            (7): eca(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv): Conv1d(1, 1, kernel_size=(3,), stride=(1,), padding=(1,), bias=False)
              (sigmoid): Sigmoid()
            )
          )
          (attention): AttentionModule(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (fc): Sequential(
              (0): Linear(in_features=128, out_features=16, bias=False)
              (1): ReLU(inplace=True)
              (2): Linear(in_features=16, out_features=128, bias=False)
              (3): Sigmoid()
            )
          )
        )
        (9): MixedOp(
          (_ops): ModuleList(
            (0): SepConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=16, bias=False)
                (2): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
                (4): ReLU()
                (5): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=16, bias=False)
                (6): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (7): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
            (1): DilConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=16, bias=False)
                (2): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
            (2): Identity()
            (3): Sequential(
              (0): AvgPool2d(kernel_size=3, stride=1, padding=1)
              (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
            )
            (4): Sequential(
              (0): MaxPool2d(kernel_size=3, stride=1, padding=1, dilation=1, ceil_mode=False)
              (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
            )
            (5): Zero()
            (6): CBAM(
              (ChannelGate): ChannelGate(
                (mlp): Sequential(
                  (0): Flatten()
                  (1): Linear(in_features=16, out_features=1, bias=True)
                  (2): ReLU()
                  (3): Linear(in_features=1, out_features=16, bias=True)
                )
              )
              (SpatialGate): SpatialGate(
                (compress): ChannelPool()
                (spatial): BasicConv(
                  (conv): Conv2d(2, 1, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), bias=False)
                  (bn): BatchNorm2d(1, eps=1e-05, momentum=0.01, affine=True, track_running_stats=True)
                )
              )
            )
            (7): eca(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv): Conv1d(1, 1, kernel_size=(3,), stride=(1,), padding=(1,), bias=False)
              (sigmoid): Sigmoid()
            )
          )
          (attention): AttentionModule(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (fc): Sequential(
              (0): Linear(in_features=128, out_features=16, bias=False)
              (1): ReLU(inplace=True)
              (2): Linear(in_features=16, out_features=128, bias=False)
              (3): Sigmoid()
            )
          )
        )
        (10): MixedOp(
          (_ops): ModuleList(
            (0): SepConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=16, bias=False)
                (2): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
                (4): ReLU()
                (5): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=16, bias=False)
                (6): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (7): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
            (1): DilConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=16, bias=False)
                (2): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
            (2): Identity()
            (3): Sequential(
              (0): AvgPool2d(kernel_size=3, stride=1, padding=1)
              (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
            )
            (4): Sequential(
              (0): MaxPool2d(kernel_size=3, stride=1, padding=1, dilation=1, ceil_mode=False)
              (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
            )
            (5): Zero()
            (6): CBAM(
              (ChannelGate): ChannelGate(
                (mlp): Sequential(
                  (0): Flatten()
                  (1): Linear(in_features=16, out_features=1, bias=True)
                  (2): ReLU()
                  (3): Linear(in_features=1, out_features=16, bias=True)
                )
              )
              (SpatialGate): SpatialGate(
                (compress): ChannelPool()
                (spatial): BasicConv(
                  (conv): Conv2d(2, 1, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), bias=False)
                  (bn): BatchNorm2d(1, eps=1e-05, momentum=0.01, affine=True, track_running_stats=True)
                )
              )
            )
            (7): eca(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv): Conv1d(1, 1, kernel_size=(3,), stride=(1,), padding=(1,), bias=False)
              (sigmoid): Sigmoid()
            )
          )
          (attention): AttentionModule(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (fc): Sequential(
              (0): Linear(in_features=128, out_features=16, bias=False)
              (1): ReLU(inplace=True)
              (2): Linear(in_features=16, out_features=128, bias=False)
              (3): Sigmoid()
            )
          )
        )
        (11): MixedOp(
          (_ops): ModuleList(
            (0): SepConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=16, bias=False)
                (2): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
                (4): ReLU()
                (5): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=16, bias=False)
                (6): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (7): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
            (1): DilConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=16, bias=False)
                (2): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
            (2): Identity()
            (3): Sequential(
              (0): AvgPool2d(kernel_size=3, stride=1, padding=1)
              (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
            )
            (4): Sequential(
              (0): MaxPool2d(kernel_size=3, stride=1, padding=1, dilation=1, ceil_mode=False)
              (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
            )
            (5): Zero()
            (6): CBAM(
              (ChannelGate): ChannelGate(
                (mlp): Sequential(
                  (0): Flatten()
                  (1): Linear(in_features=16, out_features=1, bias=True)
                  (2): ReLU()
                  (3): Linear(in_features=1, out_features=16, bias=True)
                )
              )
              (SpatialGate): SpatialGate(
                (compress): ChannelPool()
                (spatial): BasicConv(
                  (conv): Conv2d(2, 1, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), bias=False)
                  (bn): BatchNorm2d(1, eps=1e-05, momentum=0.01, affine=True, track_running_stats=True)
                )
              )
            )
            (7): eca(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv): Conv1d(1, 1, kernel_size=(3,), stride=(1,), padding=(1,), bias=False)
              (sigmoid): Sigmoid()
            )
          )
          (attention): AttentionModule(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (fc): Sequential(
              (0): Linear(in_features=128, out_features=16, bias=False)
              (1): ReLU(inplace=True)
              (2): Linear(in_features=16, out_features=128, bias=False)
              (3): Sigmoid()
            )
          )
        )
        (12): MixedOp(
          (_ops): ModuleList(
            (0): SepConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=16, bias=False)
                (2): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
                (4): ReLU()
                (5): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=16, bias=False)
                (6): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (7): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
            (1): DilConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=16, bias=False)
                (2): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
            (2): Identity()
            (3): Sequential(
              (0): AvgPool2d(kernel_size=3, stride=1, padding=1)
              (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
            )
            (4): Sequential(
              (0): MaxPool2d(kernel_size=3, stride=1, padding=1, dilation=1, ceil_mode=False)
              (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
            )
            (5): Zero()
            (6): CBAM(
              (ChannelGate): ChannelGate(
                (mlp): Sequential(
                  (0): Flatten()
                  (1): Linear(in_features=16, out_features=1, bias=True)
                  (2): ReLU()
                  (3): Linear(in_features=1, out_features=16, bias=True)
                )
              )
              (SpatialGate): SpatialGate(
                (compress): ChannelPool()
                (spatial): BasicConv(
                  (conv): Conv2d(2, 1, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), bias=False)
                  (bn): BatchNorm2d(1, eps=1e-05, momentum=0.01, affine=True, track_running_stats=True)
                )
              )
            )
            (7): eca(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv): Conv1d(1, 1, kernel_size=(3,), stride=(1,), padding=(1,), bias=False)
              (sigmoid): Sigmoid()
            )
          )
          (attention): AttentionModule(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (fc): Sequential(
              (0): Linear(in_features=128, out_features=16, bias=False)
              (1): ReLU(inplace=True)
              (2): Linear(in_features=16, out_features=128, bias=False)
              (3): Sigmoid()
            )
          )
        )
        (13): MixedOp(
          (_ops): ModuleList(
            (0): SepConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=16, bias=False)
                (2): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
                (4): ReLU()
                (5): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=16, bias=False)
                (6): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (7): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
            (1): DilConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=16, bias=False)
                (2): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
            (2): Identity()
            (3): Sequential(
              (0): AvgPool2d(kernel_size=3, stride=1, padding=1)
              (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
            )
            (4): Sequential(
              (0): MaxPool2d(kernel_size=3, stride=1, padding=1, dilation=1, ceil_mode=False)
              (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
            )
            (5): Zero()
            (6): CBAM(
              (ChannelGate): ChannelGate(
                (mlp): Sequential(
                  (0): Flatten()
                  (1): Linear(in_features=16, out_features=1, bias=True)
                  (2): ReLU()
                  (3): Linear(in_features=1, out_features=16, bias=True)
                )
              )
              (SpatialGate): SpatialGate(
                (compress): ChannelPool()
                (spatial): BasicConv(
                  (conv): Conv2d(2, 1, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), bias=False)
                  (bn): BatchNorm2d(1, eps=1e-05, momentum=0.01, affine=True, track_running_stats=True)
                )
              )
            )
            (7): eca(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv): Conv1d(1, 1, kernel_size=(3,), stride=(1,), padding=(1,), bias=False)
              (sigmoid): Sigmoid()
            )
          )
          (attention): AttentionModule(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (fc): Sequential(
              (0): Linear(in_features=128, out_features=16, bias=False)
              (1): ReLU(inplace=True)
              (2): Linear(in_features=16, out_features=128, bias=False)
              (3): Sigmoid()
            )
          )
        )
      )
      (_bns): ModuleList()
    )
    (2): Cell(
      (preprocess0): ReLUConvBN(
        (op): Sequential(
          (0): ReLU()
          (1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (2): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
        )
      )
      (preprocess1): ReLUConvBN(
        (op): Sequential(
          (0): ReLU()
          (1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (2): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
        )
      )
      (_ops): ModuleList(
        (0): MixedOp(
          (_ops): ModuleList(
            (0): SepConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(32, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=32, bias=False)
                (2): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
                (4): ReLU()
                (5): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
                (6): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (7): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
            (1): DilConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(32, 32, kernel_size=(3, 3), stride=(2, 2), padding=(2, 2), dilation=(2, 2), groups=32, bias=False)
                (2): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
            (2): FactorizedReduce(
              (relu): ReLU()
              (conv_1): Conv2d(32, 16, kernel_size=(1, 1), stride=(2, 2), bias=False)
              (conv_2): Conv2d(32, 16, kernel_size=(1, 1), stride=(2, 2), bias=False)
              (bn): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
            )
            (3): Sequential(
              (0): AvgPool2d(kernel_size=3, stride=2, padding=1)
              (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
            )
            (4): Sequential(
              (0): MaxPool2d(kernel_size=3, stride=2, padding=1, dilation=1, ceil_mode=False)
              (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
            )
            (5): Zero()
            (6): CBAM(
              (ChannelGate): ChannelGate(
                (mlp): Sequential(
                  (0): Flatten()
                  (1): Linear(in_features=32, out_features=2, bias=True)
                  (2): ReLU()
                  (3): Linear(in_features=2, out_features=32, bias=True)
                )
              )
              (SpatialGate): SpatialGate(
                (compress): ChannelPool()
                (spatial): BasicConv(
                  (conv): Conv2d(2, 1, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), bias=False)
                  (bn): BatchNorm2d(1, eps=1e-05, momentum=0.01, affine=True, track_running_stats=True)
                )
              )
              (avg): AvgPool2d(kernel_size=3, stride=2, padding=1)
            )
            (7): eca(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv): Conv1d(1, 1, kernel_size=(3,), stride=(1,), padding=(1,), bias=False)
              (sigmoid): Sigmoid()
              (avg): AvgPool2d(kernel_size=3, stride=2, padding=1)
            )
          )
          (attention): AttentionModule(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (fc): Sequential(
              (0): Linear(in_features=256, out_features=32, bias=False)
              (1): ReLU(inplace=True)
              (2): Linear(in_features=32, out_features=256, bias=False)
              (3): Sigmoid()
            )
          )
        )
        (1): MixedOp(
          (_ops): ModuleList(
            (0): SepConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(32, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=32, bias=False)
                (2): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
                (4): ReLU()
                (5): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
                (6): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (7): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
            (1): DilConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(32, 32, kernel_size=(3, 3), stride=(2, 2), padding=(2, 2), dilation=(2, 2), groups=32, bias=False)
                (2): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
            (2): FactorizedReduce(
              (relu): ReLU()
              (conv_1): Conv2d(32, 16, kernel_size=(1, 1), stride=(2, 2), bias=False)
              (conv_2): Conv2d(32, 16, kernel_size=(1, 1), stride=(2, 2), bias=False)
              (bn): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
            )
            (3): Sequential(
              (0): AvgPool2d(kernel_size=3, stride=2, padding=1)
              (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
            )
            (4): Sequential(
              (0): MaxPool2d(kernel_size=3, stride=2, padding=1, dilation=1, ceil_mode=False)
              (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
            )
            (5): Zero()
            (6): CBAM(
              (ChannelGate): ChannelGate(
                (mlp): Sequential(
                  (0): Flatten()
                  (1): Linear(in_features=32, out_features=2, bias=True)
                  (2): ReLU()
                  (3): Linear(in_features=2, out_features=32, bias=True)
                )
              )
              (SpatialGate): SpatialGate(
                (compress): ChannelPool()
                (spatial): BasicConv(
                  (conv): Conv2d(2, 1, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), bias=False)
                  (bn): BatchNorm2d(1, eps=1e-05, momentum=0.01, affine=True, track_running_stats=True)
                )
              )
              (avg): AvgPool2d(kernel_size=3, stride=2, padding=1)
            )
            (7): eca(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv): Conv1d(1, 1, kernel_size=(3,), stride=(1,), padding=(1,), bias=False)
              (sigmoid): Sigmoid()
              (avg): AvgPool2d(kernel_size=3, stride=2, padding=1)
            )
          )
          (attention): AttentionModule(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (fc): Sequential(
              (0): Linear(in_features=256, out_features=32, bias=False)
              (1): ReLU(inplace=True)
              (2): Linear(in_features=32, out_features=256, bias=False)
              (3): Sigmoid()
            )
          )
        )
        (2): MixedOp(
          (_ops): ModuleList(
            (0): SepConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(32, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=32, bias=False)
                (2): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
                (4): ReLU()
                (5): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
                (6): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (7): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
            (1): DilConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(32, 32, kernel_size=(3, 3), stride=(2, 2), padding=(2, 2), dilation=(2, 2), groups=32, bias=False)
                (2): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
            (2): FactorizedReduce(
              (relu): ReLU()
              (conv_1): Conv2d(32, 16, kernel_size=(1, 1), stride=(2, 2), bias=False)
              (conv_2): Conv2d(32, 16, kernel_size=(1, 1), stride=(2, 2), bias=False)
              (bn): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
            )
            (3): Sequential(
              (0): AvgPool2d(kernel_size=3, stride=2, padding=1)
              (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
            )
            (4): Sequential(
              (0): MaxPool2d(kernel_size=3, stride=2, padding=1, dilation=1, ceil_mode=False)
              (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
            )
            (5): Zero()
            (6): CBAM(
              (ChannelGate): ChannelGate(
                (mlp): Sequential(
                  (0): Flatten()
                  (1): Linear(in_features=32, out_features=2, bias=True)
                  (2): ReLU()
                  (3): Linear(in_features=2, out_features=32, bias=True)
                )
              )
              (SpatialGate): SpatialGate(
                (compress): ChannelPool()
                (spatial): BasicConv(
                  (conv): Conv2d(2, 1, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), bias=False)
                  (bn): BatchNorm2d(1, eps=1e-05, momentum=0.01, affine=True, track_running_stats=True)
                )
              )
              (avg): AvgPool2d(kernel_size=3, stride=2, padding=1)
            )
            (7): eca(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv): Conv1d(1, 1, kernel_size=(3,), stride=(1,), padding=(1,), bias=False)
              (sigmoid): Sigmoid()
              (avg): AvgPool2d(kernel_size=3, stride=2, padding=1)
            )
          )
          (attention): AttentionModule(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (fc): Sequential(
              (0): Linear(in_features=256, out_features=32, bias=False)
              (1): ReLU(inplace=True)
              (2): Linear(in_features=32, out_features=256, bias=False)
              (3): Sigmoid()
            )
          )
        )
        (3): MixedOp(
          (_ops): ModuleList(
            (0): SepConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(32, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=32, bias=False)
                (2): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
                (4): ReLU()
                (5): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
                (6): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (7): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
            (1): DilConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(32, 32, kernel_size=(3, 3), stride=(2, 2), padding=(2, 2), dilation=(2, 2), groups=32, bias=False)
                (2): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
            (2): FactorizedReduce(
              (relu): ReLU()
              (conv_1): Conv2d(32, 16, kernel_size=(1, 1), stride=(2, 2), bias=False)
              (conv_2): Conv2d(32, 16, kernel_size=(1, 1), stride=(2, 2), bias=False)
              (bn): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
            )
            (3): Sequential(
              (0): AvgPool2d(kernel_size=3, stride=2, padding=1)
              (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
            )
            (4): Sequential(
              (0): MaxPool2d(kernel_size=3, stride=2, padding=1, dilation=1, ceil_mode=False)
              (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
            )
            (5): Zero()
            (6): CBAM(
              (ChannelGate): ChannelGate(
                (mlp): Sequential(
                  (0): Flatten()
                  (1): Linear(in_features=32, out_features=2, bias=True)
                  (2): ReLU()
                  (3): Linear(in_features=2, out_features=32, bias=True)
                )
              )
              (SpatialGate): SpatialGate(
                (compress): ChannelPool()
                (spatial): BasicConv(
                  (conv): Conv2d(2, 1, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), bias=False)
                  (bn): BatchNorm2d(1, eps=1e-05, momentum=0.01, affine=True, track_running_stats=True)
                )
              )
              (avg): AvgPool2d(kernel_size=3, stride=2, padding=1)
            )
            (7): eca(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv): Conv1d(1, 1, kernel_size=(3,), stride=(1,), padding=(1,), bias=False)
              (sigmoid): Sigmoid()
              (avg): AvgPool2d(kernel_size=3, stride=2, padding=1)
            )
          )
          (attention): AttentionModule(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (fc): Sequential(
              (0): Linear(in_features=256, out_features=32, bias=False)
              (1): ReLU(inplace=True)
              (2): Linear(in_features=32, out_features=256, bias=False)
              (3): Sigmoid()
            )
          )
        )
        (4): MixedOp(
          (_ops): ModuleList(
            (0): SepConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
                (2): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
                (4): ReLU()
                (5): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
                (6): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (7): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
            (1): DilConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=32, bias=False)
                (2): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
            (2): Identity()
            (3): Sequential(
              (0): AvgPool2d(kernel_size=3, stride=1, padding=1)
              (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
            )
            (4): Sequential(
              (0): MaxPool2d(kernel_size=3, stride=1, padding=1, dilation=1, ceil_mode=False)
              (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
            )
            (5): Zero()
            (6): CBAM(
              (ChannelGate): ChannelGate(
                (mlp): Sequential(
                  (0): Flatten()
                  (1): Linear(in_features=32, out_features=2, bias=True)
                  (2): ReLU()
                  (3): Linear(in_features=2, out_features=32, bias=True)
                )
              )
              (SpatialGate): SpatialGate(
                (compress): ChannelPool()
                (spatial): BasicConv(
                  (conv): Conv2d(2, 1, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), bias=False)
                  (bn): BatchNorm2d(1, eps=1e-05, momentum=0.01, affine=True, track_running_stats=True)
                )
              )
            )
            (7): eca(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv): Conv1d(1, 1, kernel_size=(3,), stride=(1,), padding=(1,), bias=False)
              (sigmoid): Sigmoid()
            )
          )
          (attention): AttentionModule(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (fc): Sequential(
              (0): Linear(in_features=256, out_features=32, bias=False)
              (1): ReLU(inplace=True)
              (2): Linear(in_features=32, out_features=256, bias=False)
              (3): Sigmoid()
            )
          )
        )
        (5): MixedOp(
          (_ops): ModuleList(
            (0): SepConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(32, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=32, bias=False)
                (2): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
                (4): ReLU()
                (5): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
                (6): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (7): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
            (1): DilConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(32, 32, kernel_size=(3, 3), stride=(2, 2), padding=(2, 2), dilation=(2, 2), groups=32, bias=False)
                (2): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
            (2): FactorizedReduce(
              (relu): ReLU()
              (conv_1): Conv2d(32, 16, kernel_size=(1, 1), stride=(2, 2), bias=False)
              (conv_2): Conv2d(32, 16, kernel_size=(1, 1), stride=(2, 2), bias=False)
              (bn): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
            )
            (3): Sequential(
              (0): AvgPool2d(kernel_size=3, stride=2, padding=1)
              (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
            )
            (4): Sequential(
              (0): MaxPool2d(kernel_size=3, stride=2, padding=1, dilation=1, ceil_mode=False)
              (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
            )
            (5): Zero()
            (6): CBAM(
              (ChannelGate): ChannelGate(
                (mlp): Sequential(
                  (0): Flatten()
                  (1): Linear(in_features=32, out_features=2, bias=True)
                  (2): ReLU()
                  (3): Linear(in_features=2, out_features=32, bias=True)
                )
              )
              (SpatialGate): SpatialGate(
                (compress): ChannelPool()
                (spatial): BasicConv(
                  (conv): Conv2d(2, 1, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), bias=False)
                  (bn): BatchNorm2d(1, eps=1e-05, momentum=0.01, affine=True, track_running_stats=True)
                )
              )
              (avg): AvgPool2d(kernel_size=3, stride=2, padding=1)
            )
            (7): eca(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv): Conv1d(1, 1, kernel_size=(3,), stride=(1,), padding=(1,), bias=False)
              (sigmoid): Sigmoid()
              (avg): AvgPool2d(kernel_size=3, stride=2, padding=1)
            )
          )
          (attention): AttentionModule(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (fc): Sequential(
              (0): Linear(in_features=256, out_features=32, bias=False)
              (1): ReLU(inplace=True)
              (2): Linear(in_features=32, out_features=256, bias=False)
              (3): Sigmoid()
            )
          )
        )
        (6): MixedOp(
          (_ops): ModuleList(
            (0): SepConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(32, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=32, bias=False)
                (2): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
                (4): ReLU()
                (5): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
                (6): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (7): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
            (1): DilConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(32, 32, kernel_size=(3, 3), stride=(2, 2), padding=(2, 2), dilation=(2, 2), groups=32, bias=False)
                (2): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
            (2): FactorizedReduce(
              (relu): ReLU()
              (conv_1): Conv2d(32, 16, kernel_size=(1, 1), stride=(2, 2), bias=False)
              (conv_2): Conv2d(32, 16, kernel_size=(1, 1), stride=(2, 2), bias=False)
              (bn): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
            )
            (3): Sequential(
              (0): AvgPool2d(kernel_size=3, stride=2, padding=1)
              (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
            )
            (4): Sequential(
              (0): MaxPool2d(kernel_size=3, stride=2, padding=1, dilation=1, ceil_mode=False)
              (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
            )
            (5): Zero()
            (6): CBAM(
              (ChannelGate): ChannelGate(
                (mlp): Sequential(
                  (0): Flatten()
                  (1): Linear(in_features=32, out_features=2, bias=True)
                  (2): ReLU()
                  (3): Linear(in_features=2, out_features=32, bias=True)
                )
              )
              (SpatialGate): SpatialGate(
                (compress): ChannelPool()
                (spatial): BasicConv(
                  (conv): Conv2d(2, 1, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), bias=False)
                  (bn): BatchNorm2d(1, eps=1e-05, momentum=0.01, affine=True, track_running_stats=True)
                )
              )
              (avg): AvgPool2d(kernel_size=3, stride=2, padding=1)
            )
            (7): eca(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv): Conv1d(1, 1, kernel_size=(3,), stride=(1,), padding=(1,), bias=False)
              (sigmoid): Sigmoid()
              (avg): AvgPool2d(kernel_size=3, stride=2, padding=1)
            )
          )
          (attention): AttentionModule(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (fc): Sequential(
              (0): Linear(in_features=256, out_features=32, bias=False)
              (1): ReLU(inplace=True)
              (2): Linear(in_features=32, out_features=256, bias=False)
              (3): Sigmoid()
            )
          )
        )
        (7): MixedOp(
          (_ops): ModuleList(
            (0): SepConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
                (2): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
                (4): ReLU()
                (5): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
                (6): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (7): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
            (1): DilConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=32, bias=False)
                (2): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
            (2): Identity()
            (3): Sequential(
              (0): AvgPool2d(kernel_size=3, stride=1, padding=1)
              (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
            )
            (4): Sequential(
              (0): MaxPool2d(kernel_size=3, stride=1, padding=1, dilation=1, ceil_mode=False)
              (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
            )
            (5): Zero()
            (6): CBAM(
              (ChannelGate): ChannelGate(
                (mlp): Sequential(
                  (0): Flatten()
                  (1): Linear(in_features=32, out_features=2, bias=True)
                  (2): ReLU()
                  (3): Linear(in_features=2, out_features=32, bias=True)
                )
              )
              (SpatialGate): SpatialGate(
                (compress): ChannelPool()
                (spatial): BasicConv(
                  (conv): Conv2d(2, 1, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), bias=False)
                  (bn): BatchNorm2d(1, eps=1e-05, momentum=0.01, affine=True, track_running_stats=True)
                )
              )
            )
            (7): eca(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv): Conv1d(1, 1, kernel_size=(3,), stride=(1,), padding=(1,), bias=False)
              (sigmoid): Sigmoid()
            )
          )
          (attention): AttentionModule(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (fc): Sequential(
              (0): Linear(in_features=256, out_features=32, bias=False)
              (1): ReLU(inplace=True)
              (2): Linear(in_features=32, out_features=256, bias=False)
              (3): Sigmoid()
            )
          )
        )
        (8): MixedOp(
          (_ops): ModuleList(
            (0): SepConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
                (2): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
                (4): ReLU()
                (5): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
                (6): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (7): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
            (1): DilConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=32, bias=False)
                (2): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
            (2): Identity()
            (3): Sequential(
              (0): AvgPool2d(kernel_size=3, stride=1, padding=1)
              (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
            )
            (4): Sequential(
              (0): MaxPool2d(kernel_size=3, stride=1, padding=1, dilation=1, ceil_mode=False)
              (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
            )
            (5): Zero()
            (6): CBAM(
              (ChannelGate): ChannelGate(
                (mlp): Sequential(
                  (0): Flatten()
                  (1): Linear(in_features=32, out_features=2, bias=True)
                  (2): ReLU()
                  (3): Linear(in_features=2, out_features=32, bias=True)
                )
              )
              (SpatialGate): SpatialGate(
                (compress): ChannelPool()
                (spatial): BasicConv(
                  (conv): Conv2d(2, 1, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), bias=False)
                  (bn): BatchNorm2d(1, eps=1e-05, momentum=0.01, affine=True, track_running_stats=True)
                )
              )
            )
            (7): eca(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv): Conv1d(1, 1, kernel_size=(3,), stride=(1,), padding=(1,), bias=False)
              (sigmoid): Sigmoid()
            )
          )
          (attention): AttentionModule(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (fc): Sequential(
              (0): Linear(in_features=256, out_features=32, bias=False)
              (1): ReLU(inplace=True)
              (2): Linear(in_features=32, out_features=256, bias=False)
              (3): Sigmoid()
            )
          )
        )
        (9): MixedOp(
          (_ops): ModuleList(
            (0): SepConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(32, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=32, bias=False)
                (2): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
                (4): ReLU()
                (5): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
                (6): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (7): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
            (1): DilConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(32, 32, kernel_size=(3, 3), stride=(2, 2), padding=(2, 2), dilation=(2, 2), groups=32, bias=False)
                (2): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
            (2): FactorizedReduce(
              (relu): ReLU()
              (conv_1): Conv2d(32, 16, kernel_size=(1, 1), stride=(2, 2), bias=False)
              (conv_2): Conv2d(32, 16, kernel_size=(1, 1), stride=(2, 2), bias=False)
              (bn): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
            )
            (3): Sequential(
              (0): AvgPool2d(kernel_size=3, stride=2, padding=1)
              (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
            )
            (4): Sequential(
              (0): MaxPool2d(kernel_size=3, stride=2, padding=1, dilation=1, ceil_mode=False)
              (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
            )
            (5): Zero()
            (6): CBAM(
              (ChannelGate): ChannelGate(
                (mlp): Sequential(
                  (0): Flatten()
                  (1): Linear(in_features=32, out_features=2, bias=True)
                  (2): ReLU()
                  (3): Linear(in_features=2, out_features=32, bias=True)
                )
              )
              (SpatialGate): SpatialGate(
                (compress): ChannelPool()
                (spatial): BasicConv(
                  (conv): Conv2d(2, 1, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), bias=False)
                  (bn): BatchNorm2d(1, eps=1e-05, momentum=0.01, affine=True, track_running_stats=True)
                )
              )
              (avg): AvgPool2d(kernel_size=3, stride=2, padding=1)
            )
            (7): eca(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv): Conv1d(1, 1, kernel_size=(3,), stride=(1,), padding=(1,), bias=False)
              (sigmoid): Sigmoid()
              (avg): AvgPool2d(kernel_size=3, stride=2, padding=1)
            )
          )
          (attention): AttentionModule(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (fc): Sequential(
              (0): Linear(in_features=256, out_features=32, bias=False)
              (1): ReLU(inplace=True)
              (2): Linear(in_features=32, out_features=256, bias=False)
              (3): Sigmoid()
            )
          )
        )
        (10): MixedOp(
          (_ops): ModuleList(
            (0): SepConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(32, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=32, bias=False)
                (2): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
                (4): ReLU()
                (5): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
                (6): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (7): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
            (1): DilConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(32, 32, kernel_size=(3, 3), stride=(2, 2), padding=(2, 2), dilation=(2, 2), groups=32, bias=False)
                (2): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
            (2): FactorizedReduce(
              (relu): ReLU()
              (conv_1): Conv2d(32, 16, kernel_size=(1, 1), stride=(2, 2), bias=False)
              (conv_2): Conv2d(32, 16, kernel_size=(1, 1), stride=(2, 2), bias=False)
              (bn): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
            )
            (3): Sequential(
              (0): AvgPool2d(kernel_size=3, stride=2, padding=1)
              (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
            )
            (4): Sequential(
              (0): MaxPool2d(kernel_size=3, stride=2, padding=1, dilation=1, ceil_mode=False)
              (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
            )
            (5): Zero()
            (6): CBAM(
              (ChannelGate): ChannelGate(
                (mlp): Sequential(
                  (0): Flatten()
                  (1): Linear(in_features=32, out_features=2, bias=True)
                  (2): ReLU()
                  (3): Linear(in_features=2, out_features=32, bias=True)
                )
              )
              (SpatialGate): SpatialGate(
                (compress): ChannelPool()
                (spatial): BasicConv(
                  (conv): Conv2d(2, 1, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), bias=False)
                  (bn): BatchNorm2d(1, eps=1e-05, momentum=0.01, affine=True, track_running_stats=True)
                )
              )
              (avg): AvgPool2d(kernel_size=3, stride=2, padding=1)
            )
            (7): eca(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv): Conv1d(1, 1, kernel_size=(3,), stride=(1,), padding=(1,), bias=False)
              (sigmoid): Sigmoid()
              (avg): AvgPool2d(kernel_size=3, stride=2, padding=1)
            )
          )
          (attention): AttentionModule(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (fc): Sequential(
              (0): Linear(in_features=256, out_features=32, bias=False)
              (1): ReLU(inplace=True)
              (2): Linear(in_features=32, out_features=256, bias=False)
              (3): Sigmoid()
            )
          )
        )
        (11): MixedOp(
          (_ops): ModuleList(
            (0): SepConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
                (2): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
                (4): ReLU()
                (5): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
                (6): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (7): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
            (1): DilConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=32, bias=False)
                (2): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
            (2): Identity()
            (3): Sequential(
              (0): AvgPool2d(kernel_size=3, stride=1, padding=1)
              (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
            )
            (4): Sequential(
              (0): MaxPool2d(kernel_size=3, stride=1, padding=1, dilation=1, ceil_mode=False)
              (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
            )
            (5): Zero()
            (6): CBAM(
              (ChannelGate): ChannelGate(
                (mlp): Sequential(
                  (0): Flatten()
                  (1): Linear(in_features=32, out_features=2, bias=True)
                  (2): ReLU()
                  (3): Linear(in_features=2, out_features=32, bias=True)
                )
              )
              (SpatialGate): SpatialGate(
                (compress): ChannelPool()
                (spatial): BasicConv(
                  (conv): Conv2d(2, 1, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), bias=False)
                  (bn): BatchNorm2d(1, eps=1e-05, momentum=0.01, affine=True, track_running_stats=True)
                )
              )
            )
            (7): eca(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv): Conv1d(1, 1, kernel_size=(3,), stride=(1,), padding=(1,), bias=False)
              (sigmoid): Sigmoid()
            )
          )
          (attention): AttentionModule(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (fc): Sequential(
              (0): Linear(in_features=256, out_features=32, bias=False)
              (1): ReLU(inplace=True)
              (2): Linear(in_features=32, out_features=256, bias=False)
              (3): Sigmoid()
            )
          )
        )
        (12): MixedOp(
          (_ops): ModuleList(
            (0): SepConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
                (2): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
                (4): ReLU()
                (5): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
                (6): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (7): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
            (1): DilConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=32, bias=False)
                (2): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
            (2): Identity()
            (3): Sequential(
              (0): AvgPool2d(kernel_size=3, stride=1, padding=1)
              (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
            )
            (4): Sequential(
              (0): MaxPool2d(kernel_size=3, stride=1, padding=1, dilation=1, ceil_mode=False)
              (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
            )
            (5): Zero()
            (6): CBAM(
              (ChannelGate): ChannelGate(
                (mlp): Sequential(
                  (0): Flatten()
                  (1): Linear(in_features=32, out_features=2, bias=True)
                  (2): ReLU()
                  (3): Linear(in_features=2, out_features=32, bias=True)
                )
              )
              (SpatialGate): SpatialGate(
                (compress): ChannelPool()
                (spatial): BasicConv(
                  (conv): Conv2d(2, 1, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), bias=False)
                  (bn): BatchNorm2d(1, eps=1e-05, momentum=0.01, affine=True, track_running_stats=True)
                )
              )
            )
            (7): eca(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv): Conv1d(1, 1, kernel_size=(3,), stride=(1,), padding=(1,), bias=False)
              (sigmoid): Sigmoid()
            )
          )
          (attention): AttentionModule(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (fc): Sequential(
              (0): Linear(in_features=256, out_features=32, bias=False)
              (1): ReLU(inplace=True)
              (2): Linear(in_features=32, out_features=256, bias=False)
              (3): Sigmoid()
            )
          )
        )
        (13): MixedOp(
          (_ops): ModuleList(
            (0): SepConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
                (2): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
                (4): ReLU()
                (5): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
                (6): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (7): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
            (1): DilConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=32, bias=False)
                (2): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
            (2): Identity()
            (3): Sequential(
              (0): AvgPool2d(kernel_size=3, stride=1, padding=1)
              (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
            )
            (4): Sequential(
              (0): MaxPool2d(kernel_size=3, stride=1, padding=1, dilation=1, ceil_mode=False)
              (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
            )
            (5): Zero()
            (6): CBAM(
              (ChannelGate): ChannelGate(
                (mlp): Sequential(
                  (0): Flatten()
                  (1): Linear(in_features=32, out_features=2, bias=True)
                  (2): ReLU()
                  (3): Linear(in_features=2, out_features=32, bias=True)
                )
              )
              (SpatialGate): SpatialGate(
                (compress): ChannelPool()
                (spatial): BasicConv(
                  (conv): Conv2d(2, 1, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), bias=False)
                  (bn): BatchNorm2d(1, eps=1e-05, momentum=0.01, affine=True, track_running_stats=True)
                )
              )
            )
            (7): eca(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv): Conv1d(1, 1, kernel_size=(3,), stride=(1,), padding=(1,), bias=False)
              (sigmoid): Sigmoid()
            )
          )
          (attention): AttentionModule(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (fc): Sequential(
              (0): Linear(in_features=256, out_features=32, bias=False)
              (1): ReLU(inplace=True)
              (2): Linear(in_features=32, out_features=256, bias=False)
              (3): Sigmoid()
            )
          )
        )
      )
      (_bns): ModuleList()
    )
    (3): Cell(
      (preprocess0): FactorizedReduce(
        (relu): ReLU()
        (conv_1): Conv2d(64, 16, kernel_size=(1, 1), stride=(2, 2), bias=False)
        (conv_2): Conv2d(64, 16, kernel_size=(1, 1), stride=(2, 2), bias=False)
        (bn): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
      )
      (preprocess1): ReLUConvBN(
        (op): Sequential(
          (0): ReLU()
          (1): Conv2d(128, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (2): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
        )
      )
      (_ops): ModuleList(
        (0): MixedOp(
          (_ops): ModuleList(
            (0): SepConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
                (2): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
                (4): ReLU()
                (5): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
                (6): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (7): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
            (1): DilConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=32, bias=False)
                (2): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
            (2): Identity()
            (3): Sequential(
              (0): AvgPool2d(kernel_size=3, stride=1, padding=1)
              (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
            )
            (4): Sequential(
              (0): MaxPool2d(kernel_size=3, stride=1, padding=1, dilation=1, ceil_mode=False)
              (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
            )
            (5): Zero()
            (6): CBAM(
              (ChannelGate): ChannelGate(
                (mlp): Sequential(
                  (0): Flatten()
                  (1): Linear(in_features=32, out_features=2, bias=True)
                  (2): ReLU()
                  (3): Linear(in_features=2, out_features=32, bias=True)
                )
              )
              (SpatialGate): SpatialGate(
                (compress): ChannelPool()
                (spatial): BasicConv(
                  (conv): Conv2d(2, 1, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), bias=False)
                  (bn): BatchNorm2d(1, eps=1e-05, momentum=0.01, affine=True, track_running_stats=True)
                )
              )
            )
            (7): eca(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv): Conv1d(1, 1, kernel_size=(3,), stride=(1,), padding=(1,), bias=False)
              (sigmoid): Sigmoid()
            )
          )
          (attention): AttentionModule(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (fc): Sequential(
              (0): Linear(in_features=256, out_features=32, bias=False)
              (1): ReLU(inplace=True)
              (2): Linear(in_features=32, out_features=256, bias=False)
              (3): Sigmoid()
            )
          )
        )
        (1): MixedOp(
          (_ops): ModuleList(
            (0): SepConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
                (2): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
                (4): ReLU()
                (5): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
                (6): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (7): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
            (1): DilConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=32, bias=False)
                (2): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
            (2): Identity()
            (3): Sequential(
              (0): AvgPool2d(kernel_size=3, stride=1, padding=1)
              (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
            )
            (4): Sequential(
              (0): MaxPool2d(kernel_size=3, stride=1, padding=1, dilation=1, ceil_mode=False)
              (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
            )
            (5): Zero()
            (6): CBAM(
              (ChannelGate): ChannelGate(
                (mlp): Sequential(
                  (0): Flatten()
                  (1): Linear(in_features=32, out_features=2, bias=True)
                  (2): ReLU()
                  (3): Linear(in_features=2, out_features=32, bias=True)
                )
              )
              (SpatialGate): SpatialGate(
                (compress): ChannelPool()
                (spatial): BasicConv(
                  (conv): Conv2d(2, 1, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), bias=False)
                  (bn): BatchNorm2d(1, eps=1e-05, momentum=0.01, affine=True, track_running_stats=True)
                )
              )
            )
            (7): eca(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv): Conv1d(1, 1, kernel_size=(3,), stride=(1,), padding=(1,), bias=False)
              (sigmoid): Sigmoid()
            )
          )
          (attention): AttentionModule(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (fc): Sequential(
              (0): Linear(in_features=256, out_features=32, bias=False)
              (1): ReLU(inplace=True)
              (2): Linear(in_features=32, out_features=256, bias=False)
              (3): Sigmoid()
            )
          )
        )
        (2): MixedOp(
          (_ops): ModuleList(
            (0): SepConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
                (2): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
                (4): ReLU()
                (5): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
                (6): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (7): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
            (1): DilConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=32, bias=False)
                (2): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
            (2): Identity()
            (3): Sequential(
              (0): AvgPool2d(kernel_size=3, stride=1, padding=1)
              (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
            )
            (4): Sequential(
              (0): MaxPool2d(kernel_size=3, stride=1, padding=1, dilation=1, ceil_mode=False)
              (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
            )
            (5): Zero()
            (6): CBAM(
              (ChannelGate): ChannelGate(
                (mlp): Sequential(
                  (0): Flatten()
                  (1): Linear(in_features=32, out_features=2, bias=True)
                  (2): ReLU()
                  (3): Linear(in_features=2, out_features=32, bias=True)
                )
              )
              (SpatialGate): SpatialGate(
                (compress): ChannelPool()
                (spatial): BasicConv(
                  (conv): Conv2d(2, 1, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), bias=False)
                  (bn): BatchNorm2d(1, eps=1e-05, momentum=0.01, affine=True, track_running_stats=True)
                )
              )
            )
            (7): eca(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv): Conv1d(1, 1, kernel_size=(3,), stride=(1,), padding=(1,), bias=False)
              (sigmoid): Sigmoid()
            )
          )
          (attention): AttentionModule(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (fc): Sequential(
              (0): Linear(in_features=256, out_features=32, bias=False)
              (1): ReLU(inplace=True)
              (2): Linear(in_features=32, out_features=256, bias=False)
              (3): Sigmoid()
            )
          )
        )
        (3): MixedOp(
          (_ops): ModuleList(
            (0): SepConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
                (2): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
                (4): ReLU()
                (5): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
                (6): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (7): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
            (1): DilConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=32, bias=False)
                (2): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
            (2): Identity()
            (3): Sequential(
              (0): AvgPool2d(kernel_size=3, stride=1, padding=1)
              (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
            )
            (4): Sequential(
              (0): MaxPool2d(kernel_size=3, stride=1, padding=1, dilation=1, ceil_mode=False)
              (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
            )
            (5): Zero()
            (6): CBAM(
              (ChannelGate): ChannelGate(
                (mlp): Sequential(
                  (0): Flatten()
                  (1): Linear(in_features=32, out_features=2, bias=True)
                  (2): ReLU()
                  (3): Linear(in_features=2, out_features=32, bias=True)
                )
              )
              (SpatialGate): SpatialGate(
                (compress): ChannelPool()
                (spatial): BasicConv(
                  (conv): Conv2d(2, 1, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), bias=False)
                  (bn): BatchNorm2d(1, eps=1e-05, momentum=0.01, affine=True, track_running_stats=True)
                )
              )
            )
            (7): eca(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv): Conv1d(1, 1, kernel_size=(3,), stride=(1,), padding=(1,), bias=False)
              (sigmoid): Sigmoid()
            )
          )
          (attention): AttentionModule(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (fc): Sequential(
              (0): Linear(in_features=256, out_features=32, bias=False)
              (1): ReLU(inplace=True)
              (2): Linear(in_features=32, out_features=256, bias=False)
              (3): Sigmoid()
            )
          )
        )
        (4): MixedOp(
          (_ops): ModuleList(
            (0): SepConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
                (2): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
                (4): ReLU()
                (5): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
                (6): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (7): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
            (1): DilConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=32, bias=False)
                (2): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
            (2): Identity()
            (3): Sequential(
              (0): AvgPool2d(kernel_size=3, stride=1, padding=1)
              (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
            )
            (4): Sequential(
              (0): MaxPool2d(kernel_size=3, stride=1, padding=1, dilation=1, ceil_mode=False)
              (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
            )
            (5): Zero()
            (6): CBAM(
              (ChannelGate): ChannelGate(
                (mlp): Sequential(
                  (0): Flatten()
                  (1): Linear(in_features=32, out_features=2, bias=True)
                  (2): ReLU()
                  (3): Linear(in_features=2, out_features=32, bias=True)
                )
              )
              (SpatialGate): SpatialGate(
                (compress): ChannelPool()
                (spatial): BasicConv(
                  (conv): Conv2d(2, 1, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), bias=False)
                  (bn): BatchNorm2d(1, eps=1e-05, momentum=0.01, affine=True, track_running_stats=True)
                )
              )
            )
            (7): eca(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv): Conv1d(1, 1, kernel_size=(3,), stride=(1,), padding=(1,), bias=False)
              (sigmoid): Sigmoid()
            )
          )
          (attention): AttentionModule(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (fc): Sequential(
              (0): Linear(in_features=256, out_features=32, bias=False)
              (1): ReLU(inplace=True)
              (2): Linear(in_features=32, out_features=256, bias=False)
              (3): Sigmoid()
            )
          )
        )
        (5): MixedOp(
          (_ops): ModuleList(
            (0): SepConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
                (2): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
                (4): ReLU()
                (5): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
                (6): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (7): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
            (1): DilConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=32, bias=False)
                (2): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
            (2): Identity()
            (3): Sequential(
              (0): AvgPool2d(kernel_size=3, stride=1, padding=1)
              (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
            )
            (4): Sequential(
              (0): MaxPool2d(kernel_size=3, stride=1, padding=1, dilation=1, ceil_mode=False)
              (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
            )
            (5): Zero()
            (6): CBAM(
              (ChannelGate): ChannelGate(
                (mlp): Sequential(
                  (0): Flatten()
                  (1): Linear(in_features=32, out_features=2, bias=True)
                  (2): ReLU()
                  (3): Linear(in_features=2, out_features=32, bias=True)
                )
              )
              (SpatialGate): SpatialGate(
                (compress): ChannelPool()
                (spatial): BasicConv(
                  (conv): Conv2d(2, 1, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), bias=False)
                  (bn): BatchNorm2d(1, eps=1e-05, momentum=0.01, affine=True, track_running_stats=True)
                )
              )
            )
            (7): eca(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv): Conv1d(1, 1, kernel_size=(3,), stride=(1,), padding=(1,), bias=False)
              (sigmoid): Sigmoid()
            )
          )
          (attention): AttentionModule(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (fc): Sequential(
              (0): Linear(in_features=256, out_features=32, bias=False)
              (1): ReLU(inplace=True)
              (2): Linear(in_features=32, out_features=256, bias=False)
              (3): Sigmoid()
            )
          )
        )
        (6): MixedOp(
          (_ops): ModuleList(
            (0): SepConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
                (2): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
                (4): ReLU()
                (5): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
                (6): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (7): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
            (1): DilConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=32, bias=False)
                (2): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
            (2): Identity()
            (3): Sequential(
              (0): AvgPool2d(kernel_size=3, stride=1, padding=1)
              (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
            )
            (4): Sequential(
              (0): MaxPool2d(kernel_size=3, stride=1, padding=1, dilation=1, ceil_mode=False)
              (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
            )
            (5): Zero()
            (6): CBAM(
              (ChannelGate): ChannelGate(
                (mlp): Sequential(
                  (0): Flatten()
                  (1): Linear(in_features=32, out_features=2, bias=True)
                  (2): ReLU()
                  (3): Linear(in_features=2, out_features=32, bias=True)
                )
              )
              (SpatialGate): SpatialGate(
                (compress): ChannelPool()
                (spatial): BasicConv(
                  (conv): Conv2d(2, 1, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), bias=False)
                  (bn): BatchNorm2d(1, eps=1e-05, momentum=0.01, affine=True, track_running_stats=True)
                )
              )
            )
            (7): eca(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv): Conv1d(1, 1, kernel_size=(3,), stride=(1,), padding=(1,), bias=False)
              (sigmoid): Sigmoid()
            )
          )
          (attention): AttentionModule(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (fc): Sequential(
              (0): Linear(in_features=256, out_features=32, bias=False)
              (1): ReLU(inplace=True)
              (2): Linear(in_features=32, out_features=256, bias=False)
              (3): Sigmoid()
            )
          )
        )
        (7): MixedOp(
          (_ops): ModuleList(
            (0): SepConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
                (2): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
                (4): ReLU()
                (5): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
                (6): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (7): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
            (1): DilConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=32, bias=False)
                (2): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
            (2): Identity()
            (3): Sequential(
              (0): AvgPool2d(kernel_size=3, stride=1, padding=1)
              (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
            )
            (4): Sequential(
              (0): MaxPool2d(kernel_size=3, stride=1, padding=1, dilation=1, ceil_mode=False)
              (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
            )
            (5): Zero()
            (6): CBAM(
              (ChannelGate): ChannelGate(
                (mlp): Sequential(
                  (0): Flatten()
                  (1): Linear(in_features=32, out_features=2, bias=True)
                  (2): ReLU()
                  (3): Linear(in_features=2, out_features=32, bias=True)
                )
              )
              (SpatialGate): SpatialGate(
                (compress): ChannelPool()
                (spatial): BasicConv(
                  (conv): Conv2d(2, 1, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), bias=False)
                  (bn): BatchNorm2d(1, eps=1e-05, momentum=0.01, affine=True, track_running_stats=True)
                )
              )
            )
            (7): eca(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv): Conv1d(1, 1, kernel_size=(3,), stride=(1,), padding=(1,), bias=False)
              (sigmoid): Sigmoid()
            )
          )
          (attention): AttentionModule(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (fc): Sequential(
              (0): Linear(in_features=256, out_features=32, bias=False)
              (1): ReLU(inplace=True)
              (2): Linear(in_features=32, out_features=256, bias=False)
              (3): Sigmoid()
            )
          )
        )
        (8): MixedOp(
          (_ops): ModuleList(
            (0): SepConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
                (2): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
                (4): ReLU()
                (5): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
                (6): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (7): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
            (1): DilConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=32, bias=False)
                (2): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
            (2): Identity()
            (3): Sequential(
              (0): AvgPool2d(kernel_size=3, stride=1, padding=1)
              (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
            )
            (4): Sequential(
              (0): MaxPool2d(kernel_size=3, stride=1, padding=1, dilation=1, ceil_mode=False)
              (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
            )
            (5): Zero()
            (6): CBAM(
              (ChannelGate): ChannelGate(
                (mlp): Sequential(
                  (0): Flatten()
                  (1): Linear(in_features=32, out_features=2, bias=True)
                  (2): ReLU()
                  (3): Linear(in_features=2, out_features=32, bias=True)
                )
              )
              (SpatialGate): SpatialGate(
                (compress): ChannelPool()
                (spatial): BasicConv(
                  (conv): Conv2d(2, 1, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), bias=False)
                  (bn): BatchNorm2d(1, eps=1e-05, momentum=0.01, affine=True, track_running_stats=True)
                )
              )
            )
            (7): eca(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv): Conv1d(1, 1, kernel_size=(3,), stride=(1,), padding=(1,), bias=False)
              (sigmoid): Sigmoid()
            )
          )
          (attention): AttentionModule(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (fc): Sequential(
              (0): Linear(in_features=256, out_features=32, bias=False)
              (1): ReLU(inplace=True)
              (2): Linear(in_features=32, out_features=256, bias=False)
              (3): Sigmoid()
            )
          )
        )
        (9): MixedOp(
          (_ops): ModuleList(
            (0): SepConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
                (2): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
                (4): ReLU()
                (5): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
                (6): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (7): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
            (1): DilConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=32, bias=False)
                (2): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
            (2): Identity()
            (3): Sequential(
              (0): AvgPool2d(kernel_size=3, stride=1, padding=1)
              (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
            )
            (4): Sequential(
              (0): MaxPool2d(kernel_size=3, stride=1, padding=1, dilation=1, ceil_mode=False)
              (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
            )
            (5): Zero()
            (6): CBAM(
              (ChannelGate): ChannelGate(
                (mlp): Sequential(
                  (0): Flatten()
                  (1): Linear(in_features=32, out_features=2, bias=True)
                  (2): ReLU()
                  (3): Linear(in_features=2, out_features=32, bias=True)
                )
              )
              (SpatialGate): SpatialGate(
                (compress): ChannelPool()
                (spatial): BasicConv(
                  (conv): Conv2d(2, 1, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), bias=False)
                  (bn): BatchNorm2d(1, eps=1e-05, momentum=0.01, affine=True, track_running_stats=True)
                )
              )
            )
            (7): eca(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv): Conv1d(1, 1, kernel_size=(3,), stride=(1,), padding=(1,), bias=False)
              (sigmoid): Sigmoid()
            )
          )
          (attention): AttentionModule(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (fc): Sequential(
              (0): Linear(in_features=256, out_features=32, bias=False)
              (1): ReLU(inplace=True)
              (2): Linear(in_features=32, out_features=256, bias=False)
              (3): Sigmoid()
            )
          )
        )
        (10): MixedOp(
          (_ops): ModuleList(
            (0): SepConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
                (2): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
                (4): ReLU()
                (5): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
                (6): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (7): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
            (1): DilConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=32, bias=False)
                (2): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
            (2): Identity()
            (3): Sequential(
              (0): AvgPool2d(kernel_size=3, stride=1, padding=1)
              (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
            )
            (4): Sequential(
              (0): MaxPool2d(kernel_size=3, stride=1, padding=1, dilation=1, ceil_mode=False)
              (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
            )
            (5): Zero()
            (6): CBAM(
              (ChannelGate): ChannelGate(
                (mlp): Sequential(
                  (0): Flatten()
                  (1): Linear(in_features=32, out_features=2, bias=True)
                  (2): ReLU()
                  (3): Linear(in_features=2, out_features=32, bias=True)
                )
              )
              (SpatialGate): SpatialGate(
                (compress): ChannelPool()
                (spatial): BasicConv(
                  (conv): Conv2d(2, 1, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), bias=False)
                  (bn): BatchNorm2d(1, eps=1e-05, momentum=0.01, affine=True, track_running_stats=True)
                )
              )
            )
            (7): eca(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv): Conv1d(1, 1, kernel_size=(3,), stride=(1,), padding=(1,), bias=False)
              (sigmoid): Sigmoid()
            )
          )
          (attention): AttentionModule(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (fc): Sequential(
              (0): Linear(in_features=256, out_features=32, bias=False)
              (1): ReLU(inplace=True)
              (2): Linear(in_features=32, out_features=256, bias=False)
              (3): Sigmoid()
            )
          )
        )
        (11): MixedOp(
          (_ops): ModuleList(
            (0): SepConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
                (2): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
                (4): ReLU()
                (5): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
                (6): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (7): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
            (1): DilConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=32, bias=False)
                (2): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
            (2): Identity()
            (3): Sequential(
              (0): AvgPool2d(kernel_size=3, stride=1, padding=1)
              (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
            )
            (4): Sequential(
              (0): MaxPool2d(kernel_size=3, stride=1, padding=1, dilation=1, ceil_mode=False)
              (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
            )
            (5): Zero()
            (6): CBAM(
              (ChannelGate): ChannelGate(
                (mlp): Sequential(
                  (0): Flatten()
                  (1): Linear(in_features=32, out_features=2, bias=True)
                  (2): ReLU()
                  (3): Linear(in_features=2, out_features=32, bias=True)
                )
              )
              (SpatialGate): SpatialGate(
                (compress): ChannelPool()
                (spatial): BasicConv(
                  (conv): Conv2d(2, 1, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), bias=False)
                  (bn): BatchNorm2d(1, eps=1e-05, momentum=0.01, affine=True, track_running_stats=True)
                )
              )
            )
            (7): eca(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv): Conv1d(1, 1, kernel_size=(3,), stride=(1,), padding=(1,), bias=False)
              (sigmoid): Sigmoid()
            )
          )
          (attention): AttentionModule(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (fc): Sequential(
              (0): Linear(in_features=256, out_features=32, bias=False)
              (1): ReLU(inplace=True)
              (2): Linear(in_features=32, out_features=256, bias=False)
              (3): Sigmoid()
            )
          )
        )
        (12): MixedOp(
          (_ops): ModuleList(
            (0): SepConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
                (2): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
                (4): ReLU()
                (5): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
                (6): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (7): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
            (1): DilConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=32, bias=False)
                (2): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
            (2): Identity()
            (3): Sequential(
              (0): AvgPool2d(kernel_size=3, stride=1, padding=1)
              (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
            )
            (4): Sequential(
              (0): MaxPool2d(kernel_size=3, stride=1, padding=1, dilation=1, ceil_mode=False)
              (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
            )
            (5): Zero()
            (6): CBAM(
              (ChannelGate): ChannelGate(
                (mlp): Sequential(
                  (0): Flatten()
                  (1): Linear(in_features=32, out_features=2, bias=True)
                  (2): ReLU()
                  (3): Linear(in_features=2, out_features=32, bias=True)
                )
              )
              (SpatialGate): SpatialGate(
                (compress): ChannelPool()
                (spatial): BasicConv(
                  (conv): Conv2d(2, 1, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), bias=False)
                  (bn): BatchNorm2d(1, eps=1e-05, momentum=0.01, affine=True, track_running_stats=True)
                )
              )
            )
            (7): eca(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv): Conv1d(1, 1, kernel_size=(3,), stride=(1,), padding=(1,), bias=False)
              (sigmoid): Sigmoid()
            )
          )
          (attention): AttentionModule(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (fc): Sequential(
              (0): Linear(in_features=256, out_features=32, bias=False)
              (1): ReLU(inplace=True)
              (2): Linear(in_features=32, out_features=256, bias=False)
              (3): Sigmoid()
            )
          )
        )
        (13): MixedOp(
          (_ops): ModuleList(
            (0): SepConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
                (2): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
                (4): ReLU()
                (5): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
                (6): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (7): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
            (1): DilConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=32, bias=False)
                (2): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
            (2): Identity()
            (3): Sequential(
              (0): AvgPool2d(kernel_size=3, stride=1, padding=1)
              (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
            )
            (4): Sequential(
              (0): MaxPool2d(kernel_size=3, stride=1, padding=1, dilation=1, ceil_mode=False)
              (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
            )
            (5): Zero()
            (6): CBAM(
              (ChannelGate): ChannelGate(
                (mlp): Sequential(
                  (0): Flatten()
                  (1): Linear(in_features=32, out_features=2, bias=True)
                  (2): ReLU()
                  (3): Linear(in_features=2, out_features=32, bias=True)
                )
              )
              (SpatialGate): SpatialGate(
                (compress): ChannelPool()
                (spatial): BasicConv(
                  (conv): Conv2d(2, 1, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), bias=False)
                  (bn): BatchNorm2d(1, eps=1e-05, momentum=0.01, affine=True, track_running_stats=True)
                )
              )
            )
            (7): eca(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv): Conv1d(1, 1, kernel_size=(3,), stride=(1,), padding=(1,), bias=False)
              (sigmoid): Sigmoid()
            )
          )
          (attention): AttentionModule(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (fc): Sequential(
              (0): Linear(in_features=256, out_features=32, bias=False)
              (1): ReLU(inplace=True)
              (2): Linear(in_features=32, out_features=256, bias=False)
              (3): Sigmoid()
            )
          )
        )
      )
      (_bns): ModuleList()
    )
    (4): Cell(
      (preprocess0): ReLUConvBN(
        (op): Sequential(
          (0): ReLU()
          (1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
        )
      )
      (preprocess1): ReLUConvBN(
        (op): Sequential(
          (0): ReLU()
          (1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
        )
      )
      (_ops): ModuleList(
        (0): MixedOp(
          (_ops): ModuleList(
            (0): SepConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(64, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=64, bias=False)
                (2): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
                (4): ReLU()
                (5): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
                (6): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (7): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
            (1): DilConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(64, 64, kernel_size=(3, 3), stride=(2, 2), padding=(2, 2), dilation=(2, 2), groups=64, bias=False)
                (2): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
            (2): FactorizedReduce(
              (relu): ReLU()
              (conv_1): Conv2d(64, 32, kernel_size=(1, 1), stride=(2, 2), bias=False)
              (conv_2): Conv2d(64, 32, kernel_size=(1, 1), stride=(2, 2), bias=False)
              (bn): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
            )
            (3): Sequential(
              (0): AvgPool2d(kernel_size=3, stride=2, padding=1)
              (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
            )
            (4): Sequential(
              (0): MaxPool2d(kernel_size=3, stride=2, padding=1, dilation=1, ceil_mode=False)
              (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
            )
            (5): Zero()
            (6): CBAM(
              (ChannelGate): ChannelGate(
                (mlp): Sequential(
                  (0): Flatten()
                  (1): Linear(in_features=64, out_features=4, bias=True)
                  (2): ReLU()
                  (3): Linear(in_features=4, out_features=64, bias=True)
                )
              )
              (SpatialGate): SpatialGate(
                (compress): ChannelPool()
                (spatial): BasicConv(
                  (conv): Conv2d(2, 1, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), bias=False)
                  (bn): BatchNorm2d(1, eps=1e-05, momentum=0.01, affine=True, track_running_stats=True)
                )
              )
              (avg): AvgPool2d(kernel_size=3, stride=2, padding=1)
            )
            (7): eca(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv): Conv1d(1, 1, kernel_size=(3,), stride=(1,), padding=(1,), bias=False)
              (sigmoid): Sigmoid()
              (avg): AvgPool2d(kernel_size=3, stride=2, padding=1)
            )
          )
          (attention): AttentionModule(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (fc): Sequential(
              (0): Linear(in_features=512, out_features=64, bias=False)
              (1): ReLU(inplace=True)
              (2): Linear(in_features=64, out_features=512, bias=False)
              (3): Sigmoid()
            )
          )
        )
        (1): MixedOp(
          (_ops): ModuleList(
            (0): SepConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(64, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=64, bias=False)
                (2): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
                (4): ReLU()
                (5): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
                (6): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (7): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
            (1): DilConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(64, 64, kernel_size=(3, 3), stride=(2, 2), padding=(2, 2), dilation=(2, 2), groups=64, bias=False)
                (2): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
            (2): FactorizedReduce(
              (relu): ReLU()
              (conv_1): Conv2d(64, 32, kernel_size=(1, 1), stride=(2, 2), bias=False)
              (conv_2): Conv2d(64, 32, kernel_size=(1, 1), stride=(2, 2), bias=False)
              (bn): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
            )
            (3): Sequential(
              (0): AvgPool2d(kernel_size=3, stride=2, padding=1)
              (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
            )
            (4): Sequential(
              (0): MaxPool2d(kernel_size=3, stride=2, padding=1, dilation=1, ceil_mode=False)
              (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
            )
            (5): Zero()
            (6): CBAM(
              (ChannelGate): ChannelGate(
                (mlp): Sequential(
                  (0): Flatten()
                  (1): Linear(in_features=64, out_features=4, bias=True)
                  (2): ReLU()
                  (3): Linear(in_features=4, out_features=64, bias=True)
                )
              )
              (SpatialGate): SpatialGate(
                (compress): ChannelPool()
                (spatial): BasicConv(
                  (conv): Conv2d(2, 1, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), bias=False)
                  (bn): BatchNorm2d(1, eps=1e-05, momentum=0.01, affine=True, track_running_stats=True)
                )
              )
              (avg): AvgPool2d(kernel_size=3, stride=2, padding=1)
            )
            (7): eca(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv): Conv1d(1, 1, kernel_size=(3,), stride=(1,), padding=(1,), bias=False)
              (sigmoid): Sigmoid()
              (avg): AvgPool2d(kernel_size=3, stride=2, padding=1)
            )
          )
          (attention): AttentionModule(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (fc): Sequential(
              (0): Linear(in_features=512, out_features=64, bias=False)
              (1): ReLU(inplace=True)
              (2): Linear(in_features=64, out_features=512, bias=False)
              (3): Sigmoid()
            )
          )
        )
        (2): MixedOp(
          (_ops): ModuleList(
            (0): SepConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(64, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=64, bias=False)
                (2): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
                (4): ReLU()
                (5): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
                (6): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (7): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
            (1): DilConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(64, 64, kernel_size=(3, 3), stride=(2, 2), padding=(2, 2), dilation=(2, 2), groups=64, bias=False)
                (2): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
            (2): FactorizedReduce(
              (relu): ReLU()
              (conv_1): Conv2d(64, 32, kernel_size=(1, 1), stride=(2, 2), bias=False)
              (conv_2): Conv2d(64, 32, kernel_size=(1, 1), stride=(2, 2), bias=False)
              (bn): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
            )
            (3): Sequential(
              (0): AvgPool2d(kernel_size=3, stride=2, padding=1)
              (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
            )
            (4): Sequential(
              (0): MaxPool2d(kernel_size=3, stride=2, padding=1, dilation=1, ceil_mode=False)
              (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
            )
            (5): Zero()
            (6): CBAM(
              (ChannelGate): ChannelGate(
                (mlp): Sequential(
                  (0): Flatten()
                  (1): Linear(in_features=64, out_features=4, bias=True)
                  (2): ReLU()
                  (3): Linear(in_features=4, out_features=64, bias=True)
                )
              )
              (SpatialGate): SpatialGate(
                (compress): ChannelPool()
                (spatial): BasicConv(
                  (conv): Conv2d(2, 1, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), bias=False)
                  (bn): BatchNorm2d(1, eps=1e-05, momentum=0.01, affine=True, track_running_stats=True)
                )
              )
              (avg): AvgPool2d(kernel_size=3, stride=2, padding=1)
            )
            (7): eca(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv): Conv1d(1, 1, kernel_size=(3,), stride=(1,), padding=(1,), bias=False)
              (sigmoid): Sigmoid()
              (avg): AvgPool2d(kernel_size=3, stride=2, padding=1)
            )
          )
          (attention): AttentionModule(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (fc): Sequential(
              (0): Linear(in_features=512, out_features=64, bias=False)
              (1): ReLU(inplace=True)
              (2): Linear(in_features=64, out_features=512, bias=False)
              (3): Sigmoid()
            )
          )
        )
        (3): MixedOp(
          (_ops): ModuleList(
            (0): SepConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(64, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=64, bias=False)
                (2): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
                (4): ReLU()
                (5): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
                (6): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (7): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
            (1): DilConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(64, 64, kernel_size=(3, 3), stride=(2, 2), padding=(2, 2), dilation=(2, 2), groups=64, bias=False)
                (2): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
            (2): FactorizedReduce(
              (relu): ReLU()
              (conv_1): Conv2d(64, 32, kernel_size=(1, 1), stride=(2, 2), bias=False)
              (conv_2): Conv2d(64, 32, kernel_size=(1, 1), stride=(2, 2), bias=False)
              (bn): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
            )
            (3): Sequential(
              (0): AvgPool2d(kernel_size=3, stride=2, padding=1)
              (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
            )
            (4): Sequential(
              (0): MaxPool2d(kernel_size=3, stride=2, padding=1, dilation=1, ceil_mode=False)
              (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
            )
            (5): Zero()
            (6): CBAM(
              (ChannelGate): ChannelGate(
                (mlp): Sequential(
                  (0): Flatten()
                  (1): Linear(in_features=64, out_features=4, bias=True)
                  (2): ReLU()
                  (3): Linear(in_features=4, out_features=64, bias=True)
                )
              )
              (SpatialGate): SpatialGate(
                (compress): ChannelPool()
                (spatial): BasicConv(
                  (conv): Conv2d(2, 1, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), bias=False)
                  (bn): BatchNorm2d(1, eps=1e-05, momentum=0.01, affine=True, track_running_stats=True)
                )
              )
              (avg): AvgPool2d(kernel_size=3, stride=2, padding=1)
            )
            (7): eca(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv): Conv1d(1, 1, kernel_size=(3,), stride=(1,), padding=(1,), bias=False)
              (sigmoid): Sigmoid()
              (avg): AvgPool2d(kernel_size=3, stride=2, padding=1)
            )
          )
          (attention): AttentionModule(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (fc): Sequential(
              (0): Linear(in_features=512, out_features=64, bias=False)
              (1): ReLU(inplace=True)
              (2): Linear(in_features=64, out_features=512, bias=False)
              (3): Sigmoid()
            )
          )
        )
        (4): MixedOp(
          (_ops): ModuleList(
            (0): SepConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
                (2): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
                (4): ReLU()
                (5): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
                (6): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (7): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
            (1): DilConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=64, bias=False)
                (2): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
            (2): Identity()
            (3): Sequential(
              (0): AvgPool2d(kernel_size=3, stride=1, padding=1)
              (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
            )
            (4): Sequential(
              (0): MaxPool2d(kernel_size=3, stride=1, padding=1, dilation=1, ceil_mode=False)
              (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
            )
            (5): Zero()
            (6): CBAM(
              (ChannelGate): ChannelGate(
                (mlp): Sequential(
                  (0): Flatten()
                  (1): Linear(in_features=64, out_features=4, bias=True)
                  (2): ReLU()
                  (3): Linear(in_features=4, out_features=64, bias=True)
                )
              )
              (SpatialGate): SpatialGate(
                (compress): ChannelPool()
                (spatial): BasicConv(
                  (conv): Conv2d(2, 1, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), bias=False)
                  (bn): BatchNorm2d(1, eps=1e-05, momentum=0.01, affine=True, track_running_stats=True)
                )
              )
            )
            (7): eca(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv): Conv1d(1, 1, kernel_size=(3,), stride=(1,), padding=(1,), bias=False)
              (sigmoid): Sigmoid()
            )
          )
          (attention): AttentionModule(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (fc): Sequential(
              (0): Linear(in_features=512, out_features=64, bias=False)
              (1): ReLU(inplace=True)
              (2): Linear(in_features=64, out_features=512, bias=False)
              (3): Sigmoid()
            )
          )
        )
        (5): MixedOp(
          (_ops): ModuleList(
            (0): SepConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(64, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=64, bias=False)
                (2): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
                (4): ReLU()
                (5): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
                (6): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (7): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
            (1): DilConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(64, 64, kernel_size=(3, 3), stride=(2, 2), padding=(2, 2), dilation=(2, 2), groups=64, bias=False)
                (2): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
            (2): FactorizedReduce(
              (relu): ReLU()
              (conv_1): Conv2d(64, 32, kernel_size=(1, 1), stride=(2, 2), bias=False)
              (conv_2): Conv2d(64, 32, kernel_size=(1, 1), stride=(2, 2), bias=False)
              (bn): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
            )
            (3): Sequential(
              (0): AvgPool2d(kernel_size=3, stride=2, padding=1)
              (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
            )
            (4): Sequential(
              (0): MaxPool2d(kernel_size=3, stride=2, padding=1, dilation=1, ceil_mode=False)
              (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
            )
            (5): Zero()
            (6): CBAM(
              (ChannelGate): ChannelGate(
                (mlp): Sequential(
                  (0): Flatten()
                  (1): Linear(in_features=64, out_features=4, bias=True)
                  (2): ReLU()
                  (3): Linear(in_features=4, out_features=64, bias=True)
                )
              )
              (SpatialGate): SpatialGate(
                (compress): ChannelPool()
                (spatial): BasicConv(
                  (conv): Conv2d(2, 1, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), bias=False)
                  (bn): BatchNorm2d(1, eps=1e-05, momentum=0.01, affine=True, track_running_stats=True)
                )
              )
              (avg): AvgPool2d(kernel_size=3, stride=2, padding=1)
            )
            (7): eca(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv): Conv1d(1, 1, kernel_size=(3,), stride=(1,), padding=(1,), bias=False)
              (sigmoid): Sigmoid()
              (avg): AvgPool2d(kernel_size=3, stride=2, padding=1)
            )
          )
          (attention): AttentionModule(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (fc): Sequential(
              (0): Linear(in_features=512, out_features=64, bias=False)
              (1): ReLU(inplace=True)
              (2): Linear(in_features=64, out_features=512, bias=False)
              (3): Sigmoid()
            )
          )
        )
        (6): MixedOp(
          (_ops): ModuleList(
            (0): SepConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(64, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=64, bias=False)
                (2): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
                (4): ReLU()
                (5): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
                (6): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (7): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
            (1): DilConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(64, 64, kernel_size=(3, 3), stride=(2, 2), padding=(2, 2), dilation=(2, 2), groups=64, bias=False)
                (2): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
            (2): FactorizedReduce(
              (relu): ReLU()
              (conv_1): Conv2d(64, 32, kernel_size=(1, 1), stride=(2, 2), bias=False)
              (conv_2): Conv2d(64, 32, kernel_size=(1, 1), stride=(2, 2), bias=False)
              (bn): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
            )
            (3): Sequential(
              (0): AvgPool2d(kernel_size=3, stride=2, padding=1)
              (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
            )
            (4): Sequential(
              (0): MaxPool2d(kernel_size=3, stride=2, padding=1, dilation=1, ceil_mode=False)
              (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
            )
            (5): Zero()
            (6): CBAM(
              (ChannelGate): ChannelGate(
                (mlp): Sequential(
                  (0): Flatten()
                  (1): Linear(in_features=64, out_features=4, bias=True)
                  (2): ReLU()
                  (3): Linear(in_features=4, out_features=64, bias=True)
                )
              )
              (SpatialGate): SpatialGate(
                (compress): ChannelPool()
                (spatial): BasicConv(
                  (conv): Conv2d(2, 1, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), bias=False)
                  (bn): BatchNorm2d(1, eps=1e-05, momentum=0.01, affine=True, track_running_stats=True)
                )
              )
              (avg): AvgPool2d(kernel_size=3, stride=2, padding=1)
            )
            (7): eca(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv): Conv1d(1, 1, kernel_size=(3,), stride=(1,), padding=(1,), bias=False)
              (sigmoid): Sigmoid()
              (avg): AvgPool2d(kernel_size=3, stride=2, padding=1)
            )
          )
          (attention): AttentionModule(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (fc): Sequential(
              (0): Linear(in_features=512, out_features=64, bias=False)
              (1): ReLU(inplace=True)
              (2): Linear(in_features=64, out_features=512, bias=False)
              (3): Sigmoid()
            )
          )
        )
        (7): MixedOp(
          (_ops): ModuleList(
            (0): SepConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
                (2): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
                (4): ReLU()
                (5): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
                (6): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (7): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
            (1): DilConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=64, bias=False)
                (2): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
            (2): Identity()
            (3): Sequential(
              (0): AvgPool2d(kernel_size=3, stride=1, padding=1)
              (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
            )
            (4): Sequential(
              (0): MaxPool2d(kernel_size=3, stride=1, padding=1, dilation=1, ceil_mode=False)
              (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
            )
            (5): Zero()
            (6): CBAM(
              (ChannelGate): ChannelGate(
                (mlp): Sequential(
                  (0): Flatten()
                  (1): Linear(in_features=64, out_features=4, bias=True)
                  (2): ReLU()
                  (3): Linear(in_features=4, out_features=64, bias=True)
                )
              )
              (SpatialGate): SpatialGate(
                (compress): ChannelPool()
                (spatial): BasicConv(
                  (conv): Conv2d(2, 1, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), bias=False)
                  (bn): BatchNorm2d(1, eps=1e-05, momentum=0.01, affine=True, track_running_stats=True)
                )
              )
            )
            (7): eca(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv): Conv1d(1, 1, kernel_size=(3,), stride=(1,), padding=(1,), bias=False)
              (sigmoid): Sigmoid()
            )
          )
          (attention): AttentionModule(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (fc): Sequential(
              (0): Linear(in_features=512, out_features=64, bias=False)
              (1): ReLU(inplace=True)
              (2): Linear(in_features=64, out_features=512, bias=False)
              (3): Sigmoid()
            )
          )
        )
        (8): MixedOp(
          (_ops): ModuleList(
            (0): SepConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
                (2): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
                (4): ReLU()
                (5): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
                (6): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (7): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
            (1): DilConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=64, bias=False)
                (2): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
            (2): Identity()
            (3): Sequential(
              (0): AvgPool2d(kernel_size=3, stride=1, padding=1)
              (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
            )
            (4): Sequential(
              (0): MaxPool2d(kernel_size=3, stride=1, padding=1, dilation=1, ceil_mode=False)
              (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
            )
            (5): Zero()
            (6): CBAM(
              (ChannelGate): ChannelGate(
                (mlp): Sequential(
                  (0): Flatten()
                  (1): Linear(in_features=64, out_features=4, bias=True)
                  (2): ReLU()
                  (3): Linear(in_features=4, out_features=64, bias=True)
                )
              )
              (SpatialGate): SpatialGate(
                (compress): ChannelPool()
                (spatial): BasicConv(
                  (conv): Conv2d(2, 1, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), bias=False)
                  (bn): BatchNorm2d(1, eps=1e-05, momentum=0.01, affine=True, track_running_stats=True)
                )
              )
            )
            (7): eca(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv): Conv1d(1, 1, kernel_size=(3,), stride=(1,), padding=(1,), bias=False)
              (sigmoid): Sigmoid()
            )
          )
          (attention): AttentionModule(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (fc): Sequential(
              (0): Linear(in_features=512, out_features=64, bias=False)
              (1): ReLU(inplace=True)
              (2): Linear(in_features=64, out_features=512, bias=False)
              (3): Sigmoid()
            )
          )
        )
        (9): MixedOp(
          (_ops): ModuleList(
            (0): SepConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(64, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=64, bias=False)
                (2): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
                (4): ReLU()
                (5): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
                (6): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (7): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
            (1): DilConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(64, 64, kernel_size=(3, 3), stride=(2, 2), padding=(2, 2), dilation=(2, 2), groups=64, bias=False)
                (2): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
            (2): FactorizedReduce(
              (relu): ReLU()
              (conv_1): Conv2d(64, 32, kernel_size=(1, 1), stride=(2, 2), bias=False)
              (conv_2): Conv2d(64, 32, kernel_size=(1, 1), stride=(2, 2), bias=False)
              (bn): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
            )
            (3): Sequential(
              (0): AvgPool2d(kernel_size=3, stride=2, padding=1)
              (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
            )
            (4): Sequential(
              (0): MaxPool2d(kernel_size=3, stride=2, padding=1, dilation=1, ceil_mode=False)
              (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
            )
            (5): Zero()
            (6): CBAM(
              (ChannelGate): ChannelGate(
                (mlp): Sequential(
                  (0): Flatten()
                  (1): Linear(in_features=64, out_features=4, bias=True)
                  (2): ReLU()
                  (3): Linear(in_features=4, out_features=64, bias=True)
                )
              )
              (SpatialGate): SpatialGate(
                (compress): ChannelPool()
                (spatial): BasicConv(
                  (conv): Conv2d(2, 1, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), bias=False)
                  (bn): BatchNorm2d(1, eps=1e-05, momentum=0.01, affine=True, track_running_stats=True)
                )
              )
              (avg): AvgPool2d(kernel_size=3, stride=2, padding=1)
            )
            (7): eca(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv): Conv1d(1, 1, kernel_size=(3,), stride=(1,), padding=(1,), bias=False)
              (sigmoid): Sigmoid()
              (avg): AvgPool2d(kernel_size=3, stride=2, padding=1)
            )
          )
          (attention): AttentionModule(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (fc): Sequential(
              (0): Linear(in_features=512, out_features=64, bias=False)
              (1): ReLU(inplace=True)
              (2): Linear(in_features=64, out_features=512, bias=False)
              (3): Sigmoid()
            )
          )
        )
        (10): MixedOp(
          (_ops): ModuleList(
            (0): SepConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(64, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=64, bias=False)
                (2): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
                (4): ReLU()
                (5): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
                (6): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (7): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
            (1): DilConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(64, 64, kernel_size=(3, 3), stride=(2, 2), padding=(2, 2), dilation=(2, 2), groups=64, bias=False)
                (2): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
            (2): FactorizedReduce(
              (relu): ReLU()
              (conv_1): Conv2d(64, 32, kernel_size=(1, 1), stride=(2, 2), bias=False)
              (conv_2): Conv2d(64, 32, kernel_size=(1, 1), stride=(2, 2), bias=False)
              (bn): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
            )
            (3): Sequential(
              (0): AvgPool2d(kernel_size=3, stride=2, padding=1)
              (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
            )
            (4): Sequential(
              (0): MaxPool2d(kernel_size=3, stride=2, padding=1, dilation=1, ceil_mode=False)
              (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
            )
            (5): Zero()
            (6): CBAM(
              (ChannelGate): ChannelGate(
                (mlp): Sequential(
                  (0): Flatten()
                  (1): Linear(in_features=64, out_features=4, bias=True)
                  (2): ReLU()
                  (3): Linear(in_features=4, out_features=64, bias=True)
                )
              )
              (SpatialGate): SpatialGate(
                (compress): ChannelPool()
                (spatial): BasicConv(
                  (conv): Conv2d(2, 1, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), bias=False)
                  (bn): BatchNorm2d(1, eps=1e-05, momentum=0.01, affine=True, track_running_stats=True)
                )
              )
              (avg): AvgPool2d(kernel_size=3, stride=2, padding=1)
            )
            (7): eca(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv): Conv1d(1, 1, kernel_size=(3,), stride=(1,), padding=(1,), bias=False)
              (sigmoid): Sigmoid()
              (avg): AvgPool2d(kernel_size=3, stride=2, padding=1)
            )
          )
          (attention): AttentionModule(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (fc): Sequential(
              (0): Linear(in_features=512, out_features=64, bias=False)
              (1): ReLU(inplace=True)
              (2): Linear(in_features=64, out_features=512, bias=False)
              (3): Sigmoid()
            )
          )
        )
        (11): MixedOp(
          (_ops): ModuleList(
            (0): SepConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
                (2): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
                (4): ReLU()
                (5): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
                (6): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (7): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
            (1): DilConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=64, bias=False)
                (2): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
            (2): Identity()
            (3): Sequential(
              (0): AvgPool2d(kernel_size=3, stride=1, padding=1)
              (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
            )
            (4): Sequential(
              (0): MaxPool2d(kernel_size=3, stride=1, padding=1, dilation=1, ceil_mode=False)
              (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
            )
            (5): Zero()
            (6): CBAM(
              (ChannelGate): ChannelGate(
                (mlp): Sequential(
                  (0): Flatten()
                  (1): Linear(in_features=64, out_features=4, bias=True)
                  (2): ReLU()
                  (3): Linear(in_features=4, out_features=64, bias=True)
                )
              )
              (SpatialGate): SpatialGate(
                (compress): ChannelPool()
                (spatial): BasicConv(
                  (conv): Conv2d(2, 1, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), bias=False)
                  (bn): BatchNorm2d(1, eps=1e-05, momentum=0.01, affine=True, track_running_stats=True)
                )
              )
            )
            (7): eca(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv): Conv1d(1, 1, kernel_size=(3,), stride=(1,), padding=(1,), bias=False)
              (sigmoid): Sigmoid()
            )
          )
          (attention): AttentionModule(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (fc): Sequential(
              (0): Linear(in_features=512, out_features=64, bias=False)
              (1): ReLU(inplace=True)
              (2): Linear(in_features=64, out_features=512, bias=False)
              (3): Sigmoid()
            )
          )
        )
        (12): MixedOp(
          (_ops): ModuleList(
            (0): SepConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
                (2): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
                (4): ReLU()
                (5): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
                (6): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (7): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
            (1): DilConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=64, bias=False)
                (2): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
            (2): Identity()
            (3): Sequential(
              (0): AvgPool2d(kernel_size=3, stride=1, padding=1)
              (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
            )
            (4): Sequential(
              (0): MaxPool2d(kernel_size=3, stride=1, padding=1, dilation=1, ceil_mode=False)
              (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
            )
            (5): Zero()
            (6): CBAM(
              (ChannelGate): ChannelGate(
                (mlp): Sequential(
                  (0): Flatten()
                  (1): Linear(in_features=64, out_features=4, bias=True)
                  (2): ReLU()
                  (3): Linear(in_features=4, out_features=64, bias=True)
                )
              )
              (SpatialGate): SpatialGate(
                (compress): ChannelPool()
                (spatial): BasicConv(
                  (conv): Conv2d(2, 1, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), bias=False)
                  (bn): BatchNorm2d(1, eps=1e-05, momentum=0.01, affine=True, track_running_stats=True)
                )
              )
            )
            (7): eca(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv): Conv1d(1, 1, kernel_size=(3,), stride=(1,), padding=(1,), bias=False)
              (sigmoid): Sigmoid()
            )
          )
          (attention): AttentionModule(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (fc): Sequential(
              (0): Linear(in_features=512, out_features=64, bias=False)
              (1): ReLU(inplace=True)
              (2): Linear(in_features=64, out_features=512, bias=False)
              (3): Sigmoid()
            )
          )
        )
        (13): MixedOp(
          (_ops): ModuleList(
            (0): SepConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
                (2): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
                (4): ReLU()
                (5): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
                (6): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (7): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
            (1): DilConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=64, bias=False)
                (2): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
            (2): Identity()
            (3): Sequential(
              (0): AvgPool2d(kernel_size=3, stride=1, padding=1)
              (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
            )
            (4): Sequential(
              (0): MaxPool2d(kernel_size=3, stride=1, padding=1, dilation=1, ceil_mode=False)
              (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
            )
            (5): Zero()
            (6): CBAM(
              (ChannelGate): ChannelGate(
                (mlp): Sequential(
                  (0): Flatten()
                  (1): Linear(in_features=64, out_features=4, bias=True)
                  (2): ReLU()
                  (3): Linear(in_features=4, out_features=64, bias=True)
                )
              )
              (SpatialGate): SpatialGate(
                (compress): ChannelPool()
                (spatial): BasicConv(
                  (conv): Conv2d(2, 1, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), bias=False)
                  (bn): BatchNorm2d(1, eps=1e-05, momentum=0.01, affine=True, track_running_stats=True)
                )
              )
            )
            (7): eca(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv): Conv1d(1, 1, kernel_size=(3,), stride=(1,), padding=(1,), bias=False)
              (sigmoid): Sigmoid()
            )
          )
          (attention): AttentionModule(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (fc): Sequential(
              (0): Linear(in_features=512, out_features=64, bias=False)
              (1): ReLU(inplace=True)
              (2): Linear(in_features=64, out_features=512, bias=False)
              (3): Sigmoid()
            )
          )
        )
      )
      (_bns): ModuleList()
    )
    (5): Cell(
      (preprocess0): FactorizedReduce(
        (relu): ReLU()
        (conv_1): Conv2d(128, 32, kernel_size=(1, 1), stride=(2, 2), bias=False)
        (conv_2): Conv2d(128, 32, kernel_size=(1, 1), stride=(2, 2), bias=False)
        (bn): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
      )
      (preprocess1): ReLUConvBN(
        (op): Sequential(
          (0): ReLU()
          (1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
        )
      )
      (_ops): ModuleList(
        (0): MixedOp(
          (_ops): ModuleList(
            (0): SepConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
                (2): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
                (4): ReLU()
                (5): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
                (6): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (7): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
            (1): DilConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=64, bias=False)
                (2): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
            (2): Identity()
            (3): Sequential(
              (0): AvgPool2d(kernel_size=3, stride=1, padding=1)
              (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
            )
            (4): Sequential(
              (0): MaxPool2d(kernel_size=3, stride=1, padding=1, dilation=1, ceil_mode=False)
              (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
            )
            (5): Zero()
            (6): CBAM(
              (ChannelGate): ChannelGate(
                (mlp): Sequential(
                  (0): Flatten()
                  (1): Linear(in_features=64, out_features=4, bias=True)
                  (2): ReLU()
                  (3): Linear(in_features=4, out_features=64, bias=True)
                )
              )
              (SpatialGate): SpatialGate(
                (compress): ChannelPool()
                (spatial): BasicConv(
                  (conv): Conv2d(2, 1, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), bias=False)
                  (bn): BatchNorm2d(1, eps=1e-05, momentum=0.01, affine=True, track_running_stats=True)
                )
              )
            )
            (7): eca(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv): Conv1d(1, 1, kernel_size=(3,), stride=(1,), padding=(1,), bias=False)
              (sigmoid): Sigmoid()
            )
          )
          (attention): AttentionModule(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (fc): Sequential(
              (0): Linear(in_features=512, out_features=64, bias=False)
              (1): ReLU(inplace=True)
              (2): Linear(in_features=64, out_features=512, bias=False)
              (3): Sigmoid()
            )
          )
        )
        (1): MixedOp(
          (_ops): ModuleList(
            (0): SepConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
                (2): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
                (4): ReLU()
                (5): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
                (6): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (7): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
            (1): DilConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=64, bias=False)
                (2): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
            (2): Identity()
            (3): Sequential(
              (0): AvgPool2d(kernel_size=3, stride=1, padding=1)
              (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
            )
            (4): Sequential(
              (0): MaxPool2d(kernel_size=3, stride=1, padding=1, dilation=1, ceil_mode=False)
              (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
            )
            (5): Zero()
            (6): CBAM(
              (ChannelGate): ChannelGate(
                (mlp): Sequential(
                  (0): Flatten()
                  (1): Linear(in_features=64, out_features=4, bias=True)
                  (2): ReLU()
                  (3): Linear(in_features=4, out_features=64, bias=True)
                )
              )
              (SpatialGate): SpatialGate(
                (compress): ChannelPool()
                (spatial): BasicConv(
                  (conv): Conv2d(2, 1, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), bias=False)
                  (bn): BatchNorm2d(1, eps=1e-05, momentum=0.01, affine=True, track_running_stats=True)
                )
              )
            )
            (7): eca(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv): Conv1d(1, 1, kernel_size=(3,), stride=(1,), padding=(1,), bias=False)
              (sigmoid): Sigmoid()
            )
          )
          (attention): AttentionModule(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (fc): Sequential(
              (0): Linear(in_features=512, out_features=64, bias=False)
              (1): ReLU(inplace=True)
              (2): Linear(in_features=64, out_features=512, bias=False)
              (3): Sigmoid()
            )
          )
        )
        (2): MixedOp(
          (_ops): ModuleList(
            (0): SepConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
                (2): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
                (4): ReLU()
                (5): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
                (6): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (7): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
            (1): DilConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=64, bias=False)
                (2): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
            (2): Identity()
            (3): Sequential(
              (0): AvgPool2d(kernel_size=3, stride=1, padding=1)
              (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
            )
            (4): Sequential(
              (0): MaxPool2d(kernel_size=3, stride=1, padding=1, dilation=1, ceil_mode=False)
              (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
            )
            (5): Zero()
            (6): CBAM(
              (ChannelGate): ChannelGate(
                (mlp): Sequential(
                  (0): Flatten()
                  (1): Linear(in_features=64, out_features=4, bias=True)
                  (2): ReLU()
                  (3): Linear(in_features=4, out_features=64, bias=True)
                )
              )
              (SpatialGate): SpatialGate(
                (compress): ChannelPool()
                (spatial): BasicConv(
                  (conv): Conv2d(2, 1, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), bias=False)
                  (bn): BatchNorm2d(1, eps=1e-05, momentum=0.01, affine=True, track_running_stats=True)
                )
              )
            )
            (7): eca(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv): Conv1d(1, 1, kernel_size=(3,), stride=(1,), padding=(1,), bias=False)
              (sigmoid): Sigmoid()
            )
          )
          (attention): AttentionModule(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (fc): Sequential(
              (0): Linear(in_features=512, out_features=64, bias=False)
              (1): ReLU(inplace=True)
              (2): Linear(in_features=64, out_features=512, bias=False)
              (3): Sigmoid()
            )
          )
        )
        (3): MixedOp(
          (_ops): ModuleList(
            (0): SepConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
                (2): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
                (4): ReLU()
                (5): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
                (6): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (7): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
            (1): DilConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=64, bias=False)
                (2): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
            (2): Identity()
            (3): Sequential(
              (0): AvgPool2d(kernel_size=3, stride=1, padding=1)
              (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
            )
            (4): Sequential(
              (0): MaxPool2d(kernel_size=3, stride=1, padding=1, dilation=1, ceil_mode=False)
              (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
            )
            (5): Zero()
            (6): CBAM(
              (ChannelGate): ChannelGate(
                (mlp): Sequential(
                  (0): Flatten()
                  (1): Linear(in_features=64, out_features=4, bias=True)
                  (2): ReLU()
                  (3): Linear(in_features=4, out_features=64, bias=True)
                )
              )
              (SpatialGate): SpatialGate(
                (compress): ChannelPool()
                (spatial): BasicConv(
                  (conv): Conv2d(2, 1, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), bias=False)
                  (bn): BatchNorm2d(1, eps=1e-05, momentum=0.01, affine=True, track_running_stats=True)
                )
              )
            )
            (7): eca(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv): Conv1d(1, 1, kernel_size=(3,), stride=(1,), padding=(1,), bias=False)
              (sigmoid): Sigmoid()
            )
          )
          (attention): AttentionModule(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (fc): Sequential(
              (0): Linear(in_features=512, out_features=64, bias=False)
              (1): ReLU(inplace=True)
              (2): Linear(in_features=64, out_features=512, bias=False)
              (3): Sigmoid()
            )
          )
        )
        (4): MixedOp(
          (_ops): ModuleList(
            (0): SepConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
                (2): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
                (4): ReLU()
                (5): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
                (6): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (7): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
            (1): DilConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=64, bias=False)
                (2): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
            (2): Identity()
            (3): Sequential(
              (0): AvgPool2d(kernel_size=3, stride=1, padding=1)
              (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
            )
            (4): Sequential(
              (0): MaxPool2d(kernel_size=3, stride=1, padding=1, dilation=1, ceil_mode=False)
              (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
            )
            (5): Zero()
            (6): CBAM(
              (ChannelGate): ChannelGate(
                (mlp): Sequential(
                  (0): Flatten()
                  (1): Linear(in_features=64, out_features=4, bias=True)
                  (2): ReLU()
                  (3): Linear(in_features=4, out_features=64, bias=True)
                )
              )
              (SpatialGate): SpatialGate(
                (compress): ChannelPool()
                (spatial): BasicConv(
                  (conv): Conv2d(2, 1, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), bias=False)
                  (bn): BatchNorm2d(1, eps=1e-05, momentum=0.01, affine=True, track_running_stats=True)
                )
              )
            )
            (7): eca(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv): Conv1d(1, 1, kernel_size=(3,), stride=(1,), padding=(1,), bias=False)
              (sigmoid): Sigmoid()
            )
          )
          (attention): AttentionModule(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (fc): Sequential(
              (0): Linear(in_features=512, out_features=64, bias=False)
              (1): ReLU(inplace=True)
              (2): Linear(in_features=64, out_features=512, bias=False)
              (3): Sigmoid()
            )
          )
        )
        (5): MixedOp(
          (_ops): ModuleList(
            (0): SepConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
                (2): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
                (4): ReLU()
                (5): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
                (6): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (7): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
            (1): DilConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=64, bias=False)
                (2): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
            (2): Identity()
            (3): Sequential(
              (0): AvgPool2d(kernel_size=3, stride=1, padding=1)
              (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
            )
            (4): Sequential(
              (0): MaxPool2d(kernel_size=3, stride=1, padding=1, dilation=1, ceil_mode=False)
              (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
            )
            (5): Zero()
            (6): CBAM(
              (ChannelGate): ChannelGate(
                (mlp): Sequential(
                  (0): Flatten()
                  (1): Linear(in_features=64, out_features=4, bias=True)
                  (2): ReLU()
                  (3): Linear(in_features=4, out_features=64, bias=True)
                )
              )
              (SpatialGate): SpatialGate(
                (compress): ChannelPool()
                (spatial): BasicConv(
                  (conv): Conv2d(2, 1, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), bias=False)
                  (bn): BatchNorm2d(1, eps=1e-05, momentum=0.01, affine=True, track_running_stats=True)
                )
              )
            )
            (7): eca(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv): Conv1d(1, 1, kernel_size=(3,), stride=(1,), padding=(1,), bias=False)
              (sigmoid): Sigmoid()
            )
          )
          (attention): AttentionModule(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (fc): Sequential(
              (0): Linear(in_features=512, out_features=64, bias=False)
              (1): ReLU(inplace=True)
              (2): Linear(in_features=64, out_features=512, bias=False)
              (3): Sigmoid()
            )
          )
        )
        (6): MixedOp(
          (_ops): ModuleList(
            (0): SepConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
                (2): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
                (4): ReLU()
                (5): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
                (6): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (7): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
            (1): DilConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=64, bias=False)
                (2): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
            (2): Identity()
            (3): Sequential(
              (0): AvgPool2d(kernel_size=3, stride=1, padding=1)
              (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
            )
            (4): Sequential(
              (0): MaxPool2d(kernel_size=3, stride=1, padding=1, dilation=1, ceil_mode=False)
              (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
            )
            (5): Zero()
            (6): CBAM(
              (ChannelGate): ChannelGate(
                (mlp): Sequential(
                  (0): Flatten()
                  (1): Linear(in_features=64, out_features=4, bias=True)
                  (2): ReLU()
                  (3): Linear(in_features=4, out_features=64, bias=True)
                )
              )
              (SpatialGate): SpatialGate(
                (compress): ChannelPool()
                (spatial): BasicConv(
                  (conv): Conv2d(2, 1, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), bias=False)
                  (bn): BatchNorm2d(1, eps=1e-05, momentum=0.01, affine=True, track_running_stats=True)
                )
              )
            )
            (7): eca(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv): Conv1d(1, 1, kernel_size=(3,), stride=(1,), padding=(1,), bias=False)
              (sigmoid): Sigmoid()
            )
          )
          (attention): AttentionModule(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (fc): Sequential(
              (0): Linear(in_features=512, out_features=64, bias=False)
              (1): ReLU(inplace=True)
              (2): Linear(in_features=64, out_features=512, bias=False)
              (3): Sigmoid()
            )
          )
        )
        (7): MixedOp(
          (_ops): ModuleList(
            (0): SepConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
                (2): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
                (4): ReLU()
                (5): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
                (6): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (7): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
            (1): DilConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=64, bias=False)
                (2): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
            (2): Identity()
            (3): Sequential(
              (0): AvgPool2d(kernel_size=3, stride=1, padding=1)
              (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
            )
            (4): Sequential(
              (0): MaxPool2d(kernel_size=3, stride=1, padding=1, dilation=1, ceil_mode=False)
              (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
            )
            (5): Zero()
            (6): CBAM(
              (ChannelGate): ChannelGate(
                (mlp): Sequential(
                  (0): Flatten()
                  (1): Linear(in_features=64, out_features=4, bias=True)
                  (2): ReLU()
                  (3): Linear(in_features=4, out_features=64, bias=True)
                )
              )
              (SpatialGate): SpatialGate(
                (compress): ChannelPool()
                (spatial): BasicConv(
                  (conv): Conv2d(2, 1, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), bias=False)
                  (bn): BatchNorm2d(1, eps=1e-05, momentum=0.01, affine=True, track_running_stats=True)
                )
              )
            )
            (7): eca(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv): Conv1d(1, 1, kernel_size=(3,), stride=(1,), padding=(1,), bias=False)
              (sigmoid): Sigmoid()
            )
          )
          (attention): AttentionModule(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (fc): Sequential(
              (0): Linear(in_features=512, out_features=64, bias=False)
              (1): ReLU(inplace=True)
              (2): Linear(in_features=64, out_features=512, bias=False)
              (3): Sigmoid()
            )
          )
        )
        (8): MixedOp(
          (_ops): ModuleList(
            (0): SepConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
                (2): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
                (4): ReLU()
                (5): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
                (6): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (7): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
            (1): DilConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=64, bias=False)
                (2): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
            (2): Identity()
            (3): Sequential(
              (0): AvgPool2d(kernel_size=3, stride=1, padding=1)
              (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
            )
            (4): Sequential(
              (0): MaxPool2d(kernel_size=3, stride=1, padding=1, dilation=1, ceil_mode=False)
              (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
            )
            (5): Zero()
            (6): CBAM(
              (ChannelGate): ChannelGate(
                (mlp): Sequential(
                  (0): Flatten()
                  (1): Linear(in_features=64, out_features=4, bias=True)
                  (2): ReLU()
                  (3): Linear(in_features=4, out_features=64, bias=True)
                )
              )
              (SpatialGate): SpatialGate(
                (compress): ChannelPool()
                (spatial): BasicConv(
                  (conv): Conv2d(2, 1, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), bias=False)
                  (bn): BatchNorm2d(1, eps=1e-05, momentum=0.01, affine=True, track_running_stats=True)
                )
              )
            )
            (7): eca(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv): Conv1d(1, 1, kernel_size=(3,), stride=(1,), padding=(1,), bias=False)
              (sigmoid): Sigmoid()
            )
          )
          (attention): AttentionModule(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (fc): Sequential(
              (0): Linear(in_features=512, out_features=64, bias=False)
              (1): ReLU(inplace=True)
              (2): Linear(in_features=64, out_features=512, bias=False)
              (3): Sigmoid()
            )
          )
        )
        (9): MixedOp(
          (_ops): ModuleList(
            (0): SepConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
                (2): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
                (4): ReLU()
                (5): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
                (6): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (7): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
            (1): DilConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=64, bias=False)
                (2): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
            (2): Identity()
            (3): Sequential(
              (0): AvgPool2d(kernel_size=3, stride=1, padding=1)
              (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
            )
            (4): Sequential(
              (0): MaxPool2d(kernel_size=3, stride=1, padding=1, dilation=1, ceil_mode=False)
              (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
            )
            (5): Zero()
            (6): CBAM(
              (ChannelGate): ChannelGate(
                (mlp): Sequential(
                  (0): Flatten()
                  (1): Linear(in_features=64, out_features=4, bias=True)
                  (2): ReLU()
                  (3): Linear(in_features=4, out_features=64, bias=True)
                )
              )
              (SpatialGate): SpatialGate(
                (compress): ChannelPool()
                (spatial): BasicConv(
                  (conv): Conv2d(2, 1, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), bias=False)
                  (bn): BatchNorm2d(1, eps=1e-05, momentum=0.01, affine=True, track_running_stats=True)
                )
              )
            )
            (7): eca(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv): Conv1d(1, 1, kernel_size=(3,), stride=(1,), padding=(1,), bias=False)
              (sigmoid): Sigmoid()
            )
          )
          (attention): AttentionModule(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (fc): Sequential(
              (0): Linear(in_features=512, out_features=64, bias=False)
              (1): ReLU(inplace=True)
              (2): Linear(in_features=64, out_features=512, bias=False)
              (3): Sigmoid()
            )
          )
        )
        (10): MixedOp(
          (_ops): ModuleList(
            (0): SepConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
                (2): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
                (4): ReLU()
                (5): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
                (6): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (7): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
            (1): DilConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=64, bias=False)
                (2): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
            (2): Identity()
            (3): Sequential(
              (0): AvgPool2d(kernel_size=3, stride=1, padding=1)
              (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
            )
            (4): Sequential(
              (0): MaxPool2d(kernel_size=3, stride=1, padding=1, dilation=1, ceil_mode=False)
              (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
            )
            (5): Zero()
            (6): CBAM(
              (ChannelGate): ChannelGate(
                (mlp): Sequential(
                  (0): Flatten()
                  (1): Linear(in_features=64, out_features=4, bias=True)
                  (2): ReLU()
                  (3): Linear(in_features=4, out_features=64, bias=True)
                )
              )
              (SpatialGate): SpatialGate(
                (compress): ChannelPool()
                (spatial): BasicConv(
                  (conv): Conv2d(2, 1, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), bias=False)
                  (bn): BatchNorm2d(1, eps=1e-05, momentum=0.01, affine=True, track_running_stats=True)
                )
              )
            )
            (7): eca(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv): Conv1d(1, 1, kernel_size=(3,), stride=(1,), padding=(1,), bias=False)
              (sigmoid): Sigmoid()
            )
          )
          (attention): AttentionModule(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (fc): Sequential(
              (0): Linear(in_features=512, out_features=64, bias=False)
              (1): ReLU(inplace=True)
              (2): Linear(in_features=64, out_features=512, bias=False)
              (3): Sigmoid()
            )
          )
        )
        (11): MixedOp(
          (_ops): ModuleList(
            (0): SepConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
                (2): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
                (4): ReLU()
                (5): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
                (6): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (7): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
            (1): DilConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=64, bias=False)
                (2): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
            (2): Identity()
            (3): Sequential(
              (0): AvgPool2d(kernel_size=3, stride=1, padding=1)
              (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
            )
            (4): Sequential(
              (0): MaxPool2d(kernel_size=3, stride=1, padding=1, dilation=1, ceil_mode=False)
              (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
            )
            (5): Zero()
            (6): CBAM(
              (ChannelGate): ChannelGate(
                (mlp): Sequential(
                  (0): Flatten()
                  (1): Linear(in_features=64, out_features=4, bias=True)
                  (2): ReLU()
                  (3): Linear(in_features=4, out_features=64, bias=True)
                )
              )
              (SpatialGate): SpatialGate(
                (compress): ChannelPool()
                (spatial): BasicConv(
                  (conv): Conv2d(2, 1, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), bias=False)
                  (bn): BatchNorm2d(1, eps=1e-05, momentum=0.01, affine=True, track_running_stats=True)
                )
              )
            )
            (7): eca(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv): Conv1d(1, 1, kernel_size=(3,), stride=(1,), padding=(1,), bias=False)
              (sigmoid): Sigmoid()
            )
          )
          (attention): AttentionModule(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (fc): Sequential(
              (0): Linear(in_features=512, out_features=64, bias=False)
              (1): ReLU(inplace=True)
              (2): Linear(in_features=64, out_features=512, bias=False)
              (3): Sigmoid()
            )
          )
        )
        (12): MixedOp(
          (_ops): ModuleList(
            (0): SepConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
                (2): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
                (4): ReLU()
                (5): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
                (6): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (7): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
            (1): DilConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=64, bias=False)
                (2): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
            (2): Identity()
            (3): Sequential(
              (0): AvgPool2d(kernel_size=3, stride=1, padding=1)
              (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
            )
            (4): Sequential(
              (0): MaxPool2d(kernel_size=3, stride=1, padding=1, dilation=1, ceil_mode=False)
              (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
            )
            (5): Zero()
            (6): CBAM(
              (ChannelGate): ChannelGate(
                (mlp): Sequential(
                  (0): Flatten()
                  (1): Linear(in_features=64, out_features=4, bias=True)
                  (2): ReLU()
                  (3): Linear(in_features=4, out_features=64, bias=True)
                )
              )
              (SpatialGate): SpatialGate(
                (compress): ChannelPool()
                (spatial): BasicConv(
                  (conv): Conv2d(2, 1, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), bias=False)
                  (bn): BatchNorm2d(1, eps=1e-05, momentum=0.01, affine=True, track_running_stats=True)
                )
              )
            )
            (7): eca(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv): Conv1d(1, 1, kernel_size=(3,), stride=(1,), padding=(1,), bias=False)
              (sigmoid): Sigmoid()
            )
          )
          (attention): AttentionModule(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (fc): Sequential(
              (0): Linear(in_features=512, out_features=64, bias=False)
              (1): ReLU(inplace=True)
              (2): Linear(in_features=64, out_features=512, bias=False)
              (3): Sigmoid()
            )
          )
        )
        (13): MixedOp(
          (_ops): ModuleList(
            (0): SepConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
                (2): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
                (4): ReLU()
                (5): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
                (6): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (7): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
            (1): DilConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=64, bias=False)
                (2): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
            (2): Identity()
            (3): Sequential(
              (0): AvgPool2d(kernel_size=3, stride=1, padding=1)
              (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
            )
            (4): Sequential(
              (0): MaxPool2d(kernel_size=3, stride=1, padding=1, dilation=1, ceil_mode=False)
              (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
            )
            (5): Zero()
            (6): CBAM(
              (ChannelGate): ChannelGate(
                (mlp): Sequential(
                  (0): Flatten()
                  (1): Linear(in_features=64, out_features=4, bias=True)
                  (2): ReLU()
                  (3): Linear(in_features=4, out_features=64, bias=True)
                )
              )
              (SpatialGate): SpatialGate(
                (compress): ChannelPool()
                (spatial): BasicConv(
                  (conv): Conv2d(2, 1, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), bias=False)
                  (bn): BatchNorm2d(1, eps=1e-05, momentum=0.01, affine=True, track_running_stats=True)
                )
              )
            )
            (7): eca(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv): Conv1d(1, 1, kernel_size=(3,), stride=(1,), padding=(1,), bias=False)
              (sigmoid): Sigmoid()
            )
          )
          (attention): AttentionModule(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (fc): Sequential(
              (0): Linear(in_features=512, out_features=64, bias=False)
              (1): ReLU(inplace=True)
              (2): Linear(in_features=64, out_features=512, bias=False)
              (3): Sigmoid()
            )
          )
        )
      )
      (_bns): ModuleList()
    )
  )
  (global_pooling): AdaptiveAvgPool2d(output_size=1)
  (classifier): Linear(in_features=256, out_features=3, bias=True)
)
2023-11-03 21:53:51,151 param size = 3.073155MB
2023-11-03 21:53:51,173 epoch 0 lr 2.481113e-02
2023-11-03 21:53:59,770 train 000 1.044342e+00 50.000000
2023-11-03 21:53:59,771 Cell_0 = Normal_Genotype(normal=[('skip_connect', 1), ('sep_conv_3x3', 0), ('skip_connect', 2), ('max_pool_3x3', 1), ('avg_pool_3x3', 3), ('cbam', 1), ('eca', 4), ('skip_connect', 3)], normal_concat=range(2, 6))
2023-11-03 21:53:59,771 Cell_1 = Normal_Genotype(normal=[('cbam', 0), ('max_pool_3x3', 1), ('sep_conv_3x3', 0), ('dil_conv_3x3', 1), ('cbam', 3), ('cbam', 0), ('avg_pool_3x3', 4), ('skip_connect', 3)], normal_concat=range(2, 6))
2023-11-03 21:53:59,771 Cell_2 = Reduce_Genotype(reduce=[('dil_conv_3x3', 0), ('cbam', 1), ('skip_connect', 0), ('dil_conv_3x3', 2), ('avg_pool_3x3', 2), ('cbam', 0), ('sep_conv_3x3', 4), ('cbam', 3)], reduce_concat=range(2, 6))
2023-11-03 21:53:59,771 Cell_3 = Normal_Genotype(normal=[('sep_conv_3x3', 1), ('avg_pool_3x3', 0), ('eca', 2), ('dil_conv_3x3', 0), ('skip_connect', 3), ('eca', 2), ('max_pool_3x3', 4), ('dil_conv_3x3', 2)], normal_concat=range(2, 6))
2023-11-03 21:53:59,772 Cell_4 = Normal_Genotype(normal=[('sep_conv_3x3', 1), ('skip_connect', 0), ('sep_conv_3x3', 1), ('dil_conv_3x3', 2), ('skip_connect', 3), ('max_pool_3x3', 2), ('eca', 4), ('sep_conv_3x3', 3)], normal_concat=range(2, 6))
2023-11-03 21:53:59,772 Cell_5 = Reduce_Genotype(reduce=[('avg_pool_3x3', 0), ('skip_connect', 1), ('sep_conv_3x3', 0), ('eca', 2), ('eca', 2), ('sep_conv_3x3', 1), ('dil_conv_3x3', 4), ('eca', 3)], reduce_concat=range(2, 6))
2023-11-03 21:58:10,868 train 050 1.284097e+00 54.901961
2023-11-03 21:58:10,870 Cell_0 = Normal_Genotype(normal=[('cbam', 0), ('dil_conv_3x3', 1), ('max_pool_3x3', 1), ('skip_connect', 2), ('avg_pool_3x3', 3), ('cbam', 1), ('avg_pool_3x3', 4), ('skip_connect', 3)], normal_concat=range(2, 6))
2023-11-03 21:58:10,870 Cell_1 = Normal_Genotype(normal=[('cbam', 0), ('max_pool_3x3', 1), ('eca', 2), ('sep_conv_3x3', 0), ('cbam', 3), ('cbam', 0), ('avg_pool_3x3', 4), ('skip_connect', 3)], normal_concat=range(2, 6))
2023-11-03 21:58:10,871 Cell_2 = Reduce_Genotype(reduce=[('dil_conv_3x3', 0), ('cbam', 1), ('max_pool_3x3', 2), ('skip_connect', 0), ('avg_pool_3x3', 3), ('eca', 0), ('sep_conv_3x3', 4), ('cbam', 3)], reduce_concat=range(2, 6))
2023-11-03 21:58:10,871 Cell_3 = Normal_Genotype(normal=[('sep_conv_3x3', 1), ('avg_pool_3x3', 0), ('eca', 2), ('skip_connect', 0), ('eca', 2), ('skip_connect', 3), ('max_pool_3x3', 4), ('avg_pool_3x3', 3)], normal_concat=range(2, 6))
2023-11-03 21:58:10,871 Cell_4 = Normal_Genotype(normal=[('skip_connect', 1), ('skip_connect', 0), ('dil_conv_3x3', 2), ('sep_conv_3x3', 1), ('avg_pool_3x3', 3), ('max_pool_3x3', 2), ('eca', 4), ('cbam', 3)], normal_concat=range(2, 6))
2023-11-03 21:58:10,871 Cell_5 = Reduce_Genotype(reduce=[('sep_conv_3x3', 1), ('avg_pool_3x3', 0), ('sep_conv_3x3', 0), ('avg_pool_3x3', 2), ('eca', 2), ('eca', 3), ('dil_conv_3x3', 4), ('eca', 3)], reduce_concat=range(2, 6))
2023-11-03 22:02:27,140 train 100 9.684392e-01 64.356436
2023-11-03 22:02:27,142 Cell_0 = Normal_Genotype(normal=[('cbam', 0), ('dil_conv_3x3', 1), ('max_pool_3x3', 1), ('max_pool_3x3', 2), ('avg_pool_3x3', 3), ('cbam', 1), ('avg_pool_3x3', 4), ('skip_connect', 3)], normal_concat=range(2, 6))
2023-11-03 22:02:27,142 Cell_1 = Normal_Genotype(normal=[('cbam', 0), ('max_pool_3x3', 1), ('max_pool_3x3', 2), ('sep_conv_3x3', 0), ('cbam', 3), ('cbam', 0), ('skip_connect', 3), ('avg_pool_3x3', 4)], normal_concat=range(2, 6))
2023-11-03 22:02:27,142 Cell_2 = Reduce_Genotype(reduce=[('dil_conv_3x3', 0), ('cbam', 1), ('max_pool_3x3', 2), ('skip_connect', 0), ('avg_pool_3x3', 3), ('eca', 0), ('sep_conv_3x3', 4), ('cbam', 3)], reduce_concat=range(2, 6))
2023-11-03 22:02:27,142 Cell_3 = Normal_Genotype(normal=[('sep_conv_3x3', 1), ('avg_pool_3x3', 0), ('eca', 2), ('skip_connect', 0), ('eca', 2), ('skip_connect', 3), ('max_pool_3x3', 4), ('avg_pool_3x3', 3)], normal_concat=range(2, 6))
2023-11-03 22:02:27,142 Cell_4 = Normal_Genotype(normal=[('skip_connect', 1), ('eca', 0), ('dil_conv_3x3', 2), ('sep_conv_3x3', 1), ('avg_pool_3x3', 3), ('max_pool_3x3', 2), ('eca', 4), ('max_pool_3x3', 2)], normal_concat=range(2, 6))
2023-11-03 22:02:27,142 Cell_5 = Reduce_Genotype(reduce=[('sep_conv_3x3', 1), ('avg_pool_3x3', 0), ('avg_pool_3x3', 2), ('sep_conv_3x3', 0), ('eca', 3), ('eca', 2), ('dil_conv_3x3', 4), ('eca', 3)], reduce_concat=range(2, 6))
2023-11-03 22:06:43,311 train 150 8.795819e-01 66.556291
2023-11-03 22:06:43,313 Cell_0 = Normal_Genotype(normal=[('cbam', 0), ('dil_conv_3x3', 1), ('max_pool_3x3', 1), ('skip_connect', 0), ('avg_pool_3x3', 3), ('cbam', 1), ('avg_pool_3x3', 4), ('skip_connect', 3)], normal_concat=range(2, 6))
2023-11-03 22:06:43,314 Cell_1 = Normal_Genotype(normal=[('cbam', 0), ('max_pool_3x3', 1), ('max_pool_3x3', 2), ('sep_conv_3x3', 0), ('cbam', 3), ('cbam', 0), ('skip_connect', 3), ('max_pool_3x3', 4)], normal_concat=range(2, 6))
2023-11-03 22:06:43,314 Cell_2 = Reduce_Genotype(reduce=[('dil_conv_3x3', 0), ('cbam', 1), ('max_pool_3x3', 2), ('skip_connect', 0), ('avg_pool_3x3', 3), ('eca', 0), ('sep_conv_3x3', 4), ('cbam', 3)], reduce_concat=range(2, 6))
2023-11-03 22:06:43,314 Cell_3 = Normal_Genotype(normal=[('sep_conv_3x3', 1), ('avg_pool_3x3', 0), ('eca', 2), ('cbam', 0), ('eca', 2), ('dil_conv_3x3', 3), ('max_pool_3x3', 4), ('sep_conv_3x3', 3)], normal_concat=range(2, 6))
2023-11-03 22:06:43,314 Cell_4 = Normal_Genotype(normal=[('skip_connect', 1), ('dil_conv_3x3', 0), ('dil_conv_3x3', 2), ('sep_conv_3x3', 1), ('avg_pool_3x3', 3), ('max_pool_3x3', 2), ('eca', 4), ('max_pool_3x3', 2)], normal_concat=range(2, 6))
2023-11-03 22:06:43,314 Cell_5 = Reduce_Genotype(reduce=[('avg_pool_3x3', 0), ('sep_conv_3x3', 1), ('avg_pool_3x3', 2), ('sep_conv_3x3', 0), ('eca', 3), ('eca', 2), ('dil_conv_3x3', 4), ('eca', 3)], reduce_concat=range(2, 6))
2023-11-03 22:10:51,777 train 200 8.317107e-01 67.412935
2023-11-03 22:10:51,779 Cell_0 = Normal_Genotype(normal=[('cbam', 0), ('dil_conv_3x3', 1), ('max_pool_3x3', 1), ('skip_connect', 0), ('avg_pool_3x3', 3), ('cbam', 1), ('avg_pool_3x3', 4), ('skip_connect', 3)], normal_concat=range(2, 6))
2023-11-03 22:10:51,779 Cell_1 = Normal_Genotype(normal=[('cbam', 0), ('max_pool_3x3', 1), ('max_pool_3x3', 2), ('sep_conv_3x3', 0), ('cbam', 3), ('cbam', 0), ('skip_connect', 3), ('sep_conv_3x3', 0)], normal_concat=range(2, 6))
2023-11-03 22:10:51,779 Cell_2 = Reduce_Genotype(reduce=[('dil_conv_3x3', 0), ('cbam', 1), ('max_pool_3x3', 2), ('skip_connect', 0), ('avg_pool_3x3', 3), ('eca', 0), ('sep_conv_3x3', 4), ('cbam', 3)], reduce_concat=range(2, 6))
2023-11-03 22:10:51,779 Cell_3 = Normal_Genotype(normal=[('sep_conv_3x3', 1), ('avg_pool_3x3', 0), ('eca', 2), ('cbam', 0), ('eca', 2), ('dil_conv_3x3', 3), ('max_pool_3x3', 4), ('sep_conv_3x3', 3)], normal_concat=range(2, 6))
2023-11-03 22:10:51,779 Cell_4 = Normal_Genotype(normal=[('skip_connect', 1), ('dil_conv_3x3', 0), ('dil_conv_3x3', 2), ('sep_conv_3x3', 1), ('avg_pool_3x3', 3), ('max_pool_3x3', 2), ('eca', 4), ('max_pool_3x3', 2)], normal_concat=range(2, 6))
2023-11-03 22:10:51,779 Cell_5 = Reduce_Genotype(reduce=[('avg_pool_3x3', 0), ('sep_conv_3x3', 1), ('avg_pool_3x3', 2), ('sep_conv_3x3', 0), ('eca', 3), ('eca', 2), ('dil_conv_3x3', 4), ('eca', 3)], reduce_concat=range(2, 6))
2023-11-03 22:15:08,695 train 250 8.035277e-01 68.127490
2023-11-03 22:15:08,697 Cell_0 = Normal_Genotype(normal=[('cbam', 0), ('dil_conv_3x3', 1), ('max_pool_3x3', 1), ('skip_connect', 0), ('avg_pool_3x3', 3), ('cbam', 1), ('avg_pool_3x3', 4), ('skip_connect', 3)], normal_concat=range(2, 6))
2023-11-03 22:15:08,697 Cell_1 = Normal_Genotype(normal=[('cbam', 0), ('max_pool_3x3', 1), ('max_pool_3x3', 2), ('sep_conv_3x3', 0), ('cbam', 3), ('cbam', 0), ('skip_connect', 3), ('sep_conv_3x3', 0)], normal_concat=range(2, 6))
2023-11-03 22:15:08,697 Cell_2 = Reduce_Genotype(reduce=[('dil_conv_3x3', 0), ('cbam', 1), ('max_pool_3x3', 2), ('skip_connect', 0), ('avg_pool_3x3', 3), ('eca', 0), ('sep_conv_3x3', 4), ('cbam', 3)], reduce_concat=range(2, 6))
2023-11-03 22:15:08,697 Cell_3 = Normal_Genotype(normal=[('sep_conv_3x3', 1), ('avg_pool_3x3', 0), ('eca', 2), ('cbam', 0), ('eca', 2), ('dil_conv_3x3', 3), ('max_pool_3x3', 4), ('sep_conv_3x3', 3)], normal_concat=range(2, 6))
2023-11-03 22:15:08,697 Cell_4 = Normal_Genotype(normal=[('skip_connect', 1), ('dil_conv_3x3', 0), ('dil_conv_3x3', 2), ('sep_conv_3x3', 1), ('avg_pool_3x3', 3), ('max_pool_3x3', 2), ('eca', 4), ('max_pool_3x3', 2)], normal_concat=range(2, 6))
2023-11-03 22:15:08,697 Cell_5 = Reduce_Genotype(reduce=[('avg_pool_3x3', 0), ('sep_conv_3x3', 1), ('avg_pool_3x3', 2), ('sep_conv_3x3', 0), ('eca', 3), ('eca', 2), ('dil_conv_3x3', 4), ('eca', 3)], reduce_concat=range(2, 6))
2023-11-03 22:19:22,600 train 300 7.749975e-01 69.102990
2023-11-03 22:19:22,602 Cell_0 = Normal_Genotype(normal=[('dil_conv_3x3', 1), ('cbam', 0), ('max_pool_3x3', 1), ('skip_connect', 0), ('avg_pool_3x3', 3), ('cbam', 1), ('avg_pool_3x3', 4), ('skip_connect', 3)], normal_concat=range(2, 6))
2023-11-03 22:19:22,603 Cell_1 = Normal_Genotype(normal=[('cbam', 0), ('max_pool_3x3', 1), ('max_pool_3x3', 2), ('sep_conv_3x3', 0), ('cbam', 3), ('cbam', 0), ('skip_connect', 3), ('sep_conv_3x3', 0)], normal_concat=range(2, 6))
2023-11-03 22:19:22,603 Cell_2 = Reduce_Genotype(reduce=[('dil_conv_3x3', 0), ('cbam', 1), ('max_pool_3x3', 2), ('skip_connect', 0), ('avg_pool_3x3', 3), ('eca', 0), ('sep_conv_3x3', 4), ('cbam', 3)], reduce_concat=range(2, 6))
2023-11-03 22:19:22,603 Cell_3 = Normal_Genotype(normal=[('sep_conv_3x3', 1), ('avg_pool_3x3', 0), ('eca', 2), ('cbam', 0), ('eca', 2), ('dil_conv_3x3', 3), ('max_pool_3x3', 4), ('sep_conv_3x3', 3)], normal_concat=range(2, 6))
2023-11-03 22:19:22,603 Cell_4 = Normal_Genotype(normal=[('skip_connect', 1), ('dil_conv_3x3', 0), ('sep_conv_3x3', 1), ('dil_conv_3x3', 2), ('avg_pool_3x3', 3), ('max_pool_3x3', 2), ('eca', 4), ('max_pool_3x3', 2)], normal_concat=range(2, 6))
2023-11-03 22:19:22,603 Cell_5 = Reduce_Genotype(reduce=[('avg_pool_3x3', 0), ('sep_conv_3x3', 1), ('avg_pool_3x3', 2), ('sep_conv_3x3', 0), ('eca', 3), ('eca', 2), ('dil_conv_3x3', 4), ('eca', 3)], reduce_concat=range(2, 6))
2023-11-03 22:23:36,381 train 350 7.573530e-01 69.230769
2023-11-03 22:23:36,383 Cell_0 = Normal_Genotype(normal=[('dil_conv_3x3', 1), ('cbam', 0), ('max_pool_3x3', 1), ('skip_connect', 0), ('avg_pool_3x3', 3), ('cbam', 1), ('avg_pool_3x3', 4), ('skip_connect', 3)], normal_concat=range(2, 6))
2023-11-03 22:23:36,383 Cell_1 = Normal_Genotype(normal=[('cbam', 0), ('max_pool_3x3', 1), ('max_pool_3x3', 2), ('sep_conv_3x3', 0), ('cbam', 3), ('cbam', 0), ('skip_connect', 3), ('sep_conv_3x3', 0)], normal_concat=range(2, 6))
2023-11-03 22:23:36,383 Cell_2 = Reduce_Genotype(reduce=[('dil_conv_3x3', 0), ('cbam', 1), ('max_pool_3x3', 2), ('skip_connect', 0), ('avg_pool_3x3', 3), ('eca', 0), ('sep_conv_3x3', 4), ('cbam', 3)], reduce_concat=range(2, 6))
2023-11-03 22:23:36,383 Cell_3 = Normal_Genotype(normal=[('sep_conv_3x3', 1), ('avg_pool_3x3', 0), ('eca', 2), ('cbam', 0), ('eca', 2), ('dil_conv_3x3', 3), ('max_pool_3x3', 4), ('sep_conv_3x3', 3)], normal_concat=range(2, 6))
2023-11-03 22:23:36,383 Cell_4 = Normal_Genotype(normal=[('skip_connect', 1), ('dil_conv_3x3', 0), ('sep_conv_3x3', 1), ('dil_conv_3x3', 2), ('avg_pool_3x3', 3), ('max_pool_3x3', 2), ('eca', 4), ('max_pool_3x3', 2)], normal_concat=range(2, 6))
2023-11-03 22:23:36,384 Cell_5 = Reduce_Genotype(reduce=[('avg_pool_3x3', 0), ('sep_conv_3x3', 1), ('avg_pool_3x3', 2), ('sep_conv_3x3', 0), ('eca', 3), ('eca', 2), ('dil_conv_3x3', 4), ('eca', 3)], reduce_concat=range(2, 6))
2023-11-03 22:27:47,702 train 400 7.342908e-01 69.950125
2023-11-03 22:27:47,704 Cell_0 = Normal_Genotype(normal=[('dil_conv_3x3', 1), ('cbam', 0), ('max_pool_3x3', 1), ('skip_connect', 0), ('avg_pool_3x3', 3), ('cbam', 1), ('avg_pool_3x3', 4), ('skip_connect', 3)], normal_concat=range(2, 6))
2023-11-03 22:27:47,704 Cell_1 = Normal_Genotype(normal=[('cbam', 0), ('max_pool_3x3', 1), ('max_pool_3x3', 2), ('sep_conv_3x3', 0), ('cbam', 3), ('cbam', 0), ('skip_connect', 3), ('sep_conv_3x3', 0)], normal_concat=range(2, 6))
2023-11-03 22:27:47,705 Cell_2 = Reduce_Genotype(reduce=[('dil_conv_3x3', 0), ('cbam', 1), ('max_pool_3x3', 2), ('skip_connect', 0), ('avg_pool_3x3', 3), ('eca', 0), ('sep_conv_3x3', 4), ('cbam', 3)], reduce_concat=range(2, 6))
2023-11-03 22:27:47,705 Cell_3 = Normal_Genotype(normal=[('sep_conv_3x3', 1), ('avg_pool_3x3', 0), ('eca', 2), ('cbam', 0), ('eca', 2), ('dil_conv_3x3', 3), ('max_pool_3x3', 4), ('sep_conv_3x3', 3)], normal_concat=range(2, 6))
2023-11-03 22:27:47,705 Cell_4 = Normal_Genotype(normal=[('skip_connect', 1), ('dil_conv_3x3', 0), ('sep_conv_3x3', 1), ('dil_conv_3x3', 2), ('avg_pool_3x3', 3), ('max_pool_3x3', 2), ('eca', 4), ('max_pool_3x3', 2)], normal_concat=range(2, 6))
2023-11-03 22:27:47,705 Cell_5 = Reduce_Genotype(reduce=[('avg_pool_3x3', 0), ('sep_conv_3x3', 1), ('avg_pool_3x3', 2), ('sep_conv_3x3', 0), ('eca', 3), ('eca', 2), ('dil_conv_3x3', 4), ('eca', 3)], reduce_concat=range(2, 6))
2023-11-03 22:32:04,379 train 450 7.200693e-01 70.620843
2023-11-03 22:32:04,381 Cell_0 = Normal_Genotype(normal=[('dil_conv_3x3', 1), ('cbam', 0), ('max_pool_3x3', 1), ('skip_connect', 0), ('avg_pool_3x3', 3), ('cbam', 1), ('avg_pool_3x3', 4), ('skip_connect', 3)], normal_concat=range(2, 6))
2023-11-03 22:32:04,382 Cell_1 = Normal_Genotype(normal=[('cbam', 0), ('max_pool_3x3', 1), ('eca', 2), ('sep_conv_3x3', 0), ('cbam', 3), ('cbam', 0), ('skip_connect', 3), ('sep_conv_3x3', 0)], normal_concat=range(2, 6))
2023-11-03 22:32:04,382 Cell_2 = Reduce_Genotype(reduce=[('dil_conv_3x3', 0), ('cbam', 1), ('max_pool_3x3', 2), ('skip_connect', 0), ('avg_pool_3x3', 3), ('eca', 0), ('sep_conv_3x3', 4), ('cbam', 3)], reduce_concat=range(2, 6))
2023-11-03 22:32:04,382 Cell_3 = Normal_Genotype(normal=[('sep_conv_3x3', 1), ('avg_pool_3x3', 0), ('eca', 2), ('cbam', 0), ('eca', 2), ('dil_conv_3x3', 3), ('max_pool_3x3', 4), ('sep_conv_3x3', 3)], normal_concat=range(2, 6))
2023-11-03 22:32:04,382 Cell_4 = Normal_Genotype(normal=[('skip_connect', 1), ('dil_conv_3x3', 0), ('sep_conv_3x3', 1), ('dil_conv_3x3', 2), ('avg_pool_3x3', 3), ('max_pool_3x3', 2), ('eca', 4), ('max_pool_3x3', 2)], normal_concat=range(2, 6))
2023-11-03 22:32:04,382 Cell_5 = Reduce_Genotype(reduce=[('avg_pool_3x3', 0), ('sep_conv_3x3', 1), ('avg_pool_3x3', 2), ('sep_conv_3x3', 0), ('eca', 3), ('eca', 2), ('dil_conv_3x3', 4), ('eca', 3)], reduce_concat=range(2, 6))
2023-11-03 22:36:25,634 train 500 7.055039e-01 71.357285
2023-11-03 22:36:25,637 Cell_0 = Normal_Genotype(normal=[('dil_conv_3x3', 1), ('cbam', 0), ('max_pool_3x3', 1), ('skip_connect', 0), ('avg_pool_3x3', 3), ('cbam', 1), ('avg_pool_3x3', 4), ('skip_connect', 3)], normal_concat=range(2, 6))
2023-11-03 22:36:25,637 Cell_1 = Normal_Genotype(normal=[('cbam', 0), ('max_pool_3x3', 1), ('eca', 2), ('sep_conv_3x3', 0), ('cbam', 3), ('cbam', 0), ('skip_connect', 3), ('sep_conv_3x3', 0)], normal_concat=range(2, 6))
2023-11-03 22:36:25,637 Cell_2 = Reduce_Genotype(reduce=[('dil_conv_3x3', 0), ('cbam', 1), ('max_pool_3x3', 2), ('skip_connect', 0), ('avg_pool_3x3', 3), ('eca', 0), ('sep_conv_3x3', 4), ('cbam', 3)], reduce_concat=range(2, 6))
2023-11-03 22:36:25,637 Cell_3 = Normal_Genotype(normal=[('sep_conv_3x3', 1), ('avg_pool_3x3', 0), ('eca', 2), ('cbam', 0), ('eca', 2), ('dil_conv_3x3', 3), ('max_pool_3x3', 4), ('sep_conv_3x3', 3)], normal_concat=range(2, 6))
2023-11-03 22:36:25,637 Cell_4 = Normal_Genotype(normal=[('skip_connect', 1), ('dil_conv_3x3', 0), ('sep_conv_3x3', 1), ('eca', 0), ('avg_pool_3x3', 3), ('max_pool_3x3', 2), ('eca', 4), ('max_pool_3x3', 2)], normal_concat=range(2, 6))
2023-11-03 22:36:25,637 Cell_5 = Reduce_Genotype(reduce=[('avg_pool_3x3', 0), ('sep_conv_3x3', 1), ('avg_pool_3x3', 2), ('sep_conv_3x3', 0), ('eca', 3), ('eca', 2), ('dil_conv_3x3', 4), ('eca', 3)], reduce_concat=range(2, 6))
2023-11-03 22:40:35,413 train 550 6.965830e-01 71.506352
2023-11-03 22:40:35,415 Cell_0 = Normal_Genotype(normal=[('dil_conv_3x3', 1), ('cbam', 0), ('max_pool_3x3', 1), ('skip_connect', 0), ('avg_pool_3x3', 3), ('cbam', 1), ('avg_pool_3x3', 4), ('skip_connect', 3)], normal_concat=range(2, 6))
2023-11-03 22:40:35,415 Cell_1 = Normal_Genotype(normal=[('cbam', 0), ('max_pool_3x3', 1), ('eca', 2), ('sep_conv_3x3', 0), ('cbam', 3), ('cbam', 0), ('skip_connect', 3), ('skip_connect', 4)], normal_concat=range(2, 6))
2023-11-03 22:40:35,415 Cell_2 = Reduce_Genotype(reduce=[('dil_conv_3x3', 0), ('cbam', 1), ('max_pool_3x3', 2), ('skip_connect', 0), ('avg_pool_3x3', 3), ('eca', 0), ('sep_conv_3x3', 4), ('cbam', 3)], reduce_concat=range(2, 6))
2023-11-03 22:40:35,415 Cell_3 = Normal_Genotype(normal=[('sep_conv_3x3', 1), ('avg_pool_3x3', 0), ('eca', 2), ('cbam', 0), ('eca', 2), ('dil_conv_3x3', 3), ('max_pool_3x3', 4), ('sep_conv_3x3', 3)], normal_concat=range(2, 6))
2023-11-03 22:40:35,415 Cell_4 = Normal_Genotype(normal=[('skip_connect', 1), ('dil_conv_3x3', 0), ('sep_conv_3x3', 1), ('eca', 0), ('avg_pool_3x3', 3), ('max_pool_3x3', 2), ('eca', 4), ('max_pool_3x3', 2)], normal_concat=range(2, 6))
2023-11-03 22:40:35,415 Cell_5 = Reduce_Genotype(reduce=[('avg_pool_3x3', 0), ('sep_conv_3x3', 1), ('avg_pool_3x3', 2), ('sep_conv_3x3', 0), ('eca', 3), ('eca', 2), ('dil_conv_3x3', 4), ('eca', 3)], reduce_concat=range(2, 6))
2023-11-03 22:44:53,958 train 600 6.919148e-01 71.381032
2023-11-03 22:44:53,960 Cell_0 = Normal_Genotype(normal=[('dil_conv_3x3', 1), ('cbam', 0), ('max_pool_3x3', 1), ('skip_connect', 0), ('avg_pool_3x3', 3), ('cbam', 1), ('avg_pool_3x3', 4), ('skip_connect', 3)], normal_concat=range(2, 6))
2023-11-03 22:44:53,960 Cell_1 = Normal_Genotype(normal=[('cbam', 0), ('max_pool_3x3', 1), ('eca', 2), ('sep_conv_3x3', 0), ('cbam', 3), ('cbam', 0), ('skip_connect', 3), ('skip_connect', 4)], normal_concat=range(2, 6))
2023-11-03 22:44:53,960 Cell_2 = Reduce_Genotype(reduce=[('dil_conv_3x3', 0), ('cbam', 1), ('max_pool_3x3', 2), ('skip_connect', 0), ('avg_pool_3x3', 3), ('eca', 0), ('sep_conv_3x3', 4), ('cbam', 3)], reduce_concat=range(2, 6))
2023-11-03 22:44:53,961 Cell_3 = Normal_Genotype(normal=[('sep_conv_3x3', 1), ('avg_pool_3x3', 0), ('eca', 2), ('cbam', 0), ('eca', 2), ('dil_conv_3x3', 3), ('max_pool_3x3', 4), ('sep_conv_3x3', 3)], normal_concat=range(2, 6))
2023-11-03 22:44:53,961 Cell_4 = Normal_Genotype(normal=[('skip_connect', 1), ('dil_conv_3x3', 0), ('sep_conv_3x3', 1), ('eca', 0), ('avg_pool_3x3', 3), ('max_pool_3x3', 2), ('eca', 4), ('max_pool_3x3', 2)], normal_concat=range(2, 6))
2023-11-03 22:44:53,961 Cell_5 = Reduce_Genotype(reduce=[('avg_pool_3x3', 0), ('sep_conv_3x3', 1), ('avg_pool_3x3', 2), ('sep_conv_3x3', 0), ('eca', 3), ('eca', 2), ('dil_conv_3x3', 4), ('eca', 3)], reduce_concat=range(2, 6))
2023-11-03 22:49:03,589 train 650 6.837657e-01 71.735791
2023-11-03 22:49:03,591 Cell_0 = Normal_Genotype(normal=[('dil_conv_3x3', 1), ('cbam', 0), ('max_pool_3x3', 1), ('skip_connect', 0), ('avg_pool_3x3', 3), ('cbam', 1), ('avg_pool_3x3', 4), ('skip_connect', 3)], normal_concat=range(2, 6))
2023-11-03 22:49:03,591 Cell_1 = Normal_Genotype(normal=[('cbam', 0), ('max_pool_3x3', 1), ('eca', 2), ('sep_conv_3x3', 0), ('cbam', 3), ('cbam', 0), ('skip_connect', 3), ('skip_connect', 4)], normal_concat=range(2, 6))
2023-11-03 22:49:03,591 Cell_2 = Reduce_Genotype(reduce=[('dil_conv_3x3', 0), ('cbam', 1), ('max_pool_3x3', 2), ('skip_connect', 0), ('avg_pool_3x3', 3), ('eca', 0), ('sep_conv_3x3', 4), ('cbam', 3)], reduce_concat=range(2, 6))
2023-11-03 22:49:03,591 Cell_3 = Normal_Genotype(normal=[('sep_conv_3x3', 1), ('avg_pool_3x3', 0), ('eca', 2), ('cbam', 0), ('eca', 2), ('dil_conv_3x3', 3), ('max_pool_3x3', 4), ('sep_conv_3x3', 3)], normal_concat=range(2, 6))
2023-11-03 22:49:03,591 Cell_4 = Normal_Genotype(normal=[('skip_connect', 1), ('dil_conv_3x3', 0), ('sep_conv_3x3', 1), ('eca', 0), ('avg_pool_3x3', 3), ('skip_connect', 1), ('eca', 4), ('max_pool_3x3', 2)], normal_concat=range(2, 6))
2023-11-03 22:49:03,591 Cell_5 = Reduce_Genotype(reduce=[('avg_pool_3x3', 0), ('sep_conv_3x3', 1), ('avg_pool_3x3', 2), ('sep_conv_3x3', 0), ('eca', 3), ('eca', 2), ('dil_conv_3x3', 4), ('eca', 3)], reduce_concat=range(2, 6))
2023-11-03 22:53:09,481 train_acc 71.642857
2023-11-03 22:53:13,441 valid 000 2.289950e+00 50.000000
2023-11-03 22:53:13,442 Cell_0 = Normal_Genotype(normal=[('eca', 1), ('max_pool_3x3', 0), ('max_pool_3x3', 1), ('sep_conv_3x3', 2), ('cbam', 1), ('cbam', 3), ('avg_pool_3x3', 3), ('dil_conv_3x3', 2)], normal_concat=range(2, 6))
2023-11-03 22:53:13,443 Cell_1 = Normal_Genotype(normal=[('max_pool_3x3', 1), ('cbam', 0), ('skip_connect', 1), ('avg_pool_3x3', 2), ('sep_conv_3x3', 3), ('max_pool_3x3', 2), ('dil_conv_3x3', 4), ('max_pool_3x3', 3)], normal_concat=range(2, 6))
2023-11-03 22:53:13,443 Cell_2 = Reduce_Genotype(reduce=[('dil_conv_3x3', 0), ('cbam', 1), ('eca', 0), ('eca', 2), ('avg_pool_3x3', 3), ('sep_conv_3x3', 0), ('skip_connect', 4), ('cbam', 3)], reduce_concat=range(2, 6))
2023-11-03 22:53:13,443 Cell_3 = Normal_Genotype(normal=[('sep_conv_3x3', 1), ('avg_pool_3x3', 0), ('eca', 2), ('cbam', 0), ('avg_pool_3x3', 3), ('eca', 0), ('avg_pool_3x3', 3), ('skip_connect', 0)], normal_concat=range(2, 6))
2023-11-03 22:53:13,443 Cell_4 = Normal_Genotype(normal=[('skip_connect', 1), ('skip_connect', 0), ('skip_connect', 0), ('sep_conv_3x3', 1), ('dil_conv_3x3', 3), ('eca', 0), ('skip_connect', 3), ('dil_conv_3x3', 4)], normal_concat=range(2, 6))
2023-11-03 22:53:13,443 Cell_5 = Reduce_Genotype(reduce=[('max_pool_3x3', 0), ('cbam', 1), ('sep_conv_3x3', 0), ('sep_conv_3x3', 1), ('sep_conv_3x3', 3), ('sep_conv_3x3', 2), ('dil_conv_3x3', 4), ('eca', 2)], reduce_concat=range(2, 6))
2023-11-03 22:53:57,761 valid 050 1.795344e+00 55.882353
2023-11-03 22:53:57,763 Cell_0 = Normal_Genotype(normal=[('eca', 1), ('max_pool_3x3', 0), ('max_pool_3x3', 1), ('sep_conv_3x3', 2), ('cbam', 1), ('cbam', 3), ('avg_pool_3x3', 3), ('skip_connect', 4)], normal_concat=range(2, 6))
2023-11-03 22:53:57,763 Cell_1 = Normal_Genotype(normal=[('max_pool_3x3', 1), ('cbam', 0), ('skip_connect', 1), ('avg_pool_3x3', 2), ('sep_conv_3x3', 3), ('max_pool_3x3', 2), ('dil_conv_3x3', 4), ('max_pool_3x3', 3)], normal_concat=range(2, 6))
2023-11-03 22:53:57,764 Cell_2 = Reduce_Genotype(reduce=[('dil_conv_3x3', 0), ('cbam', 1), ('eca', 0), ('eca', 2), ('sep_conv_3x3', 0), ('avg_pool_3x3', 3), ('skip_connect', 4), ('cbam', 3)], reduce_concat=range(2, 6))
2023-11-03 22:53:57,764 Cell_3 = Normal_Genotype(normal=[('sep_conv_3x3', 1), ('avg_pool_3x3', 0), ('eca', 2), ('cbam', 0), ('avg_pool_3x3', 3), ('eca', 0), ('avg_pool_3x3', 3), ('skip_connect', 0)], normal_concat=range(2, 6))
2023-11-03 22:53:57,764 Cell_4 = Normal_Genotype(normal=[('skip_connect', 1), ('skip_connect', 0), ('skip_connect', 0), ('sep_conv_3x3', 1), ('sep_conv_3x3', 3), ('eca', 0), ('skip_connect', 3), ('dil_conv_3x3', 4)], normal_concat=range(2, 6))
2023-11-03 22:53:57,764 Cell_5 = Reduce_Genotype(reduce=[('max_pool_3x3', 0), ('cbam', 1), ('sep_conv_3x3', 0), ('sep_conv_3x3', 1), ('sep_conv_3x3', 3), ('sep_conv_3x3', 2), ('dil_conv_3x3', 4), ('eca', 2)], reduce_concat=range(2, 6))
2023-11-03 22:54:42,251 valid 100 1.879069e+00 53.960396
2023-11-03 22:54:42,253 Cell_0 = Normal_Genotype(normal=[('eca', 1), ('max_pool_3x3', 0), ('max_pool_3x3', 1), ('sep_conv_3x3', 2), ('cbam', 1), ('cbam', 3), ('avg_pool_3x3', 3), ('skip_connect', 4)], normal_concat=range(2, 6))
2023-11-03 22:54:42,253 Cell_1 = Normal_Genotype(normal=[('max_pool_3x3', 1), ('cbam', 0), ('skip_connect', 1), ('avg_pool_3x3', 2), ('sep_conv_3x3', 3), ('max_pool_3x3', 2), ('dil_conv_3x3', 4), ('max_pool_3x3', 3)], normal_concat=range(2, 6))
2023-11-03 22:54:42,254 Cell_2 = Reduce_Genotype(reduce=[('dil_conv_3x3', 0), ('cbam', 1), ('eca', 0), ('eca', 2), ('sep_conv_3x3', 0), ('avg_pool_3x3', 3), ('skip_connect', 4), ('cbam', 3)], reduce_concat=range(2, 6))
2023-11-03 22:54:42,254 Cell_3 = Normal_Genotype(normal=[('sep_conv_3x3', 1), ('avg_pool_3x3', 0), ('eca', 2), ('cbam', 0), ('avg_pool_3x3', 3), ('eca', 0), ('avg_pool_3x3', 3), ('skip_connect', 0)], normal_concat=range(2, 6))
2023-11-03 22:54:42,254 Cell_4 = Normal_Genotype(normal=[('skip_connect', 1), ('skip_connect', 0), ('skip_connect', 0), ('sep_conv_3x3', 1), ('sep_conv_3x3', 3), ('eca', 0), ('skip_connect', 3), ('dil_conv_3x3', 4)], normal_concat=range(2, 6))
2023-11-03 22:54:42,254 Cell_5 = Reduce_Genotype(reduce=[('max_pool_3x3', 0), ('cbam', 1), ('sep_conv_3x3', 0), ('sep_conv_3x3', 1), ('sep_conv_3x3', 3), ('sep_conv_3x3', 2), ('dil_conv_3x3', 4), ('eca', 2)], reduce_concat=range(2, 6))
2023-11-03 22:55:27,592 valid 150 1.699809e+00 58.609272
2023-11-03 22:55:27,594 Cell_0 = Normal_Genotype(normal=[('eca', 1), ('max_pool_3x3', 0), ('max_pool_3x3', 1), ('sep_conv_3x3', 2), ('cbam', 1), ('cbam', 3), ('avg_pool_3x3', 3), ('skip_connect', 4)], normal_concat=range(2, 6))
2023-11-03 22:55:27,594 Cell_1 = Normal_Genotype(normal=[('max_pool_3x3', 1), ('cbam', 0), ('skip_connect', 1), ('avg_pool_3x3', 2), ('sep_conv_3x3', 3), ('max_pool_3x3', 2), ('dil_conv_3x3', 4), ('max_pool_3x3', 3)], normal_concat=range(2, 6))
2023-11-03 22:55:27,594 Cell_2 = Reduce_Genotype(reduce=[('dil_conv_3x3', 0), ('cbam', 1), ('eca', 0), ('eca', 2), ('sep_conv_3x3', 0), ('avg_pool_3x3', 3), ('skip_connect', 4), ('cbam', 3)], reduce_concat=range(2, 6))
2023-11-03 22:55:27,594 Cell_3 = Normal_Genotype(normal=[('sep_conv_3x3', 1), ('avg_pool_3x3', 0), ('eca', 2), ('cbam', 0), ('avg_pool_3x3', 3), ('eca', 0), ('avg_pool_3x3', 3), ('skip_connect', 0)], normal_concat=range(2, 6))
2023-11-03 22:55:27,594 Cell_4 = Normal_Genotype(normal=[('skip_connect', 1), ('skip_connect', 0), ('skip_connect', 0), ('sep_conv_3x3', 1), ('sep_conv_3x3', 3), ('eca', 0), ('skip_connect', 3), ('dil_conv_3x3', 4)], normal_concat=range(2, 6))
2023-11-03 22:55:27,594 Cell_5 = Reduce_Genotype(reduce=[('max_pool_3x3', 0), ('cbam', 1), ('sep_conv_3x3', 0), ('sep_conv_3x3', 1), ('sep_conv_3x3', 3), ('sep_conv_3x3', 2), ('dil_conv_3x3', 4), ('eca', 2)], reduce_concat=range(2, 6))
2023-11-03 22:56:12,434 valid 200 1.722544e+00 57.960199
2023-11-03 22:56:12,435 Cell_0 = Normal_Genotype(normal=[('eca', 1), ('max_pool_3x3', 0), ('max_pool_3x3', 1), ('sep_conv_3x3', 2), ('cbam', 1), ('cbam', 3), ('avg_pool_3x3', 3), ('skip_connect', 4)], normal_concat=range(2, 6))
2023-11-03 22:56:12,436 Cell_1 = Normal_Genotype(normal=[('max_pool_3x3', 1), ('cbam', 0), ('skip_connect', 1), ('avg_pool_3x3', 2), ('sep_conv_3x3', 3), ('max_pool_3x3', 2), ('dil_conv_3x3', 4), ('max_pool_3x3', 3)], normal_concat=range(2, 6))
2023-11-03 22:56:12,436 Cell_2 = Reduce_Genotype(reduce=[('dil_conv_3x3', 0), ('cbam', 1), ('eca', 0), ('eca', 2), ('sep_conv_3x3', 0), ('avg_pool_3x3', 3), ('skip_connect', 4), ('cbam', 3)], reduce_concat=range(2, 6))
2023-11-03 22:56:12,436 Cell_3 = Normal_Genotype(normal=[('sep_conv_3x3', 1), ('avg_pool_3x3', 0), ('eca', 2), ('cbam', 0), ('avg_pool_3x3', 3), ('eca', 0), ('avg_pool_3x3', 3), ('skip_connect', 0)], normal_concat=range(2, 6))
2023-11-03 22:56:12,436 Cell_4 = Normal_Genotype(normal=[('skip_connect', 1), ('skip_connect', 0), ('skip_connect', 0), ('sep_conv_3x3', 1), ('sep_conv_3x3', 3), ('eca', 0), ('skip_connect', 3), ('dil_conv_3x3', 4)], normal_concat=range(2, 6))
2023-11-03 22:56:12,436 Cell_5 = Reduce_Genotype(reduce=[('max_pool_3x3', 0), ('cbam', 1), ('sep_conv_3x3', 0), ('sep_conv_3x3', 1), ('sep_conv_3x3', 3), ('sep_conv_3x3', 2), ('dil_conv_3x3', 4), ('eca', 2)], reduce_concat=range(2, 6))
2023-11-03 22:56:56,799 valid 250 1.768659e+00 56.772908
2023-11-03 22:56:56,801 Cell_0 = Normal_Genotype(normal=[('eca', 1), ('max_pool_3x3', 0), ('max_pool_3x3', 1), ('sep_conv_3x3', 2), ('cbam', 1), ('cbam', 3), ('avg_pool_3x3', 3), ('skip_connect', 4)], normal_concat=range(2, 6))
2023-11-03 22:56:56,801 Cell_1 = Normal_Genotype(normal=[('max_pool_3x3', 1), ('cbam', 0), ('skip_connect', 1), ('avg_pool_3x3', 2), ('sep_conv_3x3', 3), ('max_pool_3x3', 2), ('dil_conv_3x3', 4), ('max_pool_3x3', 3)], normal_concat=range(2, 6))
2023-11-03 22:56:56,801 Cell_2 = Reduce_Genotype(reduce=[('dil_conv_3x3', 0), ('cbam', 1), ('eca', 0), ('eca', 2), ('sep_conv_3x3', 0), ('avg_pool_3x3', 3), ('skip_connect', 4), ('cbam', 3)], reduce_concat=range(2, 6))
2023-11-03 22:56:56,801 Cell_3 = Normal_Genotype(normal=[('sep_conv_3x3', 1), ('avg_pool_3x3', 0), ('eca', 2), ('cbam', 0), ('avg_pool_3x3', 3), ('eca', 0), ('avg_pool_3x3', 3), ('skip_connect', 0)], normal_concat=range(2, 6))
2023-11-03 22:56:56,801 Cell_4 = Normal_Genotype(normal=[('skip_connect', 1), ('skip_connect', 0), ('skip_connect', 0), ('sep_conv_3x3', 1), ('sep_conv_3x3', 3), ('eca', 0), ('skip_connect', 3), ('dil_conv_3x3', 4)], normal_concat=range(2, 6))
2023-11-03 22:56:56,802 Cell_5 = Reduce_Genotype(reduce=[('max_pool_3x3', 0), ('cbam', 1), ('sep_conv_3x3', 0), ('sep_conv_3x3', 1), ('sep_conv_3x3', 3), ('sep_conv_3x3', 2), ('dil_conv_3x3', 4), ('eca', 2)], reduce_concat=range(2, 6))
2023-11-03 22:57:40,477 valid_acc 57.666667
2023-11-03 22:57:40,976 epoch 1 lr 2.434396e-02
2023-11-03 22:57:47,412 train 000 5.042436e-01 100.000000
2023-11-03 22:57:47,413 Cell_0 = Normal_Genotype(normal=[('dil_conv_3x3', 1), ('cbam', 0), ('max_pool_3x3', 1), ('max_pool_3x3', 2), ('avg_pool_3x3', 3), ('cbam', 1), ('dil_conv_3x3', 4), ('dil_conv_3x3', 2)], normal_concat=range(2, 6))
2023-11-03 22:57:47,413 Cell_1 = Normal_Genotype(normal=[('cbam', 0), ('max_pool_3x3', 1), ('eca', 2), ('sep_conv_3x3', 0), ('cbam', 3), ('sep_conv_3x3', 2), ('skip_connect', 4), ('skip_connect', 3)], normal_concat=range(2, 6))
2023-11-03 22:57:47,414 Cell_2 = Reduce_Genotype(reduce=[('dil_conv_3x3', 0), ('sep_conv_3x3', 1), ('max_pool_3x3', 2), ('avg_pool_3x3', 0), ('avg_pool_3x3', 3), ('eca', 0), ('dil_conv_3x3', 4), ('dil_conv_3x3', 3)], reduce_concat=range(2, 6))
2023-11-03 22:57:47,414 Cell_3 = Normal_Genotype(normal=[('sep_conv_3x3', 1), ('avg_pool_3x3', 0), ('max_pool_3x3', 2), ('cbam', 0), ('eca', 2), ('avg_pool_3x3', 3), ('cbam', 4), ('sep_conv_3x3', 3)], normal_concat=range(2, 6))
2023-11-03 22:57:47,414 Cell_4 = Normal_Genotype(normal=[('skip_connect', 1), ('dil_conv_3x3', 0), ('sep_conv_3x3', 1), ('eca', 0), ('avg_pool_3x3', 3), ('skip_connect', 1), ('max_pool_3x3', 2), ('eca', 4)], normal_concat=range(2, 6))
2023-11-03 22:57:47,414 Cell_5 = Reduce_Genotype(reduce=[('avg_pool_3x3', 0), ('sep_conv_3x3', 1), ('avg_pool_3x3', 2), ('sep_conv_3x3', 0), ('eca', 3), ('eca', 2), ('dil_conv_3x3', 4), ('eca', 3)], reduce_concat=range(2, 6))
2023-11-03 23:01:52,680 train 050 5.646447e-01 76.470588
2023-11-03 23:01:52,682 Cell_0 = Normal_Genotype(normal=[('dil_conv_3x3', 1), ('cbam', 0), ('max_pool_3x3', 1), ('max_pool_3x3', 2), ('avg_pool_3x3', 3), ('cbam', 1), ('avg_pool_3x3', 4), ('avg_pool_3x3', 3)], normal_concat=range(2, 6))
2023-11-03 23:01:52,683 Cell_1 = Normal_Genotype(normal=[('cbam', 0), ('skip_connect', 1), ('eca', 2), ('sep_conv_3x3', 0), ('cbam', 3), ('sep_conv_3x3', 2), ('skip_connect', 3), ('skip_connect', 4)], normal_concat=range(2, 6))
2023-11-03 23:01:52,683 Cell_2 = Reduce_Genotype(reduce=[('dil_conv_3x3', 0), ('sep_conv_3x3', 1), ('max_pool_3x3', 2), ('avg_pool_3x3', 0), ('avg_pool_3x3', 3), ('eca', 0), ('dil_conv_3x3', 4), ('dil_conv_3x3', 3)], reduce_concat=range(2, 6))
2023-11-03 23:01:52,683 Cell_3 = Normal_Genotype(normal=[('sep_conv_3x3', 1), ('avg_pool_3x3', 0), ('max_pool_3x3', 2), ('cbam', 0), ('eca', 2), ('avg_pool_3x3', 3), ('cbam', 4), ('sep_conv_3x3', 3)], normal_concat=range(2, 6))
2023-11-03 23:01:52,683 Cell_4 = Normal_Genotype(normal=[('skip_connect', 1), ('dil_conv_3x3', 0), ('sep_conv_3x3', 1), ('eca', 0), ('avg_pool_3x3', 3), ('skip_connect', 1), ('max_pool_3x3', 2), ('eca', 4)], normal_concat=range(2, 6))
2023-11-03 23:01:52,683 Cell_5 = Reduce_Genotype(reduce=[('avg_pool_3x3', 0), ('sep_conv_3x3', 1), ('avg_pool_3x3', 2), ('sep_conv_3x3', 0), ('eca', 3), ('eca', 2), ('dil_conv_3x3', 4), ('eca', 3)], reduce_concat=range(2, 6))
2023-11-03 23:06:14,841 train 100 5.766835e-01 74.752475
2023-11-03 23:06:14,843 Cell_0 = Normal_Genotype(normal=[('dil_conv_3x3', 1), ('cbam', 0), ('max_pool_3x3', 1), ('skip_connect', 2), ('avg_pool_3x3', 3), ('cbam', 1), ('avg_pool_3x3', 4), ('avg_pool_3x3', 3)], normal_concat=range(2, 6))
2023-11-03 23:06:14,843 Cell_1 = Normal_Genotype(normal=[('cbam', 0), ('skip_connect', 1), ('eca', 2), ('sep_conv_3x3', 0), ('cbam', 3), ('cbam', 0), ('skip_connect', 3), ('skip_connect', 4)], normal_concat=range(2, 6))
2023-11-03 23:06:14,844 Cell_2 = Reduce_Genotype(reduce=[('dil_conv_3x3', 0), ('sep_conv_3x3', 1), ('max_pool_3x3', 2), ('avg_pool_3x3', 0), ('avg_pool_3x3', 3), ('eca', 0), ('dil_conv_3x3', 4), ('dil_conv_3x3', 3)], reduce_concat=range(2, 6))
2023-11-03 23:06:14,844 Cell_3 = Normal_Genotype(normal=[('sep_conv_3x3', 1), ('avg_pool_3x3', 0), ('max_pool_3x3', 2), ('cbam', 0), ('eca', 2), ('avg_pool_3x3', 3), ('cbam', 4), ('sep_conv_3x3', 3)], normal_concat=range(2, 6))
2023-11-03 23:06:14,844 Cell_4 = Normal_Genotype(normal=[('skip_connect', 1), ('dil_conv_3x3', 0), ('sep_conv_3x3', 1), ('eca', 0), ('avg_pool_3x3', 3), ('skip_connect', 1), ('max_pool_3x3', 2), ('eca', 4)], normal_concat=range(2, 6))
2023-11-03 23:06:14,844 Cell_5 = Reduce_Genotype(reduce=[('avg_pool_3x3', 0), ('sep_conv_3x3', 1), ('avg_pool_3x3', 2), ('sep_conv_3x3', 0), ('eca', 3), ('eca', 2), ('dil_conv_3x3', 4), ('eca', 3)], reduce_concat=range(2, 6))
2023-11-03 23:10:26,646 train 150 5.973096e-01 72.516556
2023-11-03 23:10:26,649 Cell_0 = Normal_Genotype(normal=[('dil_conv_3x3', 1), ('cbam', 0), ('max_pool_3x3', 1), ('skip_connect', 2), ('avg_pool_3x3', 3), ('cbam', 1), ('avg_pool_3x3', 4), ('avg_pool_3x3', 3)], normal_concat=range(2, 6))
2023-11-03 23:10:26,649 Cell_1 = Normal_Genotype(normal=[('cbam', 0), ('skip_connect', 1), ('eca', 2), ('sep_conv_3x3', 0), ('cbam', 3), ('cbam', 0), ('skip_connect', 3), ('skip_connect', 4)], normal_concat=range(2, 6))
2023-11-03 23:10:26,649 Cell_2 = Reduce_Genotype(reduce=[('dil_conv_3x3', 0), ('sep_conv_3x3', 1), ('max_pool_3x3', 2), ('avg_pool_3x3', 0), ('avg_pool_3x3', 3), ('eca', 0), ('dil_conv_3x3', 4), ('dil_conv_3x3', 3)], reduce_concat=range(2, 6))
2023-11-03 23:10:26,649 Cell_3 = Normal_Genotype(normal=[('sep_conv_3x3', 1), ('avg_pool_3x3', 0), ('max_pool_3x3', 2), ('cbam', 0), ('avg_pool_3x3', 3), ('eca', 2), ('cbam', 4), ('sep_conv_3x3', 3)], normal_concat=range(2, 6))
2023-11-03 23:10:26,649 Cell_4 = Normal_Genotype(normal=[('skip_connect', 1), ('dil_conv_3x3', 0), ('sep_conv_3x3', 1), ('eca', 0), ('avg_pool_3x3', 3), ('skip_connect', 1), ('max_pool_3x3', 2), ('eca', 4)], normal_concat=range(2, 6))
2023-11-03 23:10:26,649 Cell_5 = Reduce_Genotype(reduce=[('avg_pool_3x3', 0), ('sep_conv_3x3', 1), ('avg_pool_3x3', 2), ('sep_conv_3x3', 0), ('eca', 3), ('eca', 2), ('dil_conv_3x3', 4), ('eca', 3)], reduce_concat=range(2, 6))
2023-11-03 23:14:47,276 train 200 6.096819e-01 70.646766
2023-11-03 23:14:47,278 Cell_0 = Normal_Genotype(normal=[('dil_conv_3x3', 1), ('cbam', 0), ('max_pool_3x3', 1), ('skip_connect', 2), ('avg_pool_3x3', 3), ('cbam', 1), ('avg_pool_3x3', 4), ('avg_pool_3x3', 3)], normal_concat=range(2, 6))
2023-11-03 23:14:47,278 Cell_1 = Normal_Genotype(normal=[('cbam', 0), ('skip_connect', 1), ('eca', 2), ('sep_conv_3x3', 0), ('cbam', 3), ('cbam', 0), ('skip_connect', 3), ('skip_connect', 4)], normal_concat=range(2, 6))
2023-11-03 23:14:47,279 Cell_2 = Reduce_Genotype(reduce=[('dil_conv_3x3', 0), ('sep_conv_3x3', 1), ('max_pool_3x3', 2), ('avg_pool_3x3', 0), ('avg_pool_3x3', 3), ('eca', 0), ('dil_conv_3x3', 4), ('dil_conv_3x3', 3)], reduce_concat=range(2, 6))
2023-11-03 23:14:47,279 Cell_3 = Normal_Genotype(normal=[('sep_conv_3x3', 1), ('avg_pool_3x3', 0), ('max_pool_3x3', 2), ('cbam', 0), ('avg_pool_3x3', 3), ('eca', 2), ('cbam', 4), ('sep_conv_3x3', 3)], normal_concat=range(2, 6))
2023-11-03 23:14:47,279 Cell_4 = Normal_Genotype(normal=[('skip_connect', 1), ('dil_conv_3x3', 0), ('sep_conv_3x3', 1), ('eca', 0), ('avg_pool_3x3', 3), ('skip_connect', 1), ('max_pool_3x3', 2), ('eca', 4)], normal_concat=range(2, 6))
2023-11-03 23:14:47,279 Cell_5 = Reduce_Genotype(reduce=[('avg_pool_3x3', 0), ('sep_conv_3x3', 1), ('avg_pool_3x3', 2), ('sep_conv_3x3', 0), ('eca', 3), ('eca', 2), ('dil_conv_3x3', 4), ('eca', 3)], reduce_concat=range(2, 6))
2023-11-03 23:19:07,924 train 250 6.165194e-01 70.318725
2023-11-03 23:19:07,927 Cell_0 = Normal_Genotype(normal=[('dil_conv_3x3', 1), ('cbam', 0), ('max_pool_3x3', 1), ('skip_connect', 2), ('avg_pool_3x3', 3), ('cbam', 1), ('avg_pool_3x3', 4), ('avg_pool_3x3', 3)], normal_concat=range(2, 6))
2023-11-03 23:19:07,927 Cell_1 = Normal_Genotype(normal=[('cbam', 0), ('skip_connect', 1), ('eca', 2), ('sep_conv_3x3', 0), ('cbam', 3), ('sep_conv_3x3', 2), ('skip_connect', 3), ('skip_connect', 4)], normal_concat=range(2, 6))
2023-11-03 23:19:07,927 Cell_2 = Reduce_Genotype(reduce=[('dil_conv_3x3', 0), ('sep_conv_3x3', 1), ('max_pool_3x3', 2), ('avg_pool_3x3', 0), ('avg_pool_3x3', 3), ('eca', 0), ('sep_conv_3x3', 4), ('dil_conv_3x3', 3)], reduce_concat=range(2, 6))
2023-11-03 23:19:07,927 Cell_3 = Normal_Genotype(normal=[('sep_conv_3x3', 1), ('avg_pool_3x3', 0), ('max_pool_3x3', 2), ('cbam', 0), ('avg_pool_3x3', 3), ('eca', 2), ('cbam', 4), ('sep_conv_3x3', 3)], normal_concat=range(2, 6))
2023-11-03 23:19:07,927 Cell_4 = Normal_Genotype(normal=[('skip_connect', 1), ('dil_conv_3x3', 0), ('sep_conv_3x3', 1), ('eca', 0), ('avg_pool_3x3', 3), ('skip_connect', 1), ('max_pool_3x3', 2), ('eca', 4)], normal_concat=range(2, 6))
2023-11-03 23:19:07,927 Cell_5 = Reduce_Genotype(reduce=[('avg_pool_3x3', 0), ('sep_conv_3x3', 1), ('avg_pool_3x3', 2), ('sep_conv_3x3', 0), ('eca', 3), ('eca', 2), ('dil_conv_3x3', 4), ('eca', 3)], reduce_concat=range(2, 6))
2023-11-03 23:23:28,270 train 300 5.969240e-01 72.425249
2023-11-03 23:23:28,273 Cell_0 = Normal_Genotype(normal=[('dil_conv_3x3', 1), ('cbam', 0), ('max_pool_3x3', 1), ('skip_connect', 2), ('avg_pool_3x3', 3), ('cbam', 1), ('dil_conv_3x3', 4), ('avg_pool_3x3', 3)], normal_concat=range(2, 6))
2023-11-03 23:23:28,273 Cell_1 = Normal_Genotype(normal=[('cbam', 0), ('skip_connect', 1), ('eca', 2), ('sep_conv_3x3', 0), ('cbam', 3), ('sep_conv_3x3', 2), ('skip_connect', 3), ('skip_connect', 4)], normal_concat=range(2, 6))
2023-11-03 23:23:28,273 Cell_2 = Reduce_Genotype(reduce=[('dil_conv_3x3', 0), ('skip_connect', 1), ('max_pool_3x3', 2), ('avg_pool_3x3', 0), ('avg_pool_3x3', 3), ('eca', 0), ('sep_conv_3x3', 4), ('dil_conv_3x3', 3)], reduce_concat=range(2, 6))
2023-11-03 23:23:28,273 Cell_3 = Normal_Genotype(normal=[('sep_conv_3x3', 1), ('avg_pool_3x3', 0), ('max_pool_3x3', 2), ('cbam', 0), ('avg_pool_3x3', 3), ('eca', 2), ('cbam', 4), ('sep_conv_3x3', 3)], normal_concat=range(2, 6))
2023-11-03 23:23:28,273 Cell_4 = Normal_Genotype(normal=[('skip_connect', 1), ('dil_conv_3x3', 0), ('sep_conv_3x3', 1), ('eca', 0), ('avg_pool_3x3', 3), ('skip_connect', 1), ('max_pool_3x3', 2), ('eca', 4)], normal_concat=range(2, 6))
2023-11-03 23:23:28,273 Cell_5 = Reduce_Genotype(reduce=[('avg_pool_3x3', 0), ('sep_conv_3x3', 1), ('avg_pool_3x3', 2), ('sep_conv_3x3', 0), ('eca', 3), ('eca', 2), ('dil_conv_3x3', 4), ('eca', 3)], reduce_concat=range(2, 6))
2023-11-03 23:27:38,235 train 350 6.057125e-01 70.512821
2023-11-03 23:27:38,237 Cell_0 = Normal_Genotype(normal=[('cbam', 0), ('dil_conv_3x3', 1), ('max_pool_3x3', 1), ('skip_connect', 2), ('avg_pool_3x3', 3), ('cbam', 1), ('dil_conv_3x3', 4), ('avg_pool_3x3', 3)], normal_concat=range(2, 6))
2023-11-03 23:27:38,237 Cell_1 = Normal_Genotype(normal=[('cbam', 0), ('skip_connect', 1), ('eca', 2), ('sep_conv_3x3', 0), ('cbam', 3), ('sep_conv_3x3', 2), ('skip_connect', 3), ('skip_connect', 4)], normal_concat=range(2, 6))
2023-11-03 23:27:38,238 Cell_2 = Reduce_Genotype(reduce=[('dil_conv_3x3', 0), ('skip_connect', 1), ('max_pool_3x3', 2), ('avg_pool_3x3', 0), ('avg_pool_3x3', 3), ('eca', 0), ('sep_conv_3x3', 4), ('dil_conv_3x3', 3)], reduce_concat=range(2, 6))
2023-11-03 23:27:38,238 Cell_3 = Normal_Genotype(normal=[('sep_conv_3x3', 1), ('avg_pool_3x3', 0), ('max_pool_3x3', 2), ('cbam', 0), ('avg_pool_3x3', 3), ('eca', 2), ('cbam', 4), ('sep_conv_3x3', 3)], normal_concat=range(2, 6))
2023-11-03 23:27:38,238 Cell_4 = Normal_Genotype(normal=[('skip_connect', 1), ('dil_conv_3x3', 0), ('sep_conv_3x3', 1), ('eca', 0), ('avg_pool_3x3', 3), ('skip_connect', 1), ('max_pool_3x3', 2), ('eca', 4)], normal_concat=range(2, 6))
2023-11-03 23:27:38,238 Cell_5 = Reduce_Genotype(reduce=[('avg_pool_3x3', 0), ('sep_conv_3x3', 1), ('avg_pool_3x3', 2), ('sep_conv_3x3', 0), ('eca', 3), ('eca', 2), ('dil_conv_3x3', 4), ('eca', 3)], reduce_concat=range(2, 6))
2023-11-03 23:31:47,945 train 400 6.066613e-01 70.947631
2023-11-03 23:31:47,947 Cell_0 = Normal_Genotype(normal=[('cbam', 0), ('dil_conv_3x3', 1), ('max_pool_3x3', 1), ('skip_connect', 2), ('avg_pool_3x3', 3), ('cbam', 1), ('dil_conv_3x3', 4), ('avg_pool_3x3', 3)], normal_concat=range(2, 6))
2023-11-03 23:31:47,947 Cell_1 = Normal_Genotype(normal=[('cbam', 0), ('skip_connect', 1), ('eca', 2), ('sep_conv_3x3', 0), ('cbam', 3), ('sep_conv_3x3', 2), ('skip_connect', 3), ('skip_connect', 4)], normal_concat=range(2, 6))
2023-11-03 23:31:47,948 Cell_2 = Reduce_Genotype(reduce=[('dil_conv_3x3', 0), ('skip_connect', 1), ('max_pool_3x3', 2), ('avg_pool_3x3', 0), ('avg_pool_3x3', 3), ('eca', 0), ('sep_conv_3x3', 4), ('dil_conv_3x3', 3)], reduce_concat=range(2, 6))
2023-11-03 23:31:47,948 Cell_3 = Normal_Genotype(normal=[('sep_conv_3x3', 1), ('avg_pool_3x3', 0), ('max_pool_3x3', 2), ('cbam', 0), ('avg_pool_3x3', 3), ('eca', 2), ('cbam', 4), ('sep_conv_3x3', 3)], normal_concat=range(2, 6))
2023-11-03 23:31:47,948 Cell_4 = Normal_Genotype(normal=[('skip_connect', 1), ('dil_conv_3x3', 0), ('sep_conv_3x3', 1), ('eca', 0), ('avg_pool_3x3', 3), ('skip_connect', 1), ('max_pool_3x3', 2), ('eca', 4)], normal_concat=range(2, 6))
2023-11-03 23:31:47,948 Cell_5 = Reduce_Genotype(reduce=[('avg_pool_3x3', 0), ('sep_conv_3x3', 1), ('avg_pool_3x3', 2), ('sep_conv_3x3', 0), ('eca', 3), ('eca', 2), ('dil_conv_3x3', 4), ('eca', 3)], reduce_concat=range(2, 6))
2023-11-03 23:36:02,243 train 450 6.078151e-01 71.064302
2023-11-03 23:36:02,246 Cell_0 = Normal_Genotype(normal=[('cbam', 0), ('sep_conv_3x3', 1), ('max_pool_3x3', 1), ('skip_connect', 2), ('avg_pool_3x3', 3), ('cbam', 1), ('dil_conv_3x3', 4), ('avg_pool_3x3', 3)], normal_concat=range(2, 6))
2023-11-03 23:36:02,246 Cell_1 = Normal_Genotype(normal=[('cbam', 0), ('skip_connect', 1), ('eca', 2), ('sep_conv_3x3', 0), ('cbam', 3), ('sep_conv_3x3', 2), ('skip_connect', 3), ('skip_connect', 4)], normal_concat=range(2, 6))
2023-11-03 23:36:02,246 Cell_2 = Reduce_Genotype(reduce=[('dil_conv_3x3', 0), ('skip_connect', 1), ('max_pool_3x3', 2), ('avg_pool_3x3', 0), ('avg_pool_3x3', 3), ('eca', 0), ('sep_conv_3x3', 4), ('dil_conv_3x3', 3)], reduce_concat=range(2, 6))
2023-11-03 23:36:02,246 Cell_3 = Normal_Genotype(normal=[('sep_conv_3x3', 1), ('avg_pool_3x3', 0), ('max_pool_3x3', 2), ('cbam', 0), ('avg_pool_3x3', 3), ('eca', 2), ('cbam', 4), ('sep_conv_3x3', 3)], normal_concat=range(2, 6))
2023-11-03 23:36:02,246 Cell_4 = Normal_Genotype(normal=[('skip_connect', 1), ('dil_conv_3x3', 0), ('sep_conv_3x3', 1), ('eca', 0), ('avg_pool_3x3', 3), ('skip_connect', 1), ('max_pool_3x3', 2), ('eca', 4)], normal_concat=range(2, 6))
2023-11-03 23:36:02,246 Cell_5 = Reduce_Genotype(reduce=[('avg_pool_3x3', 0), ('sep_conv_3x3', 1), ('avg_pool_3x3', 2), ('sep_conv_3x3', 0), ('eca', 3), ('eca', 2), ('dil_conv_3x3', 4), ('eca', 3)], reduce_concat=range(2, 6))
2023-11-03 23:40:08,816 train 500 6.012802e-01 71.756487
2023-11-03 23:40:08,818 Cell_0 = Normal_Genotype(normal=[('sep_conv_3x3', 1), ('cbam', 0), ('max_pool_3x3', 1), ('skip_connect', 2), ('avg_pool_3x3', 3), ('cbam', 1), ('dil_conv_3x3', 4), ('avg_pool_3x3', 3)], normal_concat=range(2, 6))
2023-11-03 23:40:08,818 Cell_1 = Normal_Genotype(normal=[('cbam', 0), ('skip_connect', 1), ('eca', 2), ('sep_conv_3x3', 0), ('cbam', 3), ('sep_conv_3x3', 2), ('skip_connect', 3), ('skip_connect', 4)], normal_concat=range(2, 6))
2023-11-03 23:40:08,818 Cell_2 = Reduce_Genotype(reduce=[('dil_conv_3x3', 0), ('skip_connect', 1), ('max_pool_3x3', 2), ('avg_pool_3x3', 0), ('avg_pool_3x3', 3), ('eca', 0), ('sep_conv_3x3', 4), ('dil_conv_3x3', 3)], reduce_concat=range(2, 6))
2023-11-03 23:40:08,819 Cell_3 = Normal_Genotype(normal=[('sep_conv_3x3', 1), ('avg_pool_3x3', 0), ('max_pool_3x3', 2), ('cbam', 0), ('avg_pool_3x3', 3), ('eca', 2), ('cbam', 4), ('sep_conv_3x3', 3)], normal_concat=range(2, 6))
2023-11-03 23:40:08,819 Cell_4 = Normal_Genotype(normal=[('skip_connect', 1), ('dil_conv_3x3', 0), ('sep_conv_3x3', 1), ('eca', 0), ('avg_pool_3x3', 3), ('skip_connect', 1), ('max_pool_3x3', 2), ('eca', 4)], normal_concat=range(2, 6))
2023-11-03 23:40:08,819 Cell_5 = Reduce_Genotype(reduce=[('avg_pool_3x3', 0), ('sep_conv_3x3', 1), ('avg_pool_3x3', 2), ('sep_conv_3x3', 0), ('eca', 3), ('eca', 2), ('dil_conv_3x3', 4), ('eca', 3)], reduce_concat=range(2, 6))
2023-11-03 23:44:23,995 train 550 5.976517e-01 72.232305
2023-11-03 23:44:23,997 Cell_0 = Normal_Genotype(normal=[('sep_conv_3x3', 1), ('cbam', 0), ('max_pool_3x3', 1), ('skip_connect', 2), ('avg_pool_3x3', 3), ('cbam', 1), ('dil_conv_3x3', 4), ('avg_pool_3x3', 3)], normal_concat=range(2, 6))
2023-11-03 23:44:23,997 Cell_1 = Normal_Genotype(normal=[('cbam', 0), ('skip_connect', 1), ('eca', 2), ('sep_conv_3x3', 0), ('cbam', 3), ('sep_conv_3x3', 2), ('skip_connect', 3), ('skip_connect', 4)], normal_concat=range(2, 6))
2023-11-03 23:44:23,997 Cell_2 = Reduce_Genotype(reduce=[('dil_conv_3x3', 0), ('skip_connect', 1), ('max_pool_3x3', 2), ('avg_pool_3x3', 0), ('avg_pool_3x3', 3), ('eca', 0), ('sep_conv_3x3', 4), ('dil_conv_3x3', 3)], reduce_concat=range(2, 6))
2023-11-03 23:44:23,997 Cell_3 = Normal_Genotype(normal=[('sep_conv_3x3', 1), ('avg_pool_3x3', 0), ('max_pool_3x3', 2), ('cbam', 0), ('avg_pool_3x3', 3), ('eca', 2), ('cbam', 4), ('sep_conv_3x3', 3)], normal_concat=range(2, 6))
2023-11-03 23:44:23,997 Cell_4 = Normal_Genotype(normal=[('skip_connect', 1), ('dil_conv_3x3', 0), ('sep_conv_3x3', 1), ('eca', 0), ('avg_pool_3x3', 3), ('skip_connect', 1), ('max_pool_3x3', 2), ('eca', 4)], normal_concat=range(2, 6))
2023-11-03 23:44:23,997 Cell_5 = Reduce_Genotype(reduce=[('avg_pool_3x3', 0), ('sep_conv_3x3', 1), ('avg_pool_3x3', 2), ('sep_conv_3x3', 0), ('eca', 3), ('eca', 2), ('dil_conv_3x3', 4), ('eca', 3)], reduce_concat=range(2, 6))
2023-11-03 23:48:45,936 train 600 5.962396e-01 72.462562
2023-11-03 23:48:45,938 Cell_0 = Normal_Genotype(normal=[('sep_conv_3x3', 1), ('cbam', 0), ('max_pool_3x3', 1), ('skip_connect', 2), ('avg_pool_3x3', 3), ('cbam', 1), ('dil_conv_3x3', 4), ('avg_pool_3x3', 3)], normal_concat=range(2, 6))
2023-11-03 23:48:45,938 Cell_1 = Normal_Genotype(normal=[('cbam', 0), ('skip_connect', 1), ('eca', 2), ('sep_conv_3x3', 0), ('cbam', 3), ('sep_conv_3x3', 2), ('skip_connect', 3), ('skip_connect', 4)], normal_concat=range(2, 6))
2023-11-03 23:48:45,939 Cell_2 = Reduce_Genotype(reduce=[('dil_conv_3x3', 0), ('skip_connect', 1), ('max_pool_3x3', 2), ('avg_pool_3x3', 0), ('avg_pool_3x3', 3), ('eca', 0), ('sep_conv_3x3', 4), ('dil_conv_3x3', 3)], reduce_concat=range(2, 6))
2023-11-03 23:48:45,939 Cell_3 = Normal_Genotype(normal=[('sep_conv_3x3', 1), ('avg_pool_3x3', 0), ('max_pool_3x3', 2), ('cbam', 0), ('avg_pool_3x3', 3), ('eca', 2), ('cbam', 4), ('sep_conv_3x3', 3)], normal_concat=range(2, 6))
2023-11-03 23:48:45,939 Cell_4 = Normal_Genotype(normal=[('skip_connect', 1), ('dil_conv_3x3', 0), ('sep_conv_3x3', 1), ('eca', 0), ('avg_pool_3x3', 3), ('avg_pool_3x3', 1), ('max_pool_3x3', 2), ('eca', 4)], normal_concat=range(2, 6))
2023-11-03 23:48:45,939 Cell_5 = Reduce_Genotype(reduce=[('avg_pool_3x3', 0), ('sep_conv_3x3', 1), ('avg_pool_3x3', 2), ('sep_conv_3x3', 0), ('eca', 3), ('eca', 2), ('dil_conv_3x3', 4), ('eca', 3)], reduce_concat=range(2, 6))
2023-11-03 23:52:58,427 train 650 6.008378e-01 72.273425
2023-11-03 23:52:58,429 Cell_0 = Normal_Genotype(normal=[('sep_conv_3x3', 1), ('cbam', 0), ('max_pool_3x3', 1), ('skip_connect', 2), ('avg_pool_3x3', 3), ('cbam', 1), ('dil_conv_3x3', 4), ('avg_pool_3x3', 3)], normal_concat=range(2, 6))
2023-11-03 23:52:58,430 Cell_1 = Normal_Genotype(normal=[('cbam', 0), ('skip_connect', 1), ('eca', 2), ('sep_conv_3x3', 0), ('cbam', 3), ('cbam', 0), ('skip_connect', 3), ('skip_connect', 4)], normal_concat=range(2, 6))
2023-11-03 23:52:58,430 Cell_2 = Reduce_Genotype(reduce=[('dil_conv_3x3', 0), ('skip_connect', 1), ('max_pool_3x3', 2), ('avg_pool_3x3', 0), ('avg_pool_3x3', 3), ('eca', 0), ('sep_conv_3x3', 4), ('dil_conv_3x3', 3)], reduce_concat=range(2, 6))
2023-11-03 23:52:58,430 Cell_3 = Normal_Genotype(normal=[('sep_conv_3x3', 1), ('avg_pool_3x3', 0), ('max_pool_3x3', 2), ('cbam', 0), ('avg_pool_3x3', 3), ('eca', 2), ('cbam', 4), ('sep_conv_3x3', 3)], normal_concat=range(2, 6))
2023-11-03 23:52:58,430 Cell_4 = Normal_Genotype(normal=[('skip_connect', 1), ('dil_conv_3x3', 0), ('sep_conv_3x3', 1), ('eca', 0), ('avg_pool_3x3', 3), ('avg_pool_3x3', 1), ('max_pool_3x3', 2), ('eca', 4)], normal_concat=range(2, 6))
2023-11-03 23:52:58,430 Cell_5 = Reduce_Genotype(reduce=[('avg_pool_3x3', 0), ('sep_conv_3x3', 1), ('avg_pool_3x3', 2), ('sep_conv_3x3', 0), ('eca', 2), ('eca', 3), ('dil_conv_3x3', 4), ('eca', 3)], reduce_concat=range(2, 6))
2023-11-03 23:57:02,009 train_acc 72.214286
2023-11-03 23:57:04,981 valid 000 3.941524e+00 50.000000
2023-11-03 23:57:04,982 Cell_0 = Normal_Genotype(normal=[('max_pool_3x3', 0), ('dil_conv_3x3', 1), ('cbam', 1), ('cbam', 0), ('skip_connect', 3), ('cbam', 1), ('avg_pool_3x3', 3), ('cbam', 4)], normal_concat=range(2, 6))
2023-11-03 23:57:04,982 Cell_1 = Normal_Genotype(normal=[('cbam', 0), ('max_pool_3x3', 1), ('skip_connect', 0), ('skip_connect', 1), ('sep_conv_3x3', 3), ('max_pool_3x3', 2), ('dil_conv_3x3', 3), ('max_pool_3x3', 4)], normal_concat=range(2, 6))
2023-11-03 23:57:04,982 Cell_2 = Reduce_Genotype(reduce=[('dil_conv_3x3', 0), ('max_pool_3x3', 1), ('eca', 0), ('eca', 2), ('avg_pool_3x3', 3), ('sep_conv_3x3', 0), ('eca', 4), ('cbam', 3)], reduce_concat=range(2, 6))
2023-11-03 23:57:04,982 Cell_3 = Normal_Genotype(normal=[('avg_pool_3x3', 0), ('sep_conv_3x3', 1), ('eca', 2), ('dil_conv_3x3', 1), ('avg_pool_3x3', 3), ('eca', 0), ('cbam', 4), ('sep_conv_3x3', 3)], normal_concat=range(2, 6))
2023-11-03 23:57:04,982 Cell_4 = Normal_Genotype(normal=[('skip_connect', 1), ('skip_connect', 0), ('sep_conv_3x3', 1), ('max_pool_3x3', 0), ('avg_pool_3x3', 3), ('max_pool_3x3', 2), ('eca', 4), ('skip_connect', 3)], normal_concat=range(2, 6))
2023-11-03 23:57:04,982 Cell_5 = Reduce_Genotype(reduce=[('cbam', 0), ('sep_conv_3x3', 1), ('sep_conv_3x3', 0), ('avg_pool_3x3', 2), ('eca', 3), ('sep_conv_3x3', 2), ('dil_conv_3x3', 4), ('cbam', 2)], reduce_concat=range(2, 6))
2023-11-03 23:57:49,826 valid 050 3.720622e+00 56.862745
2023-11-03 23:57:49,828 Cell_0 = Normal_Genotype(normal=[('max_pool_3x3', 0), ('dil_conv_3x3', 1), ('cbam', 1), ('cbam', 0), ('skip_connect', 3), ('cbam', 1), ('avg_pool_3x3', 3), ('cbam', 4)], normal_concat=range(2, 6))
2023-11-03 23:57:49,829 Cell_1 = Normal_Genotype(normal=[('cbam', 0), ('max_pool_3x3', 1), ('skip_connect', 0), ('skip_connect', 1), ('sep_conv_3x3', 3), ('max_pool_3x3', 2), ('dil_conv_3x3', 3), ('max_pool_3x3', 4)], normal_concat=range(2, 6))
2023-11-03 23:57:49,829 Cell_2 = Reduce_Genotype(reduce=[('dil_conv_3x3', 0), ('max_pool_3x3', 1), ('eca', 0), ('eca', 2), ('avg_pool_3x3', 3), ('sep_conv_3x3', 0), ('skip_connect', 4), ('cbam', 3)], reduce_concat=range(2, 6))
2023-11-03 23:57:49,829 Cell_3 = Normal_Genotype(normal=[('avg_pool_3x3', 0), ('sep_conv_3x3', 1), ('eca', 2), ('dil_conv_3x3', 1), ('avg_pool_3x3', 3), ('eca', 0), ('cbam', 4), ('sep_conv_3x3', 3)], normal_concat=range(2, 6))
2023-11-03 23:57:49,829 Cell_4 = Normal_Genotype(normal=[('skip_connect', 1), ('skip_connect', 0), ('sep_conv_3x3', 1), ('max_pool_3x3', 0), ('avg_pool_3x3', 3), ('max_pool_3x3', 2), ('eca', 4), ('skip_connect', 3)], normal_concat=range(2, 6))
2023-11-03 23:57:49,829 Cell_5 = Reduce_Genotype(reduce=[('cbam', 0), ('sep_conv_3x3', 1), ('sep_conv_3x3', 0), ('avg_pool_3x3', 2), ('eca', 3), ('sep_conv_3x3', 2), ('dil_conv_3x3', 4), ('cbam', 2)], reduce_concat=range(2, 6))
2023-11-03 23:58:34,153 valid 100 3.799231e+00 55.940594
2023-11-03 23:58:34,155 Cell_0 = Normal_Genotype(normal=[('max_pool_3x3', 0), ('dil_conv_3x3', 1), ('cbam', 1), ('cbam', 0), ('skip_connect', 3), ('cbam', 1), ('avg_pool_3x3', 3), ('cbam', 4)], normal_concat=range(2, 6))
2023-11-03 23:58:34,155 Cell_1 = Normal_Genotype(normal=[('cbam', 0), ('max_pool_3x3', 1), ('skip_connect', 0), ('skip_connect', 1), ('sep_conv_3x3', 3), ('max_pool_3x3', 2), ('dil_conv_3x3', 3), ('max_pool_3x3', 4)], normal_concat=range(2, 6))
2023-11-03 23:58:34,155 Cell_2 = Reduce_Genotype(reduce=[('dil_conv_3x3', 0), ('max_pool_3x3', 1), ('eca', 0), ('eca', 2), ('avg_pool_3x3', 3), ('sep_conv_3x3', 0), ('skip_connect', 4), ('cbam', 3)], reduce_concat=range(2, 6))
2023-11-03 23:58:34,155 Cell_3 = Normal_Genotype(normal=[('avg_pool_3x3', 0), ('sep_conv_3x3', 1), ('eca', 2), ('dil_conv_3x3', 1), ('avg_pool_3x3', 3), ('eca', 0), ('cbam', 4), ('sep_conv_3x3', 3)], normal_concat=range(2, 6))
2023-11-03 23:58:34,155 Cell_4 = Normal_Genotype(normal=[('skip_connect', 1), ('skip_connect', 0), ('sep_conv_3x3', 1), ('max_pool_3x3', 0), ('avg_pool_3x3', 3), ('max_pool_3x3', 2), ('eca', 4), ('skip_connect', 3)], normal_concat=range(2, 6))
2023-11-03 23:58:34,155 Cell_5 = Reduce_Genotype(reduce=[('cbam', 0), ('sep_conv_3x3', 1), ('sep_conv_3x3', 0), ('avg_pool_3x3', 2), ('eca', 3), ('sep_conv_3x3', 2), ('dil_conv_3x3', 4), ('cbam', 2)], reduce_concat=range(2, 6))
2023-11-03 23:59:18,292 valid 150 3.732912e+00 56.622517
2023-11-03 23:59:18,293 Cell_0 = Normal_Genotype(normal=[('max_pool_3x3', 0), ('dil_conv_3x3', 1), ('cbam', 1), ('cbam', 0), ('skip_connect', 3), ('cbam', 1), ('avg_pool_3x3', 3), ('cbam', 4)], normal_concat=range(2, 6))
2023-11-03 23:59:18,293 Cell_1 = Normal_Genotype(normal=[('cbam', 0), ('max_pool_3x3', 1), ('skip_connect', 0), ('skip_connect', 1), ('sep_conv_3x3', 3), ('max_pool_3x3', 2), ('dil_conv_3x3', 3), ('max_pool_3x3', 4)], normal_concat=range(2, 6))
2023-11-03 23:59:18,293 Cell_2 = Reduce_Genotype(reduce=[('dil_conv_3x3', 0), ('max_pool_3x3', 1), ('eca', 0), ('eca', 2), ('avg_pool_3x3', 3), ('sep_conv_3x3', 0), ('skip_connect', 4), ('cbam', 3)], reduce_concat=range(2, 6))
2023-11-03 23:59:18,294 Cell_3 = Normal_Genotype(normal=[('avg_pool_3x3', 0), ('sep_conv_3x3', 1), ('eca', 2), ('dil_conv_3x3', 1), ('avg_pool_3x3', 3), ('eca', 0), ('cbam', 4), ('sep_conv_3x3', 3)], normal_concat=range(2, 6))
2023-11-03 23:59:18,294 Cell_4 = Normal_Genotype(normal=[('skip_connect', 1), ('skip_connect', 0), ('sep_conv_3x3', 1), ('max_pool_3x3', 0), ('avg_pool_3x3', 3), ('max_pool_3x3', 2), ('eca', 4), ('skip_connect', 3)], normal_concat=range(2, 6))
2023-11-03 23:59:18,294 Cell_5 = Reduce_Genotype(reduce=[('cbam', 0), ('sep_conv_3x3', 1), ('sep_conv_3x3', 0), ('avg_pool_3x3', 2), ('eca', 3), ('sep_conv_3x3', 2), ('dil_conv_3x3', 4), ('cbam', 2)], reduce_concat=range(2, 6))
2023-11-04 00:00:02,879 valid 200 3.552895e+00 58.706468
2023-11-04 00:00:02,881 Cell_0 = Normal_Genotype(normal=[('max_pool_3x3', 0), ('dil_conv_3x3', 1), ('cbam', 1), ('cbam', 0), ('skip_connect', 3), ('cbam', 1), ('avg_pool_3x3', 3), ('cbam', 4)], normal_concat=range(2, 6))
2023-11-04 00:00:02,882 Cell_1 = Normal_Genotype(normal=[('cbam', 0), ('max_pool_3x3', 1), ('skip_connect', 0), ('skip_connect', 1), ('sep_conv_3x3', 3), ('max_pool_3x3', 2), ('dil_conv_3x3', 3), ('max_pool_3x3', 4)], normal_concat=range(2, 6))
2023-11-04 00:00:02,882 Cell_2 = Reduce_Genotype(reduce=[('dil_conv_3x3', 0), ('max_pool_3x3', 1), ('eca', 0), ('eca', 2), ('avg_pool_3x3', 3), ('sep_conv_3x3', 0), ('skip_connect', 4), ('cbam', 3)], reduce_concat=range(2, 6))
2023-11-04 00:00:02,882 Cell_3 = Normal_Genotype(normal=[('avg_pool_3x3', 0), ('sep_conv_3x3', 1), ('eca', 2), ('dil_conv_3x3', 1), ('avg_pool_3x3', 3), ('eca', 0), ('cbam', 4), ('sep_conv_3x3', 3)], normal_concat=range(2, 6))
2023-11-04 00:00:02,882 Cell_4 = Normal_Genotype(normal=[('skip_connect', 1), ('skip_connect', 0), ('sep_conv_3x3', 1), ('max_pool_3x3', 0), ('avg_pool_3x3', 3), ('max_pool_3x3', 2), ('eca', 4), ('skip_connect', 3)], normal_concat=range(2, 6))
2023-11-04 00:00:02,882 Cell_5 = Reduce_Genotype(reduce=[('cbam', 0), ('sep_conv_3x3', 1), ('sep_conv_3x3', 0), ('avg_pool_3x3', 2), ('eca', 3), ('sep_conv_3x3', 2), ('dil_conv_3x3', 4), ('cbam', 2)], reduce_concat=range(2, 6))
2023-11-04 00:00:47,119 valid 250 3.671458e+00 57.370518
2023-11-04 00:00:47,120 Cell_0 = Normal_Genotype(normal=[('max_pool_3x3', 0), ('dil_conv_3x3', 1), ('cbam', 1), ('cbam', 0), ('skip_connect', 3), ('cbam', 1), ('avg_pool_3x3', 3), ('cbam', 4)], normal_concat=range(2, 6))
2023-11-04 00:00:47,120 Cell_1 = Normal_Genotype(normal=[('cbam', 0), ('max_pool_3x3', 1), ('skip_connect', 0), ('skip_connect', 1), ('sep_conv_3x3', 3), ('max_pool_3x3', 2), ('dil_conv_3x3', 3), ('max_pool_3x3', 4)], normal_concat=range(2, 6))
2023-11-04 00:00:47,121 Cell_2 = Reduce_Genotype(reduce=[('dil_conv_3x3', 0), ('max_pool_3x3', 1), ('eca', 0), ('eca', 2), ('avg_pool_3x3', 3), ('sep_conv_3x3', 0), ('skip_connect', 4), ('cbam', 3)], reduce_concat=range(2, 6))
2023-11-04 00:00:47,121 Cell_3 = Normal_Genotype(normal=[('avg_pool_3x3', 0), ('sep_conv_3x3', 1), ('eca', 2), ('dil_conv_3x3', 1), ('avg_pool_3x3', 3), ('eca', 0), ('cbam', 4), ('sep_conv_3x3', 3)], normal_concat=range(2, 6))
2023-11-04 00:00:47,121 Cell_4 = Normal_Genotype(normal=[('skip_connect', 1), ('skip_connect', 0), ('sep_conv_3x3', 1), ('max_pool_3x3', 0), ('avg_pool_3x3', 3), ('max_pool_3x3', 2), ('eca', 4), ('skip_connect', 3)], normal_concat=range(2, 6))
2023-11-04 00:00:47,121 Cell_5 = Reduce_Genotype(reduce=[('cbam', 0), ('sep_conv_3x3', 1), ('sep_conv_3x3', 0), ('avg_pool_3x3', 2), ('eca', 3), ('sep_conv_3x3', 2), ('dil_conv_3x3', 4), ('cbam', 2)], reduce_concat=range(2, 6))
2023-11-04 00:01:30,768 valid_acc 57.666667
2023-11-04 00:01:31,210 epoch 2 lr 2.370082e-02
2023-11-04 00:01:36,717 train 000 5.319298e-01 100.000000
2023-11-04 00:01:36,719 Cell_0 = Normal_Genotype(normal=[('avg_pool_3x3', 1), ('sep_conv_3x3', 0), ('max_pool_3x3', 2), ('max_pool_3x3', 1), ('avg_pool_3x3', 3), ('avg_pool_3x3', 2), ('dil_conv_3x3', 4), ('avg_pool_3x3', 3)], normal_concat=range(2, 6))
2023-11-04 00:01:36,719 Cell_1 = Normal_Genotype(normal=[('cbam', 0), ('skip_connect', 1), ('eca', 2), ('sep_conv_3x3', 0), ('cbam', 3), ('sep_conv_3x3', 2), ('skip_connect', 4), ('skip_connect', 3)], normal_concat=range(2, 6))
2023-11-04 00:01:36,719 Cell_2 = Reduce_Genotype(reduce=[('dil_conv_3x3', 0), ('skip_connect', 1), ('avg_pool_3x3', 2), ('avg_pool_3x3', 0), ('avg_pool_3x3', 3), ('eca', 0), ('sep_conv_3x3', 4), ('dil_conv_3x3', 3)], reduce_concat=range(2, 6))
2023-11-04 00:01:36,719 Cell_3 = Normal_Genotype(normal=[('sep_conv_3x3', 1), ('avg_pool_3x3', 0), ('skip_connect', 2), ('cbam', 0), ('avg_pool_3x3', 3), ('eca', 2), ('cbam', 4), ('sep_conv_3x3', 3)], normal_concat=range(2, 6))
2023-11-04 00:01:36,719 Cell_4 = Normal_Genotype(normal=[('skip_connect', 1), ('dil_conv_3x3', 0), ('sep_conv_3x3', 1), ('eca', 0), ('avg_pool_3x3', 3), ('avg_pool_3x3', 1), ('max_pool_3x3', 2), ('eca', 4)], normal_concat=range(2, 6))
2023-11-04 00:01:36,720 Cell_5 = Reduce_Genotype(reduce=[('avg_pool_3x3', 0), ('sep_conv_3x3', 1), ('avg_pool_3x3', 2), ('sep_conv_3x3', 0), ('eca', 2), ('eca', 3), ('dil_conv_3x3', 4), ('eca', 3)], reduce_concat=range(2, 6))
2023-11-04 00:05:55,791 train 050 6.117838e-01 70.588235
2023-11-04 00:05:55,793 Cell_0 = Normal_Genotype(normal=[('sep_conv_3x3', 1), ('cbam', 0), ('max_pool_3x3', 1), ('max_pool_3x3', 2), ('avg_pool_3x3', 3), ('cbam', 1), ('avg_pool_3x3', 3), ('cbam', 4)], normal_concat=range(2, 6))
2023-11-04 00:05:55,793 Cell_1 = Normal_Genotype(normal=[('cbam', 0), ('skip_connect', 1), ('eca', 2), ('sep_conv_3x3', 0), ('cbam', 3), ('sep_conv_3x3', 2), ('skip_connect', 3), ('skip_connect', 4)], normal_concat=range(2, 6))
2023-11-04 00:05:55,793 Cell_2 = Reduce_Genotype(reduce=[('dil_conv_3x3', 0), ('skip_connect', 1), ('avg_pool_3x3', 2), ('avg_pool_3x3', 0), ('avg_pool_3x3', 3), ('eca', 0), ('sep_conv_3x3', 4), ('dil_conv_3x3', 3)], reduce_concat=range(2, 6))
2023-11-04 00:05:55,793 Cell_3 = Normal_Genotype(normal=[('sep_conv_3x3', 1), ('avg_pool_3x3', 0), ('skip_connect', 2), ('cbam', 0), ('avg_pool_3x3', 3), ('eca', 2), ('cbam', 4), ('sep_conv_3x3', 3)], normal_concat=range(2, 6))
2023-11-04 00:05:55,793 Cell_4 = Normal_Genotype(normal=[('skip_connect', 1), ('dil_conv_3x3', 0), ('sep_conv_3x3', 1), ('eca', 0), ('avg_pool_3x3', 3), ('avg_pool_3x3', 1), ('max_pool_3x3', 2), ('eca', 4)], normal_concat=range(2, 6))
2023-11-04 00:05:55,794 Cell_5 = Reduce_Genotype(reduce=[('avg_pool_3x3', 0), ('sep_conv_3x3', 1), ('avg_pool_3x3', 2), ('sep_conv_3x3', 0), ('eca', 2), ('eca', 3), ('dil_conv_3x3', 4), ('eca', 3)], reduce_concat=range(2, 6))
2023-11-04 00:10:16,182 train 100 5.904548e-01 72.772277
2023-11-04 00:10:16,184 Cell_0 = Normal_Genotype(normal=[('sep_conv_3x3', 1), ('cbam', 0), ('max_pool_3x3', 1), ('skip_connect', 2), ('avg_pool_3x3', 3), ('cbam', 1), ('avg_pool_3x3', 3), ('cbam', 4)], normal_concat=range(2, 6))
2023-11-04 00:10:16,184 Cell_1 = Normal_Genotype(normal=[('cbam', 0), ('skip_connect', 1), ('eca', 2), ('sep_conv_3x3', 0), ('cbam', 3), ('cbam', 0), ('skip_connect', 3), ('skip_connect', 4)], normal_concat=range(2, 6))
2023-11-04 00:10:16,184 Cell_2 = Reduce_Genotype(reduce=[('dil_conv_3x3', 0), ('skip_connect', 1), ('avg_pool_3x3', 2), ('avg_pool_3x3', 0), ('avg_pool_3x3', 3), ('eca', 0), ('sep_conv_3x3', 4), ('dil_conv_3x3', 3)], reduce_concat=range(2, 6))
2023-11-04 00:10:16,184 Cell_3 = Normal_Genotype(normal=[('sep_conv_3x3', 1), ('avg_pool_3x3', 0), ('skip_connect', 2), ('cbam', 0), ('avg_pool_3x3', 3), ('eca', 2), ('cbam', 4), ('sep_conv_3x3', 3)], normal_concat=range(2, 6))
2023-11-04 00:10:16,185 Cell_4 = Normal_Genotype(normal=[('skip_connect', 1), ('dil_conv_3x3', 0), ('sep_conv_3x3', 1), ('dil_conv_3x3', 0), ('avg_pool_3x3', 3), ('avg_pool_3x3', 1), ('max_pool_3x3', 2), ('eca', 4)], normal_concat=range(2, 6))
2023-11-04 00:10:16,185 Cell_5 = Reduce_Genotype(reduce=[('avg_pool_3x3', 0), ('sep_conv_3x3', 1), ('avg_pool_3x3', 2), ('sep_conv_3x3', 0), ('eca', 2), ('eca', 3), ('dil_conv_3x3', 4), ('eca', 3)], reduce_concat=range(2, 6))
2023-11-04 00:14:26,261 train 150 5.742835e-01 74.503311
2023-11-04 00:14:26,262 Cell_0 = Normal_Genotype(normal=[('sep_conv_3x3', 1), ('cbam', 0), ('max_pool_3x3', 1), ('skip_connect', 2), ('avg_pool_3x3', 3), ('cbam', 1), ('avg_pool_3x3', 3), ('dil_conv_3x3', 4)], normal_concat=range(2, 6))
2023-11-04 00:14:26,262 Cell_1 = Normal_Genotype(normal=[('cbam', 0), ('skip_connect', 1), ('eca', 2), ('sep_conv_3x3', 0), ('cbam', 3), ('cbam', 0), ('skip_connect', 3), ('skip_connect', 4)], normal_concat=range(2, 6))
2023-11-04 00:14:26,262 Cell_2 = Reduce_Genotype(reduce=[('dil_conv_3x3', 0), ('skip_connect', 1), ('avg_pool_3x3', 2), ('avg_pool_3x3', 0), ('avg_pool_3x3', 3), ('eca', 0), ('sep_conv_3x3', 4), ('dil_conv_3x3', 3)], reduce_concat=range(2, 6))
2023-11-04 00:14:26,263 Cell_3 = Normal_Genotype(normal=[('sep_conv_3x3', 1), ('avg_pool_3x3', 0), ('skip_connect', 2), ('cbam', 0), ('avg_pool_3x3', 3), ('eca', 2), ('cbam', 4), ('sep_conv_3x3', 3)], normal_concat=range(2, 6))
2023-11-04 00:14:26,263 Cell_4 = Normal_Genotype(normal=[('skip_connect', 1), ('dil_conv_3x3', 0), ('sep_conv_3x3', 1), ('dil_conv_3x3', 0), ('avg_pool_3x3', 3), ('avg_pool_3x3', 1), ('max_pool_3x3', 2), ('eca', 4)], normal_concat=range(2, 6))
2023-11-04 00:14:26,263 Cell_5 = Reduce_Genotype(reduce=[('avg_pool_3x3', 0), ('sep_conv_3x3', 1), ('avg_pool_3x3', 2), ('sep_conv_3x3', 0), ('eca', 2), ('eca', 3), ('dil_conv_3x3', 4), ('eca', 3)], reduce_concat=range(2, 6))
2023-11-04 00:18:36,246 train 200 5.698283e-01 74.626866
2023-11-04 00:18:36,248 Cell_0 = Normal_Genotype(normal=[('sep_conv_3x3', 1), ('cbam', 0), ('max_pool_3x3', 1), ('skip_connect', 2), ('avg_pool_3x3', 3), ('cbam', 1), ('avg_pool_3x3', 3), ('dil_conv_3x3', 4)], normal_concat=range(2, 6))
2023-11-04 00:18:36,248 Cell_1 = Normal_Genotype(normal=[('cbam', 0), ('skip_connect', 1), ('eca', 2), ('sep_conv_3x3', 0), ('cbam', 3), ('cbam', 0), ('skip_connect', 3), ('skip_connect', 4)], normal_concat=range(2, 6))
2023-11-04 00:18:36,248 Cell_2 = Reduce_Genotype(reduce=[('dil_conv_3x3', 0), ('skip_connect', 1), ('avg_pool_3x3', 2), ('avg_pool_3x3', 0), ('avg_pool_3x3', 3), ('eca', 0), ('sep_conv_3x3', 4), ('dil_conv_3x3', 3)], reduce_concat=range(2, 6))
2023-11-04 00:18:36,248 Cell_3 = Normal_Genotype(normal=[('sep_conv_3x3', 1), ('avg_pool_3x3', 0), ('skip_connect', 2), ('cbam', 0), ('avg_pool_3x3', 3), ('eca', 2), ('cbam', 4), ('sep_conv_3x3', 3)], normal_concat=range(2, 6))
2023-11-04 00:18:36,248 Cell_4 = Normal_Genotype(normal=[('skip_connect', 1), ('dil_conv_3x3', 0), ('sep_conv_3x3', 1), ('dil_conv_3x3', 0), ('avg_pool_3x3', 3), ('avg_pool_3x3', 1), ('max_pool_3x3', 2), ('eca', 4)], normal_concat=range(2, 6))
2023-11-04 00:18:36,248 Cell_5 = Reduce_Genotype(reduce=[('avg_pool_3x3', 0), ('sep_conv_3x3', 1), ('avg_pool_3x3', 2), ('sep_conv_3x3', 0), ('eca', 2), ('eca', 3), ('dil_conv_3x3', 4), ('eca', 3)], reduce_concat=range(2, 6))
2023-11-04 00:22:50,581 train 250 5.814520e-01 73.904382
2023-11-04 00:22:50,583 Cell_0 = Normal_Genotype(normal=[('sep_conv_3x3', 1), ('cbam', 0), ('max_pool_3x3', 1), ('skip_connect', 2), ('avg_pool_3x3', 3), ('cbam', 1), ('avg_pool_3x3', 3), ('dil_conv_3x3', 4)], normal_concat=range(2, 6))
2023-11-04 00:22:50,583 Cell_1 = Normal_Genotype(normal=[('cbam', 0), ('skip_connect', 1), ('eca', 2), ('sep_conv_3x3', 0), ('cbam', 3), ('cbam', 0), ('skip_connect', 3), ('skip_connect', 4)], normal_concat=range(2, 6))
2023-11-04 00:22:50,583 Cell_2 = Reduce_Genotype(reduce=[('dil_conv_3x3', 0), ('skip_connect', 1), ('avg_pool_3x3', 2), ('avg_pool_3x3', 0), ('avg_pool_3x3', 3), ('eca', 0), ('sep_conv_3x3', 4), ('dil_conv_3x3', 3)], reduce_concat=range(2, 6))
2023-11-04 00:22:50,583 Cell_3 = Normal_Genotype(normal=[('sep_conv_3x3', 1), ('avg_pool_3x3', 0), ('skip_connect', 2), ('cbam', 0), ('avg_pool_3x3', 3), ('eca', 2), ('cbam', 4), ('sep_conv_3x3', 3)], normal_concat=range(2, 6))
2023-11-04 00:22:50,584 Cell_4 = Normal_Genotype(normal=[('skip_connect', 1), ('dil_conv_3x3', 0), ('sep_conv_3x3', 1), ('dil_conv_3x3', 0), ('avg_pool_3x3', 3), ('avg_pool_3x3', 1), ('max_pool_3x3', 2), ('eca', 4)], normal_concat=range(2, 6))
2023-11-04 00:22:50,584 Cell_5 = Reduce_Genotype(reduce=[('avg_pool_3x3', 0), ('sep_conv_3x3', 1), ('avg_pool_3x3', 2), ('sep_conv_3x3', 0), ('eca', 2), ('eca', 3), ('dil_conv_3x3', 4), ('eca', 3)], reduce_concat=range(2, 6))
2023-11-04 00:27:03,376 train 300 5.747181e-01 74.418605
2023-11-04 00:27:03,378 Cell_0 = Normal_Genotype(normal=[('sep_conv_3x3', 1), ('cbam', 0), ('max_pool_3x3', 1), ('skip_connect', 2), ('avg_pool_3x3', 3), ('cbam', 1), ('avg_pool_3x3', 3), ('dil_conv_3x3', 4)], normal_concat=range(2, 6))
2023-11-04 00:27:03,378 Cell_1 = Normal_Genotype(normal=[('cbam', 0), ('skip_connect', 1), ('eca', 2), ('sep_conv_3x3', 0), ('cbam', 3), ('cbam', 0), ('skip_connect', 3), ('skip_connect', 4)], normal_concat=range(2, 6))
2023-11-04 00:27:03,378 Cell_2 = Reduce_Genotype(reduce=[('dil_conv_3x3', 0), ('skip_connect', 1), ('avg_pool_3x3', 2), ('avg_pool_3x3', 0), ('avg_pool_3x3', 3), ('eca', 0), ('sep_conv_3x3', 4), ('dil_conv_3x3', 3)], reduce_concat=range(2, 6))
2023-11-04 00:27:03,378 Cell_3 = Normal_Genotype(normal=[('sep_conv_3x3', 1), ('avg_pool_3x3', 0), ('skip_connect', 2), ('cbam', 0), ('avg_pool_3x3', 3), ('eca', 2), ('cbam', 4), ('sep_conv_3x3', 3)], normal_concat=range(2, 6))
2023-11-04 00:27:03,378 Cell_4 = Normal_Genotype(normal=[('skip_connect', 1), ('dil_conv_3x3', 0), ('sep_conv_3x3', 1), ('dil_conv_3x3', 0), ('avg_pool_3x3', 3), ('avg_pool_3x3', 1), ('max_pool_3x3', 2), ('eca', 4)], normal_concat=range(2, 6))
2023-11-04 00:27:03,378 Cell_5 = Reduce_Genotype(reduce=[('avg_pool_3x3', 0), ('sep_conv_3x3', 1), ('avg_pool_3x3', 2), ('sep_conv_3x3', 0), ('eca', 2), ('eca', 3), ('dil_conv_3x3', 4), ('eca', 3)], reduce_concat=range(2, 6))
2023-11-04 00:31:13,869 train 350 5.849692e-01 73.361823
2023-11-04 00:31:13,871 Cell_0 = Normal_Genotype(normal=[('sep_conv_3x3', 1), ('cbam', 0), ('max_pool_3x3', 1), ('skip_connect', 2), ('avg_pool_3x3', 3), ('cbam', 1), ('avg_pool_3x3', 3), ('dil_conv_3x3', 4)], normal_concat=range(2, 6))
2023-11-04 00:31:13,871 Cell_1 = Normal_Genotype(normal=[('cbam', 0), ('skip_connect', 1), ('eca', 2), ('sep_conv_3x3', 0), ('cbam', 3), ('cbam', 0), ('skip_connect', 3), ('skip_connect', 4)], normal_concat=range(2, 6))
2023-11-04 00:31:13,871 Cell_2 = Reduce_Genotype(reduce=[('dil_conv_3x3', 0), ('skip_connect', 1), ('avg_pool_3x3', 2), ('avg_pool_3x3', 0), ('avg_pool_3x3', 3), ('eca', 0), ('sep_conv_3x3', 4), ('dil_conv_3x3', 3)], reduce_concat=range(2, 6))
2023-11-04 00:31:13,871 Cell_3 = Normal_Genotype(normal=[('sep_conv_3x3', 1), ('avg_pool_3x3', 0), ('skip_connect', 2), ('cbam', 0), ('avg_pool_3x3', 3), ('eca', 2), ('cbam', 4), ('sep_conv_3x3', 3)], normal_concat=range(2, 6))
2023-11-04 00:31:13,871 Cell_4 = Normal_Genotype(normal=[('skip_connect', 1), ('dil_conv_3x3', 0), ('sep_conv_3x3', 1), ('dil_conv_3x3', 0), ('avg_pool_3x3', 3), ('avg_pool_3x3', 1), ('max_pool_3x3', 2), ('eca', 4)], normal_concat=range(2, 6))
2023-11-04 00:31:13,871 Cell_5 = Reduce_Genotype(reduce=[('avg_pool_3x3', 0), ('sep_conv_3x3', 1), ('avg_pool_3x3', 2), ('sep_conv_3x3', 0), ('eca', 2), ('eca', 3), ('dil_conv_3x3', 4), ('eca', 3)], reduce_concat=range(2, 6))
2023-11-04 00:35:25,495 train 400 5.821312e-01 73.815461
2023-11-04 00:35:25,497 Cell_0 = Normal_Genotype(normal=[('sep_conv_3x3', 1), ('cbam', 0), ('max_pool_3x3', 1), ('skip_connect', 2), ('avg_pool_3x3', 3), ('cbam', 1), ('avg_pool_3x3', 3), ('dil_conv_3x3', 4)], normal_concat=range(2, 6))
2023-11-04 00:35:25,497 Cell_1 = Normal_Genotype(normal=[('cbam', 0), ('skip_connect', 1), ('eca', 2), ('sep_conv_3x3', 0), ('cbam', 3), ('cbam', 0), ('skip_connect', 3), ('skip_connect', 4)], normal_concat=range(2, 6))
2023-11-04 00:35:25,497 Cell_2 = Reduce_Genotype(reduce=[('dil_conv_3x3', 0), ('skip_connect', 1), ('avg_pool_3x3', 2), ('avg_pool_3x3', 0), ('avg_pool_3x3', 3), ('eca', 0), ('sep_conv_3x3', 4), ('dil_conv_3x3', 3)], reduce_concat=range(2, 6))
2023-11-04 00:35:25,497 Cell_3 = Normal_Genotype(normal=[('sep_conv_3x3', 1), ('avg_pool_3x3', 0), ('skip_connect', 2), ('cbam', 0), ('avg_pool_3x3', 3), ('eca', 2), ('cbam', 4), ('sep_conv_3x3', 3)], normal_concat=range(2, 6))
2023-11-04 00:35:25,498 Cell_4 = Normal_Genotype(normal=[('skip_connect', 1), ('dil_conv_3x3', 0), ('sep_conv_3x3', 1), ('dil_conv_3x3', 0), ('avg_pool_3x3', 3), ('avg_pool_3x3', 1), ('max_pool_3x3', 2), ('eca', 4)], normal_concat=range(2, 6))
2023-11-04 00:35:25,498 Cell_5 = Reduce_Genotype(reduce=[('avg_pool_3x3', 0), ('sep_conv_3x3', 1), ('avg_pool_3x3', 2), ('sep_conv_3x3', 0), ('eca', 2), ('eca', 3), ('dil_conv_3x3', 4), ('eca', 3)], reduce_concat=range(2, 6))
2023-11-04 00:39:34,747 train 450 5.820261e-01 73.835920
2023-11-04 00:39:34,749 Cell_0 = Normal_Genotype(normal=[('sep_conv_3x3', 1), ('cbam', 0), ('max_pool_3x3', 1), ('skip_connect', 2), ('avg_pool_3x3', 3), ('cbam', 1), ('avg_pool_3x3', 3), ('dil_conv_3x3', 4)], normal_concat=range(2, 6))
2023-11-04 00:39:34,749 Cell_1 = Normal_Genotype(normal=[('cbam', 0), ('skip_connect', 1), ('eca', 2), ('sep_conv_3x3', 0), ('cbam', 3), ('cbam', 0), ('skip_connect', 3), ('skip_connect', 4)], normal_concat=range(2, 6))
2023-11-04 00:39:34,749 Cell_2 = Reduce_Genotype(reduce=[('dil_conv_3x3', 0), ('skip_connect', 1), ('avg_pool_3x3', 2), ('avg_pool_3x3', 0), ('avg_pool_3x3', 3), ('eca', 0), ('sep_conv_3x3', 4), ('dil_conv_3x3', 3)], reduce_concat=range(2, 6))
2023-11-04 00:39:34,749 Cell_3 = Normal_Genotype(normal=[('sep_conv_3x3', 1), ('avg_pool_3x3', 0), ('skip_connect', 2), ('cbam', 0), ('avg_pool_3x3', 3), ('eca', 2), ('cbam', 4), ('sep_conv_3x3', 3)], normal_concat=range(2, 6))
2023-11-04 00:39:34,749 Cell_4 = Normal_Genotype(normal=[('skip_connect', 1), ('dil_conv_3x3', 0), ('sep_conv_3x3', 1), ('dil_conv_3x3', 0), ('avg_pool_3x3', 3), ('avg_pool_3x3', 1), ('max_pool_3x3', 2), ('eca', 4)], normal_concat=range(2, 6))
2023-11-04 00:39:34,749 Cell_5 = Reduce_Genotype(reduce=[('avg_pool_3x3', 0), ('sep_conv_3x3', 1), ('avg_pool_3x3', 2), ('sep_conv_3x3', 0), ('eca', 2), ('eca', 3), ('dil_conv_3x3', 4), ('eca', 3)], reduce_concat=range(2, 6))
