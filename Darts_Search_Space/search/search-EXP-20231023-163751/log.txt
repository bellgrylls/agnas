2023-10-23 16:37:54,949 gpu device = 0
2023-10-23 16:37:54,949 args = Namespace(data='/sdb_new/wz/dataset/ISIC-2017', batch_size=2, learning_rate=0.025, learning_rate_min=0.001, momentum=0.9, weight_decay=0.0003, report_freq=50, gpu=0, epochs=25, init_channels=16, layers=6, model_path='saved_models', cutout=False, cutout_length=16, drop_path_prob=0.3, save='search-EXP-20231023-163751', seed=0, grad_clip=5, train_portion=0.7, unrolled=False, arch_learning_rate=0.0003, arch_weight_decay=0.001)
2023-10-23 16:37:55,295 Network(
  (_criterion): CrossEntropyLoss()
  (stem): Sequential(
    (0): Conv2d(3, 48, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
    (1): BatchNorm2d(48, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (cells): ModuleList(
    (0): Cell(
      (preprocess0): ReLUConvBN(
        (op): Sequential(
          (0): ReLU()
          (1): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (2): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
        )
      )
      (preprocess1): ReLUConvBN(
        (op): Sequential(
          (0): ReLU()
          (1): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (2): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
        )
      )
      (_ops): ModuleList(
        (0): MixedOp(
          (_ops): ModuleList(
            (0): SepConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=16, bias=False)
                (2): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
                (4): ReLU()
                (5): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=16, bias=False)
                (6): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (7): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
            (1): SepConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(16, 16, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=16, bias=False)
                (2): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
                (4): ReLU()
                (5): Conv2d(16, 16, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=16, bias=False)
                (6): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (7): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
            (2): DilConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=16, bias=False)
                (2): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
            (3): DilConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(16, 16, kernel_size=(5, 5), stride=(1, 1), padding=(4, 4), dilation=(2, 2), groups=16, bias=False)
                (2): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
            (4): Identity()
            (5): Sequential(
              (0): AvgPool2d(kernel_size=3, stride=1, padding=1)
              (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
            )
            (6): Sequential(
              (0): MaxPool2d(kernel_size=3, stride=1, padding=1, dilation=1, ceil_mode=False)
              (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
            )
            (7): Zero()
          )
          (attention): AttentionModule(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (fc): Sequential(
              (0): Linear(in_features=128, out_features=16, bias=False)
              (1): ReLU(inplace=True)
              (2): Linear(in_features=16, out_features=128, bias=False)
              (3): Sigmoid()
            )
          )
        )
        (1): MixedOp(
          (_ops): ModuleList(
            (0): SepConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=16, bias=False)
                (2): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
                (4): ReLU()
                (5): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=16, bias=False)
                (6): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (7): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
            (1): SepConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(16, 16, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=16, bias=False)
                (2): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
                (4): ReLU()
                (5): Conv2d(16, 16, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=16, bias=False)
                (6): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (7): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
            (2): DilConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=16, bias=False)
                (2): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
            (3): DilConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(16, 16, kernel_size=(5, 5), stride=(1, 1), padding=(4, 4), dilation=(2, 2), groups=16, bias=False)
                (2): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
            (4): Identity()
            (5): Sequential(
              (0): AvgPool2d(kernel_size=3, stride=1, padding=1)
              (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
            )
            (6): Sequential(
              (0): MaxPool2d(kernel_size=3, stride=1, padding=1, dilation=1, ceil_mode=False)
              (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
            )
            (7): Zero()
          )
          (attention): AttentionModule(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (fc): Sequential(
              (0): Linear(in_features=128, out_features=16, bias=False)
              (1): ReLU(inplace=True)
              (2): Linear(in_features=16, out_features=128, bias=False)
              (3): Sigmoid()
            )
          )
        )
        (2): MixedOp(
          (_ops): ModuleList(
            (0): SepConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=16, bias=False)
                (2): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
                (4): ReLU()
                (5): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=16, bias=False)
                (6): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (7): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
            (1): SepConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(16, 16, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=16, bias=False)
                (2): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
                (4): ReLU()
                (5): Conv2d(16, 16, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=16, bias=False)
                (6): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (7): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
            (2): DilConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=16, bias=False)
                (2): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
            (3): DilConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(16, 16, kernel_size=(5, 5), stride=(1, 1), padding=(4, 4), dilation=(2, 2), groups=16, bias=False)
                (2): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
            (4): Identity()
            (5): Sequential(
              (0): AvgPool2d(kernel_size=3, stride=1, padding=1)
              (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
            )
            (6): Sequential(
              (0): MaxPool2d(kernel_size=3, stride=1, padding=1, dilation=1, ceil_mode=False)
              (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
            )
            (7): Zero()
          )
          (attention): AttentionModule(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (fc): Sequential(
              (0): Linear(in_features=128, out_features=16, bias=False)
              (1): ReLU(inplace=True)
              (2): Linear(in_features=16, out_features=128, bias=False)
              (3): Sigmoid()
            )
          )
        )
        (3): MixedOp(
          (_ops): ModuleList(
            (0): SepConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=16, bias=False)
                (2): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
                (4): ReLU()
                (5): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=16, bias=False)
                (6): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (7): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
            (1): SepConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(16, 16, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=16, bias=False)
                (2): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
                (4): ReLU()
                (5): Conv2d(16, 16, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=16, bias=False)
                (6): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (7): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
            (2): DilConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=16, bias=False)
                (2): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
            (3): DilConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(16, 16, kernel_size=(5, 5), stride=(1, 1), padding=(4, 4), dilation=(2, 2), groups=16, bias=False)
                (2): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
            (4): Identity()
            (5): Sequential(
              (0): AvgPool2d(kernel_size=3, stride=1, padding=1)
              (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
            )
            (6): Sequential(
              (0): MaxPool2d(kernel_size=3, stride=1, padding=1, dilation=1, ceil_mode=False)
              (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
            )
            (7): Zero()
          )
          (attention): AttentionModule(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (fc): Sequential(
              (0): Linear(in_features=128, out_features=16, bias=False)
              (1): ReLU(inplace=True)
              (2): Linear(in_features=16, out_features=128, bias=False)
              (3): Sigmoid()
            )
          )
        )
        (4): MixedOp(
          (_ops): ModuleList(
            (0): SepConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=16, bias=False)
                (2): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
                (4): ReLU()
                (5): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=16, bias=False)
                (6): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (7): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
            (1): SepConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(16, 16, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=16, bias=False)
                (2): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
                (4): ReLU()
                (5): Conv2d(16, 16, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=16, bias=False)
                (6): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (7): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
            (2): DilConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=16, bias=False)
                (2): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
            (3): DilConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(16, 16, kernel_size=(5, 5), stride=(1, 1), padding=(4, 4), dilation=(2, 2), groups=16, bias=False)
                (2): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
            (4): Identity()
            (5): Sequential(
              (0): AvgPool2d(kernel_size=3, stride=1, padding=1)
              (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
            )
            (6): Sequential(
              (0): MaxPool2d(kernel_size=3, stride=1, padding=1, dilation=1, ceil_mode=False)
              (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
            )
            (7): Zero()
          )
          (attention): AttentionModule(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (fc): Sequential(
              (0): Linear(in_features=128, out_features=16, bias=False)
              (1): ReLU(inplace=True)
              (2): Linear(in_features=16, out_features=128, bias=False)
              (3): Sigmoid()
            )
          )
        )
        (5): MixedOp(
          (_ops): ModuleList(
            (0): SepConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=16, bias=False)
                (2): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
                (4): ReLU()
                (5): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=16, bias=False)
                (6): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (7): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
            (1): SepConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(16, 16, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=16, bias=False)
                (2): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
                (4): ReLU()
                (5): Conv2d(16, 16, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=16, bias=False)
                (6): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (7): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
            (2): DilConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=16, bias=False)
                (2): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
            (3): DilConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(16, 16, kernel_size=(5, 5), stride=(1, 1), padding=(4, 4), dilation=(2, 2), groups=16, bias=False)
                (2): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
            (4): Identity()
            (5): Sequential(
              (0): AvgPool2d(kernel_size=3, stride=1, padding=1)
              (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
            )
            (6): Sequential(
              (0): MaxPool2d(kernel_size=3, stride=1, padding=1, dilation=1, ceil_mode=False)
              (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
            )
            (7): Zero()
          )
          (attention): AttentionModule(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (fc): Sequential(
              (0): Linear(in_features=128, out_features=16, bias=False)
              (1): ReLU(inplace=True)
              (2): Linear(in_features=16, out_features=128, bias=False)
              (3): Sigmoid()
            )
          )
        )
        (6): MixedOp(
          (_ops): ModuleList(
            (0): SepConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=16, bias=False)
                (2): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
                (4): ReLU()
                (5): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=16, bias=False)
                (6): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (7): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
            (1): SepConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(16, 16, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=16, bias=False)
                (2): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
                (4): ReLU()
                (5): Conv2d(16, 16, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=16, bias=False)
                (6): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (7): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
            (2): DilConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=16, bias=False)
                (2): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
            (3): DilConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(16, 16, kernel_size=(5, 5), stride=(1, 1), padding=(4, 4), dilation=(2, 2), groups=16, bias=False)
                (2): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
            (4): Identity()
            (5): Sequential(
              (0): AvgPool2d(kernel_size=3, stride=1, padding=1)
              (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
            )
            (6): Sequential(
              (0): MaxPool2d(kernel_size=3, stride=1, padding=1, dilation=1, ceil_mode=False)
              (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
            )
            (7): Zero()
          )
          (attention): AttentionModule(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (fc): Sequential(
              (0): Linear(in_features=128, out_features=16, bias=False)
              (1): ReLU(inplace=True)
              (2): Linear(in_features=16, out_features=128, bias=False)
              (3): Sigmoid()
            )
          )
        )
        (7): MixedOp(
          (_ops): ModuleList(
            (0): SepConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=16, bias=False)
                (2): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
                (4): ReLU()
                (5): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=16, bias=False)
                (6): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (7): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
            (1): SepConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(16, 16, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=16, bias=False)
                (2): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
                (4): ReLU()
                (5): Conv2d(16, 16, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=16, bias=False)
                (6): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (7): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
            (2): DilConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=16, bias=False)
                (2): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
            (3): DilConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(16, 16, kernel_size=(5, 5), stride=(1, 1), padding=(4, 4), dilation=(2, 2), groups=16, bias=False)
                (2): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
            (4): Identity()
            (5): Sequential(
              (0): AvgPool2d(kernel_size=3, stride=1, padding=1)
              (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
            )
            (6): Sequential(
              (0): MaxPool2d(kernel_size=3, stride=1, padding=1, dilation=1, ceil_mode=False)
              (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
            )
            (7): Zero()
          )
          (attention): AttentionModule(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (fc): Sequential(
              (0): Linear(in_features=128, out_features=16, bias=False)
              (1): ReLU(inplace=True)
              (2): Linear(in_features=16, out_features=128, bias=False)
              (3): Sigmoid()
            )
          )
        )
        (8): MixedOp(
          (_ops): ModuleList(
            (0): SepConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=16, bias=False)
                (2): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
                (4): ReLU()
                (5): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=16, bias=False)
                (6): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (7): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
            (1): SepConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(16, 16, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=16, bias=False)
                (2): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
                (4): ReLU()
                (5): Conv2d(16, 16, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=16, bias=False)
                (6): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (7): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
            (2): DilConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=16, bias=False)
                (2): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
            (3): DilConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(16, 16, kernel_size=(5, 5), stride=(1, 1), padding=(4, 4), dilation=(2, 2), groups=16, bias=False)
                (2): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
            (4): Identity()
            (5): Sequential(
              (0): AvgPool2d(kernel_size=3, stride=1, padding=1)
              (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
            )
            (6): Sequential(
              (0): MaxPool2d(kernel_size=3, stride=1, padding=1, dilation=1, ceil_mode=False)
              (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
            )
            (7): Zero()
          )
          (attention): AttentionModule(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (fc): Sequential(
              (0): Linear(in_features=128, out_features=16, bias=False)
              (1): ReLU(inplace=True)
              (2): Linear(in_features=16, out_features=128, bias=False)
              (3): Sigmoid()
            )
          )
        )
        (9): MixedOp(
          (_ops): ModuleList(
            (0): SepConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=16, bias=False)
                (2): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
                (4): ReLU()
                (5): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=16, bias=False)
                (6): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (7): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
            (1): SepConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(16, 16, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=16, bias=False)
                (2): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
                (4): ReLU()
                (5): Conv2d(16, 16, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=16, bias=False)
                (6): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (7): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
            (2): DilConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=16, bias=False)
                (2): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
            (3): DilConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(16, 16, kernel_size=(5, 5), stride=(1, 1), padding=(4, 4), dilation=(2, 2), groups=16, bias=False)
                (2): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
            (4): Identity()
            (5): Sequential(
              (0): AvgPool2d(kernel_size=3, stride=1, padding=1)
              (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
            )
            (6): Sequential(
              (0): MaxPool2d(kernel_size=3, stride=1, padding=1, dilation=1, ceil_mode=False)
              (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
            )
            (7): Zero()
          )
          (attention): AttentionModule(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (fc): Sequential(
              (0): Linear(in_features=128, out_features=16, bias=False)
              (1): ReLU(inplace=True)
              (2): Linear(in_features=16, out_features=128, bias=False)
              (3): Sigmoid()
            )
          )
        )
        (10): MixedOp(
          (_ops): ModuleList(
            (0): SepConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=16, bias=False)
                (2): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
                (4): ReLU()
                (5): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=16, bias=False)
                (6): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (7): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
            (1): SepConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(16, 16, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=16, bias=False)
                (2): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
                (4): ReLU()
                (5): Conv2d(16, 16, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=16, bias=False)
                (6): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (7): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
            (2): DilConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=16, bias=False)
                (2): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
            (3): DilConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(16, 16, kernel_size=(5, 5), stride=(1, 1), padding=(4, 4), dilation=(2, 2), groups=16, bias=False)
                (2): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
            (4): Identity()
            (5): Sequential(
              (0): AvgPool2d(kernel_size=3, stride=1, padding=1)
              (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
            )
            (6): Sequential(
              (0): MaxPool2d(kernel_size=3, stride=1, padding=1, dilation=1, ceil_mode=False)
              (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
            )
            (7): Zero()
          )
          (attention): AttentionModule(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (fc): Sequential(
              (0): Linear(in_features=128, out_features=16, bias=False)
              (1): ReLU(inplace=True)
              (2): Linear(in_features=16, out_features=128, bias=False)
              (3): Sigmoid()
            )
          )
        )
        (11): MixedOp(
          (_ops): ModuleList(
            (0): SepConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=16, bias=False)
                (2): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
                (4): ReLU()
                (5): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=16, bias=False)
                (6): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (7): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
            (1): SepConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(16, 16, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=16, bias=False)
                (2): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
                (4): ReLU()
                (5): Conv2d(16, 16, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=16, bias=False)
                (6): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (7): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
            (2): DilConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=16, bias=False)
                (2): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
            (3): DilConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(16, 16, kernel_size=(5, 5), stride=(1, 1), padding=(4, 4), dilation=(2, 2), groups=16, bias=False)
                (2): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
            (4): Identity()
            (5): Sequential(
              (0): AvgPool2d(kernel_size=3, stride=1, padding=1)
              (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
            )
            (6): Sequential(
              (0): MaxPool2d(kernel_size=3, stride=1, padding=1, dilation=1, ceil_mode=False)
              (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
            )
            (7): Zero()
          )
          (attention): AttentionModule(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (fc): Sequential(
              (0): Linear(in_features=128, out_features=16, bias=False)
              (1): ReLU(inplace=True)
              (2): Linear(in_features=16, out_features=128, bias=False)
              (3): Sigmoid()
            )
          )
        )
        (12): MixedOp(
          (_ops): ModuleList(
            (0): SepConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=16, bias=False)
                (2): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
                (4): ReLU()
                (5): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=16, bias=False)
                (6): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (7): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
            (1): SepConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(16, 16, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=16, bias=False)
                (2): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
                (4): ReLU()
                (5): Conv2d(16, 16, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=16, bias=False)
                (6): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (7): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
            (2): DilConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=16, bias=False)
                (2): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
            (3): DilConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(16, 16, kernel_size=(5, 5), stride=(1, 1), padding=(4, 4), dilation=(2, 2), groups=16, bias=False)
                (2): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
            (4): Identity()
            (5): Sequential(
              (0): AvgPool2d(kernel_size=3, stride=1, padding=1)
              (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
            )
            (6): Sequential(
              (0): MaxPool2d(kernel_size=3, stride=1, padding=1, dilation=1, ceil_mode=False)
              (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
            )
            (7): Zero()
          )
          (attention): AttentionModule(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (fc): Sequential(
              (0): Linear(in_features=128, out_features=16, bias=False)
              (1): ReLU(inplace=True)
              (2): Linear(in_features=16, out_features=128, bias=False)
              (3): Sigmoid()
            )
          )
        )
        (13): MixedOp(
          (_ops): ModuleList(
            (0): SepConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=16, bias=False)
                (2): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
                (4): ReLU()
                (5): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=16, bias=False)
                (6): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (7): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
            (1): SepConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(16, 16, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=16, bias=False)
                (2): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
                (4): ReLU()
                (5): Conv2d(16, 16, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=16, bias=False)
                (6): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (7): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
            (2): DilConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=16, bias=False)
                (2): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
            (3): DilConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(16, 16, kernel_size=(5, 5), stride=(1, 1), padding=(4, 4), dilation=(2, 2), groups=16, bias=False)
                (2): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
            (4): Identity()
            (5): Sequential(
              (0): AvgPool2d(kernel_size=3, stride=1, padding=1)
              (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
            )
            (6): Sequential(
              (0): MaxPool2d(kernel_size=3, stride=1, padding=1, dilation=1, ceil_mode=False)
              (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
            )
            (7): Zero()
          )
          (attention): AttentionModule(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (fc): Sequential(
              (0): Linear(in_features=128, out_features=16, bias=False)
              (1): ReLU(inplace=True)
              (2): Linear(in_features=16, out_features=128, bias=False)
              (3): Sigmoid()
            )
          )
        )
      )
      (_bns): ModuleList()
    )
    (1): Cell(
      (preprocess0): ReLUConvBN(
        (op): Sequential(
          (0): ReLU()
          (1): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (2): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
        )
      )
      (preprocess1): ReLUConvBN(
        (op): Sequential(
          (0): ReLU()
          (1): Conv2d(64, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (2): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
        )
      )
      (_ops): ModuleList(
        (0): MixedOp(
          (_ops): ModuleList(
            (0): SepConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=16, bias=False)
                (2): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
                (4): ReLU()
                (5): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=16, bias=False)
                (6): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (7): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
            (1): SepConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(16, 16, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=16, bias=False)
                (2): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
                (4): ReLU()
                (5): Conv2d(16, 16, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=16, bias=False)
                (6): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (7): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
            (2): DilConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=16, bias=False)
                (2): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
            (3): DilConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(16, 16, kernel_size=(5, 5), stride=(1, 1), padding=(4, 4), dilation=(2, 2), groups=16, bias=False)
                (2): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
            (4): Identity()
            (5): Sequential(
              (0): AvgPool2d(kernel_size=3, stride=1, padding=1)
              (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
            )
            (6): Sequential(
              (0): MaxPool2d(kernel_size=3, stride=1, padding=1, dilation=1, ceil_mode=False)
              (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
            )
            (7): Zero()
          )
          (attention): AttentionModule(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (fc): Sequential(
              (0): Linear(in_features=128, out_features=16, bias=False)
              (1): ReLU(inplace=True)
              (2): Linear(in_features=16, out_features=128, bias=False)
              (3): Sigmoid()
            )
          )
        )
        (1): MixedOp(
          (_ops): ModuleList(
            (0): SepConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=16, bias=False)
                (2): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
                (4): ReLU()
                (5): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=16, bias=False)
                (6): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (7): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
            (1): SepConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(16, 16, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=16, bias=False)
                (2): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
                (4): ReLU()
                (5): Conv2d(16, 16, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=16, bias=False)
                (6): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (7): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
            (2): DilConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=16, bias=False)
                (2): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
            (3): DilConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(16, 16, kernel_size=(5, 5), stride=(1, 1), padding=(4, 4), dilation=(2, 2), groups=16, bias=False)
                (2): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
            (4): Identity()
            (5): Sequential(
              (0): AvgPool2d(kernel_size=3, stride=1, padding=1)
              (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
            )
            (6): Sequential(
              (0): MaxPool2d(kernel_size=3, stride=1, padding=1, dilation=1, ceil_mode=False)
              (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
            )
            (7): Zero()
          )
          (attention): AttentionModule(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (fc): Sequential(
              (0): Linear(in_features=128, out_features=16, bias=False)
              (1): ReLU(inplace=True)
              (2): Linear(in_features=16, out_features=128, bias=False)
              (3): Sigmoid()
            )
          )
        )
        (2): MixedOp(
          (_ops): ModuleList(
            (0): SepConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=16, bias=False)
                (2): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
                (4): ReLU()
                (5): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=16, bias=False)
                (6): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (7): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
            (1): SepConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(16, 16, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=16, bias=False)
                (2): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
                (4): ReLU()
                (5): Conv2d(16, 16, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=16, bias=False)
                (6): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (7): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
            (2): DilConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=16, bias=False)
                (2): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
            (3): DilConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(16, 16, kernel_size=(5, 5), stride=(1, 1), padding=(4, 4), dilation=(2, 2), groups=16, bias=False)
                (2): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
            (4): Identity()
            (5): Sequential(
              (0): AvgPool2d(kernel_size=3, stride=1, padding=1)
              (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
            )
            (6): Sequential(
              (0): MaxPool2d(kernel_size=3, stride=1, padding=1, dilation=1, ceil_mode=False)
              (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
            )
            (7): Zero()
          )
          (attention): AttentionModule(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (fc): Sequential(
              (0): Linear(in_features=128, out_features=16, bias=False)
              (1): ReLU(inplace=True)
              (2): Linear(in_features=16, out_features=128, bias=False)
              (3): Sigmoid()
            )
          )
        )
        (3): MixedOp(
          (_ops): ModuleList(
            (0): SepConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=16, bias=False)
                (2): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
                (4): ReLU()
                (5): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=16, bias=False)
                (6): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (7): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
            (1): SepConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(16, 16, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=16, bias=False)
                (2): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
                (4): ReLU()
                (5): Conv2d(16, 16, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=16, bias=False)
                (6): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (7): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
            (2): DilConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=16, bias=False)
                (2): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
            (3): DilConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(16, 16, kernel_size=(5, 5), stride=(1, 1), padding=(4, 4), dilation=(2, 2), groups=16, bias=False)
                (2): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
            (4): Identity()
            (5): Sequential(
              (0): AvgPool2d(kernel_size=3, stride=1, padding=1)
              (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
            )
            (6): Sequential(
              (0): MaxPool2d(kernel_size=3, stride=1, padding=1, dilation=1, ceil_mode=False)
              (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
            )
            (7): Zero()
          )
          (attention): AttentionModule(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (fc): Sequential(
              (0): Linear(in_features=128, out_features=16, bias=False)
              (1): ReLU(inplace=True)
              (2): Linear(in_features=16, out_features=128, bias=False)
              (3): Sigmoid()
            )
          )
        )
        (4): MixedOp(
          (_ops): ModuleList(
            (0): SepConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=16, bias=False)
                (2): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
                (4): ReLU()
                (5): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=16, bias=False)
                (6): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (7): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
            (1): SepConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(16, 16, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=16, bias=False)
                (2): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
                (4): ReLU()
                (5): Conv2d(16, 16, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=16, bias=False)
                (6): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (7): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
            (2): DilConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=16, bias=False)
                (2): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
            (3): DilConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(16, 16, kernel_size=(5, 5), stride=(1, 1), padding=(4, 4), dilation=(2, 2), groups=16, bias=False)
                (2): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
            (4): Identity()
            (5): Sequential(
              (0): AvgPool2d(kernel_size=3, stride=1, padding=1)
              (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
            )
            (6): Sequential(
              (0): MaxPool2d(kernel_size=3, stride=1, padding=1, dilation=1, ceil_mode=False)
              (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
            )
            (7): Zero()
          )
          (attention): AttentionModule(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (fc): Sequential(
              (0): Linear(in_features=128, out_features=16, bias=False)
              (1): ReLU(inplace=True)
              (2): Linear(in_features=16, out_features=128, bias=False)
              (3): Sigmoid()
            )
          )
        )
        (5): MixedOp(
          (_ops): ModuleList(
            (0): SepConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=16, bias=False)
                (2): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
                (4): ReLU()
                (5): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=16, bias=False)
                (6): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (7): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
            (1): SepConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(16, 16, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=16, bias=False)
                (2): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
                (4): ReLU()
                (5): Conv2d(16, 16, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=16, bias=False)
                (6): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (7): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
            (2): DilConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=16, bias=False)
                (2): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
            (3): DilConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(16, 16, kernel_size=(5, 5), stride=(1, 1), padding=(4, 4), dilation=(2, 2), groups=16, bias=False)
                (2): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
            (4): Identity()
            (5): Sequential(
              (0): AvgPool2d(kernel_size=3, stride=1, padding=1)
              (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
            )
            (6): Sequential(
              (0): MaxPool2d(kernel_size=3, stride=1, padding=1, dilation=1, ceil_mode=False)
              (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
            )
            (7): Zero()
          )
          (attention): AttentionModule(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (fc): Sequential(
              (0): Linear(in_features=128, out_features=16, bias=False)
              (1): ReLU(inplace=True)
              (2): Linear(in_features=16, out_features=128, bias=False)
              (3): Sigmoid()
            )
          )
        )
        (6): MixedOp(
          (_ops): ModuleList(
            (0): SepConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=16, bias=False)
                (2): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
                (4): ReLU()
                (5): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=16, bias=False)
                (6): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (7): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
            (1): SepConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(16, 16, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=16, bias=False)
                (2): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
                (4): ReLU()
                (5): Conv2d(16, 16, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=16, bias=False)
                (6): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (7): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
            (2): DilConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=16, bias=False)
                (2): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
            (3): DilConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(16, 16, kernel_size=(5, 5), stride=(1, 1), padding=(4, 4), dilation=(2, 2), groups=16, bias=False)
                (2): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
            (4): Identity()
            (5): Sequential(
              (0): AvgPool2d(kernel_size=3, stride=1, padding=1)
              (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
            )
            (6): Sequential(
              (0): MaxPool2d(kernel_size=3, stride=1, padding=1, dilation=1, ceil_mode=False)
              (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
            )
            (7): Zero()
          )
          (attention): AttentionModule(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (fc): Sequential(
              (0): Linear(in_features=128, out_features=16, bias=False)
              (1): ReLU(inplace=True)
              (2): Linear(in_features=16, out_features=128, bias=False)
              (3): Sigmoid()
            )
          )
        )
        (7): MixedOp(
          (_ops): ModuleList(
            (0): SepConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=16, bias=False)
                (2): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
                (4): ReLU()
                (5): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=16, bias=False)
                (6): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (7): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
            (1): SepConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(16, 16, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=16, bias=False)
                (2): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
                (4): ReLU()
                (5): Conv2d(16, 16, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=16, bias=False)
                (6): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (7): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
            (2): DilConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=16, bias=False)
                (2): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
            (3): DilConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(16, 16, kernel_size=(5, 5), stride=(1, 1), padding=(4, 4), dilation=(2, 2), groups=16, bias=False)
                (2): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
            (4): Identity()
            (5): Sequential(
              (0): AvgPool2d(kernel_size=3, stride=1, padding=1)
              (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
            )
            (6): Sequential(
              (0): MaxPool2d(kernel_size=3, stride=1, padding=1, dilation=1, ceil_mode=False)
              (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
            )
            (7): Zero()
          )
          (attention): AttentionModule(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (fc): Sequential(
              (0): Linear(in_features=128, out_features=16, bias=False)
              (1): ReLU(inplace=True)
              (2): Linear(in_features=16, out_features=128, bias=False)
              (3): Sigmoid()
            )
          )
        )
        (8): MixedOp(
          (_ops): ModuleList(
            (0): SepConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=16, bias=False)
                (2): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
                (4): ReLU()
                (5): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=16, bias=False)
                (6): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (7): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
            (1): SepConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(16, 16, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=16, bias=False)
                (2): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
                (4): ReLU()
                (5): Conv2d(16, 16, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=16, bias=False)
                (6): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (7): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
            (2): DilConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=16, bias=False)
                (2): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
            (3): DilConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(16, 16, kernel_size=(5, 5), stride=(1, 1), padding=(4, 4), dilation=(2, 2), groups=16, bias=False)
                (2): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
            (4): Identity()
            (5): Sequential(
              (0): AvgPool2d(kernel_size=3, stride=1, padding=1)
              (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
            )
            (6): Sequential(
              (0): MaxPool2d(kernel_size=3, stride=1, padding=1, dilation=1, ceil_mode=False)
              (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
            )
            (7): Zero()
          )
          (attention): AttentionModule(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (fc): Sequential(
              (0): Linear(in_features=128, out_features=16, bias=False)
              (1): ReLU(inplace=True)
              (2): Linear(in_features=16, out_features=128, bias=False)
              (3): Sigmoid()
            )
          )
        )
        (9): MixedOp(
          (_ops): ModuleList(
            (0): SepConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=16, bias=False)
                (2): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
                (4): ReLU()
                (5): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=16, bias=False)
                (6): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (7): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
            (1): SepConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(16, 16, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=16, bias=False)
                (2): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
                (4): ReLU()
                (5): Conv2d(16, 16, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=16, bias=False)
                (6): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (7): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
            (2): DilConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=16, bias=False)
                (2): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
            (3): DilConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(16, 16, kernel_size=(5, 5), stride=(1, 1), padding=(4, 4), dilation=(2, 2), groups=16, bias=False)
                (2): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
            (4): Identity()
            (5): Sequential(
              (0): AvgPool2d(kernel_size=3, stride=1, padding=1)
              (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
            )
            (6): Sequential(
              (0): MaxPool2d(kernel_size=3, stride=1, padding=1, dilation=1, ceil_mode=False)
              (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
            )
            (7): Zero()
          )
          (attention): AttentionModule(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (fc): Sequential(
              (0): Linear(in_features=128, out_features=16, bias=False)
              (1): ReLU(inplace=True)
              (2): Linear(in_features=16, out_features=128, bias=False)
              (3): Sigmoid()
            )
          )
        )
        (10): MixedOp(
          (_ops): ModuleList(
            (0): SepConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=16, bias=False)
                (2): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
                (4): ReLU()
                (5): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=16, bias=False)
                (6): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (7): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
            (1): SepConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(16, 16, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=16, bias=False)
                (2): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
                (4): ReLU()
                (5): Conv2d(16, 16, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=16, bias=False)
                (6): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (7): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
            (2): DilConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=16, bias=False)
                (2): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
            (3): DilConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(16, 16, kernel_size=(5, 5), stride=(1, 1), padding=(4, 4), dilation=(2, 2), groups=16, bias=False)
                (2): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
            (4): Identity()
            (5): Sequential(
              (0): AvgPool2d(kernel_size=3, stride=1, padding=1)
              (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
            )
            (6): Sequential(
              (0): MaxPool2d(kernel_size=3, stride=1, padding=1, dilation=1, ceil_mode=False)
              (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
            )
            (7): Zero()
          )
          (attention): AttentionModule(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (fc): Sequential(
              (0): Linear(in_features=128, out_features=16, bias=False)
              (1): ReLU(inplace=True)
              (2): Linear(in_features=16, out_features=128, bias=False)
              (3): Sigmoid()
            )
          )
        )
        (11): MixedOp(
          (_ops): ModuleList(
            (0): SepConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=16, bias=False)
                (2): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
                (4): ReLU()
                (5): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=16, bias=False)
                (6): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (7): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
            (1): SepConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(16, 16, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=16, bias=False)
                (2): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
                (4): ReLU()
                (5): Conv2d(16, 16, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=16, bias=False)
                (6): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (7): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
            (2): DilConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=16, bias=False)
                (2): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
            (3): DilConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(16, 16, kernel_size=(5, 5), stride=(1, 1), padding=(4, 4), dilation=(2, 2), groups=16, bias=False)
                (2): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
            (4): Identity()
            (5): Sequential(
              (0): AvgPool2d(kernel_size=3, stride=1, padding=1)
              (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
            )
            (6): Sequential(
              (0): MaxPool2d(kernel_size=3, stride=1, padding=1, dilation=1, ceil_mode=False)
              (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
            )
            (7): Zero()
          )
          (attention): AttentionModule(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (fc): Sequential(
              (0): Linear(in_features=128, out_features=16, bias=False)
              (1): ReLU(inplace=True)
              (2): Linear(in_features=16, out_features=128, bias=False)
              (3): Sigmoid()
            )
          )
        )
        (12): MixedOp(
          (_ops): ModuleList(
            (0): SepConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=16, bias=False)
                (2): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
                (4): ReLU()
                (5): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=16, bias=False)
                (6): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (7): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
            (1): SepConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(16, 16, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=16, bias=False)
                (2): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
                (4): ReLU()
                (5): Conv2d(16, 16, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=16, bias=False)
                (6): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (7): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
            (2): DilConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=16, bias=False)
                (2): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
            (3): DilConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(16, 16, kernel_size=(5, 5), stride=(1, 1), padding=(4, 4), dilation=(2, 2), groups=16, bias=False)
                (2): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
            (4): Identity()
            (5): Sequential(
              (0): AvgPool2d(kernel_size=3, stride=1, padding=1)
              (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
            )
            (6): Sequential(
              (0): MaxPool2d(kernel_size=3, stride=1, padding=1, dilation=1, ceil_mode=False)
              (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
            )
            (7): Zero()
          )
          (attention): AttentionModule(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (fc): Sequential(
              (0): Linear(in_features=128, out_features=16, bias=False)
              (1): ReLU(inplace=True)
              (2): Linear(in_features=16, out_features=128, bias=False)
              (3): Sigmoid()
            )
          )
        )
        (13): MixedOp(
          (_ops): ModuleList(
            (0): SepConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=16, bias=False)
                (2): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
                (4): ReLU()
                (5): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=16, bias=False)
                (6): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (7): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
            (1): SepConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(16, 16, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=16, bias=False)
                (2): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
                (4): ReLU()
                (5): Conv2d(16, 16, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=16, bias=False)
                (6): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (7): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
            (2): DilConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=16, bias=False)
                (2): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
            (3): DilConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(16, 16, kernel_size=(5, 5), stride=(1, 1), padding=(4, 4), dilation=(2, 2), groups=16, bias=False)
                (2): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
            (4): Identity()
            (5): Sequential(
              (0): AvgPool2d(kernel_size=3, stride=1, padding=1)
              (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
            )
            (6): Sequential(
              (0): MaxPool2d(kernel_size=3, stride=1, padding=1, dilation=1, ceil_mode=False)
              (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
            )
            (7): Zero()
          )
          (attention): AttentionModule(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (fc): Sequential(
              (0): Linear(in_features=128, out_features=16, bias=False)
              (1): ReLU(inplace=True)
              (2): Linear(in_features=16, out_features=128, bias=False)
              (3): Sigmoid()
            )
          )
        )
      )
      (_bns): ModuleList()
    )
    (2): Cell(
      (preprocess0): ReLUConvBN(
        (op): Sequential(
          (0): ReLU()
          (1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (2): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
        )
      )
      (preprocess1): ReLUConvBN(
        (op): Sequential(
          (0): ReLU()
          (1): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (2): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
        )
      )
      (_ops): ModuleList(
        (0): MixedOp(
          (_ops): ModuleList(
            (0): SepConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(32, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=32, bias=False)
                (2): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
                (4): ReLU()
                (5): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
                (6): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (7): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
            (1): SepConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(32, 32, kernel_size=(5, 5), stride=(2, 2), padding=(2, 2), groups=32, bias=False)
                (2): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
                (4): ReLU()
                (5): Conv2d(32, 32, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=32, bias=False)
                (6): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (7): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
            (2): DilConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(32, 32, kernel_size=(3, 3), stride=(2, 2), padding=(2, 2), dilation=(2, 2), groups=32, bias=False)
                (2): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
            (3): DilConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(32, 32, kernel_size=(5, 5), stride=(2, 2), padding=(4, 4), dilation=(2, 2), groups=32, bias=False)
                (2): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
            (4): FactorizedReduce(
              (relu): ReLU()
              (conv_1): Conv2d(32, 16, kernel_size=(1, 1), stride=(2, 2), bias=False)
              (conv_2): Conv2d(32, 16, kernel_size=(1, 1), stride=(2, 2), bias=False)
              (bn): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
            )
            (5): Sequential(
              (0): AvgPool2d(kernel_size=3, stride=2, padding=1)
              (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
            )
            (6): Sequential(
              (0): MaxPool2d(kernel_size=3, stride=2, padding=1, dilation=1, ceil_mode=False)
              (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
            )
            (7): Zero()
          )
          (attention): AttentionModule(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (fc): Sequential(
              (0): Linear(in_features=256, out_features=32, bias=False)
              (1): ReLU(inplace=True)
              (2): Linear(in_features=32, out_features=256, bias=False)
              (3): Sigmoid()
            )
          )
        )
        (1): MixedOp(
          (_ops): ModuleList(
            (0): SepConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(32, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=32, bias=False)
                (2): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
                (4): ReLU()
                (5): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
                (6): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (7): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
            (1): SepConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(32, 32, kernel_size=(5, 5), stride=(2, 2), padding=(2, 2), groups=32, bias=False)
                (2): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
                (4): ReLU()
                (5): Conv2d(32, 32, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=32, bias=False)
                (6): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (7): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
            (2): DilConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(32, 32, kernel_size=(3, 3), stride=(2, 2), padding=(2, 2), dilation=(2, 2), groups=32, bias=False)
                (2): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
            (3): DilConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(32, 32, kernel_size=(5, 5), stride=(2, 2), padding=(4, 4), dilation=(2, 2), groups=32, bias=False)
                (2): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
            (4): FactorizedReduce(
              (relu): ReLU()
              (conv_1): Conv2d(32, 16, kernel_size=(1, 1), stride=(2, 2), bias=False)
              (conv_2): Conv2d(32, 16, kernel_size=(1, 1), stride=(2, 2), bias=False)
              (bn): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
            )
            (5): Sequential(
              (0): AvgPool2d(kernel_size=3, stride=2, padding=1)
              (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
            )
            (6): Sequential(
              (0): MaxPool2d(kernel_size=3, stride=2, padding=1, dilation=1, ceil_mode=False)
              (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
            )
            (7): Zero()
          )
          (attention): AttentionModule(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (fc): Sequential(
              (0): Linear(in_features=256, out_features=32, bias=False)
              (1): ReLU(inplace=True)
              (2): Linear(in_features=32, out_features=256, bias=False)
              (3): Sigmoid()
            )
          )
        )
        (2): MixedOp(
          (_ops): ModuleList(
            (0): SepConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(32, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=32, bias=False)
                (2): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
                (4): ReLU()
                (5): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
                (6): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (7): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
            (1): SepConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(32, 32, kernel_size=(5, 5), stride=(2, 2), padding=(2, 2), groups=32, bias=False)
                (2): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
                (4): ReLU()
                (5): Conv2d(32, 32, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=32, bias=False)
                (6): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (7): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
            (2): DilConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(32, 32, kernel_size=(3, 3), stride=(2, 2), padding=(2, 2), dilation=(2, 2), groups=32, bias=False)
                (2): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
            (3): DilConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(32, 32, kernel_size=(5, 5), stride=(2, 2), padding=(4, 4), dilation=(2, 2), groups=32, bias=False)
                (2): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
            (4): FactorizedReduce(
              (relu): ReLU()
              (conv_1): Conv2d(32, 16, kernel_size=(1, 1), stride=(2, 2), bias=False)
              (conv_2): Conv2d(32, 16, kernel_size=(1, 1), stride=(2, 2), bias=False)
              (bn): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
            )
            (5): Sequential(
              (0): AvgPool2d(kernel_size=3, stride=2, padding=1)
              (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
            )
            (6): Sequential(
              (0): MaxPool2d(kernel_size=3, stride=2, padding=1, dilation=1, ceil_mode=False)
              (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
            )
            (7): Zero()
          )
          (attention): AttentionModule(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (fc): Sequential(
              (0): Linear(in_features=256, out_features=32, bias=False)
              (1): ReLU(inplace=True)
              (2): Linear(in_features=32, out_features=256, bias=False)
              (3): Sigmoid()
            )
          )
        )
        (3): MixedOp(
          (_ops): ModuleList(
            (0): SepConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(32, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=32, bias=False)
                (2): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
                (4): ReLU()
                (5): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
                (6): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (7): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
            (1): SepConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(32, 32, kernel_size=(5, 5), stride=(2, 2), padding=(2, 2), groups=32, bias=False)
                (2): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
                (4): ReLU()
                (5): Conv2d(32, 32, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=32, bias=False)
                (6): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (7): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
            (2): DilConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(32, 32, kernel_size=(3, 3), stride=(2, 2), padding=(2, 2), dilation=(2, 2), groups=32, bias=False)
                (2): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
            (3): DilConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(32, 32, kernel_size=(5, 5), stride=(2, 2), padding=(4, 4), dilation=(2, 2), groups=32, bias=False)
                (2): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
            (4): FactorizedReduce(
              (relu): ReLU()
              (conv_1): Conv2d(32, 16, kernel_size=(1, 1), stride=(2, 2), bias=False)
              (conv_2): Conv2d(32, 16, kernel_size=(1, 1), stride=(2, 2), bias=False)
              (bn): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
            )
            (5): Sequential(
              (0): AvgPool2d(kernel_size=3, stride=2, padding=1)
              (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
            )
            (6): Sequential(
              (0): MaxPool2d(kernel_size=3, stride=2, padding=1, dilation=1, ceil_mode=False)
              (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
            )
            (7): Zero()
          )
          (attention): AttentionModule(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (fc): Sequential(
              (0): Linear(in_features=256, out_features=32, bias=False)
              (1): ReLU(inplace=True)
              (2): Linear(in_features=32, out_features=256, bias=False)
              (3): Sigmoid()
            )
          )
        )
        (4): MixedOp(
          (_ops): ModuleList(
            (0): SepConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
                (2): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
                (4): ReLU()
                (5): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
                (6): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (7): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
            (1): SepConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(32, 32, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=32, bias=False)
                (2): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
                (4): ReLU()
                (5): Conv2d(32, 32, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=32, bias=False)
                (6): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (7): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
            (2): DilConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=32, bias=False)
                (2): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
            (3): DilConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(32, 32, kernel_size=(5, 5), stride=(1, 1), padding=(4, 4), dilation=(2, 2), groups=32, bias=False)
                (2): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
            (4): Identity()
            (5): Sequential(
              (0): AvgPool2d(kernel_size=3, stride=1, padding=1)
              (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
            )
            (6): Sequential(
              (0): MaxPool2d(kernel_size=3, stride=1, padding=1, dilation=1, ceil_mode=False)
              (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
            )
            (7): Zero()
          )
          (attention): AttentionModule(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (fc): Sequential(
              (0): Linear(in_features=256, out_features=32, bias=False)
              (1): ReLU(inplace=True)
              (2): Linear(in_features=32, out_features=256, bias=False)
              (3): Sigmoid()
            )
          )
        )
        (5): MixedOp(
          (_ops): ModuleList(
            (0): SepConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(32, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=32, bias=False)
                (2): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
                (4): ReLU()
                (5): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
                (6): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (7): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
            (1): SepConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(32, 32, kernel_size=(5, 5), stride=(2, 2), padding=(2, 2), groups=32, bias=False)
                (2): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
                (4): ReLU()
                (5): Conv2d(32, 32, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=32, bias=False)
                (6): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (7): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
            (2): DilConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(32, 32, kernel_size=(3, 3), stride=(2, 2), padding=(2, 2), dilation=(2, 2), groups=32, bias=False)
                (2): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
            (3): DilConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(32, 32, kernel_size=(5, 5), stride=(2, 2), padding=(4, 4), dilation=(2, 2), groups=32, bias=False)
                (2): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
            (4): FactorizedReduce(
              (relu): ReLU()
              (conv_1): Conv2d(32, 16, kernel_size=(1, 1), stride=(2, 2), bias=False)
              (conv_2): Conv2d(32, 16, kernel_size=(1, 1), stride=(2, 2), bias=False)
              (bn): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
            )
            (5): Sequential(
              (0): AvgPool2d(kernel_size=3, stride=2, padding=1)
              (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
            )
            (6): Sequential(
              (0): MaxPool2d(kernel_size=3, stride=2, padding=1, dilation=1, ceil_mode=False)
              (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
            )
            (7): Zero()
          )
          (attention): AttentionModule(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (fc): Sequential(
              (0): Linear(in_features=256, out_features=32, bias=False)
              (1): ReLU(inplace=True)
              (2): Linear(in_features=32, out_features=256, bias=False)
              (3): Sigmoid()
            )
          )
        )
        (6): MixedOp(
          (_ops): ModuleList(
            (0): SepConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(32, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=32, bias=False)
                (2): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
                (4): ReLU()
                (5): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
                (6): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (7): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
            (1): SepConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(32, 32, kernel_size=(5, 5), stride=(2, 2), padding=(2, 2), groups=32, bias=False)
                (2): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
                (4): ReLU()
                (5): Conv2d(32, 32, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=32, bias=False)
                (6): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (7): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
            (2): DilConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(32, 32, kernel_size=(3, 3), stride=(2, 2), padding=(2, 2), dilation=(2, 2), groups=32, bias=False)
                (2): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
            (3): DilConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(32, 32, kernel_size=(5, 5), stride=(2, 2), padding=(4, 4), dilation=(2, 2), groups=32, bias=False)
                (2): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
            (4): FactorizedReduce(
              (relu): ReLU()
              (conv_1): Conv2d(32, 16, kernel_size=(1, 1), stride=(2, 2), bias=False)
              (conv_2): Conv2d(32, 16, kernel_size=(1, 1), stride=(2, 2), bias=False)
              (bn): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
            )
            (5): Sequential(
              (0): AvgPool2d(kernel_size=3, stride=2, padding=1)
              (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
            )
            (6): Sequential(
              (0): MaxPool2d(kernel_size=3, stride=2, padding=1, dilation=1, ceil_mode=False)
              (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
            )
            (7): Zero()
          )
          (attention): AttentionModule(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (fc): Sequential(
              (0): Linear(in_features=256, out_features=32, bias=False)
              (1): ReLU(inplace=True)
              (2): Linear(in_features=32, out_features=256, bias=False)
              (3): Sigmoid()
            )
          )
        )
        (7): MixedOp(
          (_ops): ModuleList(
            (0): SepConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
                (2): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
                (4): ReLU()
                (5): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
                (6): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (7): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
            (1): SepConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(32, 32, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=32, bias=False)
                (2): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
                (4): ReLU()
                (5): Conv2d(32, 32, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=32, bias=False)
                (6): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (7): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
            (2): DilConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=32, bias=False)
                (2): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
            (3): DilConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(32, 32, kernel_size=(5, 5), stride=(1, 1), padding=(4, 4), dilation=(2, 2), groups=32, bias=False)
                (2): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
            (4): Identity()
            (5): Sequential(
              (0): AvgPool2d(kernel_size=3, stride=1, padding=1)
              (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
            )
            (6): Sequential(
              (0): MaxPool2d(kernel_size=3, stride=1, padding=1, dilation=1, ceil_mode=False)
              (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
            )
            (7): Zero()
          )
          (attention): AttentionModule(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (fc): Sequential(
              (0): Linear(in_features=256, out_features=32, bias=False)
              (1): ReLU(inplace=True)
              (2): Linear(in_features=32, out_features=256, bias=False)
              (3): Sigmoid()
            )
          )
        )
        (8): MixedOp(
          (_ops): ModuleList(
            (0): SepConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
                (2): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
                (4): ReLU()
                (5): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
                (6): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (7): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
            (1): SepConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(32, 32, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=32, bias=False)
                (2): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
                (4): ReLU()
                (5): Conv2d(32, 32, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=32, bias=False)
                (6): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (7): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
            (2): DilConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=32, bias=False)
                (2): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
            (3): DilConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(32, 32, kernel_size=(5, 5), stride=(1, 1), padding=(4, 4), dilation=(2, 2), groups=32, bias=False)
                (2): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
            (4): Identity()
            (5): Sequential(
              (0): AvgPool2d(kernel_size=3, stride=1, padding=1)
              (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
            )
            (6): Sequential(
              (0): MaxPool2d(kernel_size=3, stride=1, padding=1, dilation=1, ceil_mode=False)
              (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
            )
            (7): Zero()
          )
          (attention): AttentionModule(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (fc): Sequential(
              (0): Linear(in_features=256, out_features=32, bias=False)
              (1): ReLU(inplace=True)
              (2): Linear(in_features=32, out_features=256, bias=False)
              (3): Sigmoid()
            )
          )
        )
        (9): MixedOp(
          (_ops): ModuleList(
            (0): SepConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(32, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=32, bias=False)
                (2): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
                (4): ReLU()
                (5): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
                (6): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (7): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
            (1): SepConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(32, 32, kernel_size=(5, 5), stride=(2, 2), padding=(2, 2), groups=32, bias=False)
                (2): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
                (4): ReLU()
                (5): Conv2d(32, 32, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=32, bias=False)
                (6): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (7): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
            (2): DilConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(32, 32, kernel_size=(3, 3), stride=(2, 2), padding=(2, 2), dilation=(2, 2), groups=32, bias=False)
                (2): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
            (3): DilConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(32, 32, kernel_size=(5, 5), stride=(2, 2), padding=(4, 4), dilation=(2, 2), groups=32, bias=False)
                (2): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
            (4): FactorizedReduce(
              (relu): ReLU()
              (conv_1): Conv2d(32, 16, kernel_size=(1, 1), stride=(2, 2), bias=False)
              (conv_2): Conv2d(32, 16, kernel_size=(1, 1), stride=(2, 2), bias=False)
              (bn): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
            )
            (5): Sequential(
              (0): AvgPool2d(kernel_size=3, stride=2, padding=1)
              (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
            )
            (6): Sequential(
              (0): MaxPool2d(kernel_size=3, stride=2, padding=1, dilation=1, ceil_mode=False)
              (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
            )
            (7): Zero()
          )
          (attention): AttentionModule(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (fc): Sequential(
              (0): Linear(in_features=256, out_features=32, bias=False)
              (1): ReLU(inplace=True)
              (2): Linear(in_features=32, out_features=256, bias=False)
              (3): Sigmoid()
            )
          )
        )
        (10): MixedOp(
          (_ops): ModuleList(
            (0): SepConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(32, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=32, bias=False)
                (2): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
                (4): ReLU()
                (5): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
                (6): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (7): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
            (1): SepConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(32, 32, kernel_size=(5, 5), stride=(2, 2), padding=(2, 2), groups=32, bias=False)
                (2): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
                (4): ReLU()
                (5): Conv2d(32, 32, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=32, bias=False)
                (6): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (7): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
            (2): DilConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(32, 32, kernel_size=(3, 3), stride=(2, 2), padding=(2, 2), dilation=(2, 2), groups=32, bias=False)
                (2): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
            (3): DilConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(32, 32, kernel_size=(5, 5), stride=(2, 2), padding=(4, 4), dilation=(2, 2), groups=32, bias=False)
                (2): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
            (4): FactorizedReduce(
              (relu): ReLU()
              (conv_1): Conv2d(32, 16, kernel_size=(1, 1), stride=(2, 2), bias=False)
              (conv_2): Conv2d(32, 16, kernel_size=(1, 1), stride=(2, 2), bias=False)
              (bn): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
            )
            (5): Sequential(
              (0): AvgPool2d(kernel_size=3, stride=2, padding=1)
              (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
            )
            (6): Sequential(
              (0): MaxPool2d(kernel_size=3, stride=2, padding=1, dilation=1, ceil_mode=False)
              (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
            )
            (7): Zero()
          )
          (attention): AttentionModule(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (fc): Sequential(
              (0): Linear(in_features=256, out_features=32, bias=False)
              (1): ReLU(inplace=True)
              (2): Linear(in_features=32, out_features=256, bias=False)
              (3): Sigmoid()
            )
          )
        )
        (11): MixedOp(
          (_ops): ModuleList(
            (0): SepConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
                (2): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
                (4): ReLU()
                (5): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
                (6): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (7): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
            (1): SepConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(32, 32, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=32, bias=False)
                (2): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
                (4): ReLU()
                (5): Conv2d(32, 32, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=32, bias=False)
                (6): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (7): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
            (2): DilConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=32, bias=False)
                (2): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
            (3): DilConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(32, 32, kernel_size=(5, 5), stride=(1, 1), padding=(4, 4), dilation=(2, 2), groups=32, bias=False)
                (2): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
            (4): Identity()
            (5): Sequential(
              (0): AvgPool2d(kernel_size=3, stride=1, padding=1)
              (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
            )
            (6): Sequential(
              (0): MaxPool2d(kernel_size=3, stride=1, padding=1, dilation=1, ceil_mode=False)
              (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
            )
            (7): Zero()
          )
          (attention): AttentionModule(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (fc): Sequential(
              (0): Linear(in_features=256, out_features=32, bias=False)
              (1): ReLU(inplace=True)
              (2): Linear(in_features=32, out_features=256, bias=False)
              (3): Sigmoid()
            )
          )
        )
        (12): MixedOp(
          (_ops): ModuleList(
            (0): SepConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
                (2): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
                (4): ReLU()
                (5): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
                (6): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (7): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
            (1): SepConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(32, 32, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=32, bias=False)
                (2): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
                (4): ReLU()
                (5): Conv2d(32, 32, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=32, bias=False)
                (6): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (7): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
            (2): DilConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=32, bias=False)
                (2): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
            (3): DilConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(32, 32, kernel_size=(5, 5), stride=(1, 1), padding=(4, 4), dilation=(2, 2), groups=32, bias=False)
                (2): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
            (4): Identity()
            (5): Sequential(
              (0): AvgPool2d(kernel_size=3, stride=1, padding=1)
              (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
            )
            (6): Sequential(
              (0): MaxPool2d(kernel_size=3, stride=1, padding=1, dilation=1, ceil_mode=False)
              (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
            )
            (7): Zero()
          )
          (attention): AttentionModule(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (fc): Sequential(
              (0): Linear(in_features=256, out_features=32, bias=False)
              (1): ReLU(inplace=True)
              (2): Linear(in_features=32, out_features=256, bias=False)
              (3): Sigmoid()
            )
          )
        )
        (13): MixedOp(
          (_ops): ModuleList(
            (0): SepConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
                (2): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
                (4): ReLU()
                (5): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
                (6): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (7): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
            (1): SepConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(32, 32, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=32, bias=False)
                (2): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
                (4): ReLU()
                (5): Conv2d(32, 32, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=32, bias=False)
                (6): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (7): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
            (2): DilConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=32, bias=False)
                (2): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
            (3): DilConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(32, 32, kernel_size=(5, 5), stride=(1, 1), padding=(4, 4), dilation=(2, 2), groups=32, bias=False)
                (2): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
            (4): Identity()
            (5): Sequential(
              (0): AvgPool2d(kernel_size=3, stride=1, padding=1)
              (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
            )
            (6): Sequential(
              (0): MaxPool2d(kernel_size=3, stride=1, padding=1, dilation=1, ceil_mode=False)
              (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
            )
            (7): Zero()
          )
          (attention): AttentionModule(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (fc): Sequential(
              (0): Linear(in_features=256, out_features=32, bias=False)
              (1): ReLU(inplace=True)
              (2): Linear(in_features=32, out_features=256, bias=False)
              (3): Sigmoid()
            )
          )
        )
      )
      (_bns): ModuleList()
    )
    (3): Cell(
      (preprocess0): FactorizedReduce(
        (relu): ReLU()
        (conv_1): Conv2d(64, 16, kernel_size=(1, 1), stride=(2, 2), bias=False)
        (conv_2): Conv2d(64, 16, kernel_size=(1, 1), stride=(2, 2), bias=False)
        (bn): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
      )
      (preprocess1): ReLUConvBN(
        (op): Sequential(
          (0): ReLU()
          (1): Conv2d(128, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (2): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
        )
      )
      (_ops): ModuleList(
        (0): MixedOp(
          (_ops): ModuleList(
            (0): SepConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
                (2): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
                (4): ReLU()
                (5): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
                (6): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (7): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
            (1): SepConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(32, 32, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=32, bias=False)
                (2): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
                (4): ReLU()
                (5): Conv2d(32, 32, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=32, bias=False)
                (6): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (7): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
            (2): DilConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=32, bias=False)
                (2): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
            (3): DilConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(32, 32, kernel_size=(5, 5), stride=(1, 1), padding=(4, 4), dilation=(2, 2), groups=32, bias=False)
                (2): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
            (4): Identity()
            (5): Sequential(
              (0): AvgPool2d(kernel_size=3, stride=1, padding=1)
              (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
            )
            (6): Sequential(
              (0): MaxPool2d(kernel_size=3, stride=1, padding=1, dilation=1, ceil_mode=False)
              (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
            )
            (7): Zero()
          )
          (attention): AttentionModule(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (fc): Sequential(
              (0): Linear(in_features=256, out_features=32, bias=False)
              (1): ReLU(inplace=True)
              (2): Linear(in_features=32, out_features=256, bias=False)
              (3): Sigmoid()
            )
          )
        )
        (1): MixedOp(
          (_ops): ModuleList(
            (0): SepConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
                (2): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
                (4): ReLU()
                (5): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
                (6): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (7): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
            (1): SepConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(32, 32, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=32, bias=False)
                (2): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
                (4): ReLU()
                (5): Conv2d(32, 32, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=32, bias=False)
                (6): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (7): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
            (2): DilConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=32, bias=False)
                (2): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
            (3): DilConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(32, 32, kernel_size=(5, 5), stride=(1, 1), padding=(4, 4), dilation=(2, 2), groups=32, bias=False)
                (2): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
            (4): Identity()
            (5): Sequential(
              (0): AvgPool2d(kernel_size=3, stride=1, padding=1)
              (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
            )
            (6): Sequential(
              (0): MaxPool2d(kernel_size=3, stride=1, padding=1, dilation=1, ceil_mode=False)
              (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
            )
            (7): Zero()
          )
          (attention): AttentionModule(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (fc): Sequential(
              (0): Linear(in_features=256, out_features=32, bias=False)
              (1): ReLU(inplace=True)
              (2): Linear(in_features=32, out_features=256, bias=False)
              (3): Sigmoid()
            )
          )
        )
        (2): MixedOp(
          (_ops): ModuleList(
            (0): SepConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
                (2): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
                (4): ReLU()
                (5): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
                (6): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (7): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
            (1): SepConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(32, 32, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=32, bias=False)
                (2): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
                (4): ReLU()
                (5): Conv2d(32, 32, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=32, bias=False)
                (6): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (7): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
            (2): DilConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=32, bias=False)
                (2): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
            (3): DilConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(32, 32, kernel_size=(5, 5), stride=(1, 1), padding=(4, 4), dilation=(2, 2), groups=32, bias=False)
                (2): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
            (4): Identity()
            (5): Sequential(
              (0): AvgPool2d(kernel_size=3, stride=1, padding=1)
              (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
            )
            (6): Sequential(
              (0): MaxPool2d(kernel_size=3, stride=1, padding=1, dilation=1, ceil_mode=False)
              (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
            )
            (7): Zero()
          )
          (attention): AttentionModule(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (fc): Sequential(
              (0): Linear(in_features=256, out_features=32, bias=False)
              (1): ReLU(inplace=True)
              (2): Linear(in_features=32, out_features=256, bias=False)
              (3): Sigmoid()
            )
          )
        )
        (3): MixedOp(
          (_ops): ModuleList(
            (0): SepConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
                (2): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
                (4): ReLU()
                (5): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
                (6): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (7): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
            (1): SepConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(32, 32, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=32, bias=False)
                (2): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
                (4): ReLU()
                (5): Conv2d(32, 32, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=32, bias=False)
                (6): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (7): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
            (2): DilConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=32, bias=False)
                (2): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
            (3): DilConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(32, 32, kernel_size=(5, 5), stride=(1, 1), padding=(4, 4), dilation=(2, 2), groups=32, bias=False)
                (2): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
            (4): Identity()
            (5): Sequential(
              (0): AvgPool2d(kernel_size=3, stride=1, padding=1)
              (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
            )
            (6): Sequential(
              (0): MaxPool2d(kernel_size=3, stride=1, padding=1, dilation=1, ceil_mode=False)
              (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
            )
            (7): Zero()
          )
          (attention): AttentionModule(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (fc): Sequential(
              (0): Linear(in_features=256, out_features=32, bias=False)
              (1): ReLU(inplace=True)
              (2): Linear(in_features=32, out_features=256, bias=False)
              (3): Sigmoid()
            )
          )
        )
        (4): MixedOp(
          (_ops): ModuleList(
            (0): SepConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
                (2): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
                (4): ReLU()
                (5): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
                (6): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (7): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
            (1): SepConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(32, 32, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=32, bias=False)
                (2): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
                (4): ReLU()
                (5): Conv2d(32, 32, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=32, bias=False)
                (6): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (7): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
            (2): DilConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=32, bias=False)
                (2): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
            (3): DilConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(32, 32, kernel_size=(5, 5), stride=(1, 1), padding=(4, 4), dilation=(2, 2), groups=32, bias=False)
                (2): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
            (4): Identity()
            (5): Sequential(
              (0): AvgPool2d(kernel_size=3, stride=1, padding=1)
              (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
            )
            (6): Sequential(
              (0): MaxPool2d(kernel_size=3, stride=1, padding=1, dilation=1, ceil_mode=False)
              (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
            )
            (7): Zero()
          )
          (attention): AttentionModule(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (fc): Sequential(
              (0): Linear(in_features=256, out_features=32, bias=False)
              (1): ReLU(inplace=True)
              (2): Linear(in_features=32, out_features=256, bias=False)
              (3): Sigmoid()
            )
          )
        )
        (5): MixedOp(
          (_ops): ModuleList(
            (0): SepConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
                (2): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
                (4): ReLU()
                (5): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
                (6): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (7): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
            (1): SepConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(32, 32, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=32, bias=False)
                (2): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
                (4): ReLU()
                (5): Conv2d(32, 32, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=32, bias=False)
                (6): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (7): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
            (2): DilConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=32, bias=False)
                (2): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
            (3): DilConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(32, 32, kernel_size=(5, 5), stride=(1, 1), padding=(4, 4), dilation=(2, 2), groups=32, bias=False)
                (2): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
            (4): Identity()
            (5): Sequential(
              (0): AvgPool2d(kernel_size=3, stride=1, padding=1)
              (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
            )
            (6): Sequential(
              (0): MaxPool2d(kernel_size=3, stride=1, padding=1, dilation=1, ceil_mode=False)
              (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
            )
            (7): Zero()
          )
          (attention): AttentionModule(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (fc): Sequential(
              (0): Linear(in_features=256, out_features=32, bias=False)
              (1): ReLU(inplace=True)
              (2): Linear(in_features=32, out_features=256, bias=False)
              (3): Sigmoid()
            )
          )
        )
        (6): MixedOp(
          (_ops): ModuleList(
            (0): SepConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
                (2): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
                (4): ReLU()
                (5): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
                (6): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (7): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
            (1): SepConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(32, 32, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=32, bias=False)
                (2): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
                (4): ReLU()
                (5): Conv2d(32, 32, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=32, bias=False)
                (6): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (7): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
            (2): DilConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=32, bias=False)
                (2): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
            (3): DilConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(32, 32, kernel_size=(5, 5), stride=(1, 1), padding=(4, 4), dilation=(2, 2), groups=32, bias=False)
                (2): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
            (4): Identity()
            (5): Sequential(
              (0): AvgPool2d(kernel_size=3, stride=1, padding=1)
              (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
            )
            (6): Sequential(
              (0): MaxPool2d(kernel_size=3, stride=1, padding=1, dilation=1, ceil_mode=False)
              (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
            )
            (7): Zero()
          )
          (attention): AttentionModule(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (fc): Sequential(
              (0): Linear(in_features=256, out_features=32, bias=False)
              (1): ReLU(inplace=True)
              (2): Linear(in_features=32, out_features=256, bias=False)
              (3): Sigmoid()
            )
          )
        )
        (7): MixedOp(
          (_ops): ModuleList(
            (0): SepConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
                (2): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
                (4): ReLU()
                (5): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
                (6): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (7): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
            (1): SepConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(32, 32, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=32, bias=False)
                (2): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
                (4): ReLU()
                (5): Conv2d(32, 32, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=32, bias=False)
                (6): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (7): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
            (2): DilConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=32, bias=False)
                (2): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
            (3): DilConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(32, 32, kernel_size=(5, 5), stride=(1, 1), padding=(4, 4), dilation=(2, 2), groups=32, bias=False)
                (2): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
            (4): Identity()
            (5): Sequential(
              (0): AvgPool2d(kernel_size=3, stride=1, padding=1)
              (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
            )
            (6): Sequential(
              (0): MaxPool2d(kernel_size=3, stride=1, padding=1, dilation=1, ceil_mode=False)
              (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
            )
            (7): Zero()
          )
          (attention): AttentionModule(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (fc): Sequential(
              (0): Linear(in_features=256, out_features=32, bias=False)
              (1): ReLU(inplace=True)
              (2): Linear(in_features=32, out_features=256, bias=False)
              (3): Sigmoid()
            )
          )
        )
        (8): MixedOp(
          (_ops): ModuleList(
            (0): SepConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
                (2): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
                (4): ReLU()
                (5): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
                (6): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (7): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
            (1): SepConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(32, 32, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=32, bias=False)
                (2): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
                (4): ReLU()
                (5): Conv2d(32, 32, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=32, bias=False)
                (6): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (7): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
            (2): DilConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=32, bias=False)
                (2): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
            (3): DilConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(32, 32, kernel_size=(5, 5), stride=(1, 1), padding=(4, 4), dilation=(2, 2), groups=32, bias=False)
                (2): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
            (4): Identity()
            (5): Sequential(
              (0): AvgPool2d(kernel_size=3, stride=1, padding=1)
              (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
            )
            (6): Sequential(
              (0): MaxPool2d(kernel_size=3, stride=1, padding=1, dilation=1, ceil_mode=False)
              (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
            )
            (7): Zero()
          )
          (attention): AttentionModule(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (fc): Sequential(
              (0): Linear(in_features=256, out_features=32, bias=False)
              (1): ReLU(inplace=True)
              (2): Linear(in_features=32, out_features=256, bias=False)
              (3): Sigmoid()
            )
          )
        )
        (9): MixedOp(
          (_ops): ModuleList(
            (0): SepConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
                (2): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
                (4): ReLU()
                (5): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
                (6): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (7): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
            (1): SepConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(32, 32, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=32, bias=False)
                (2): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
                (4): ReLU()
                (5): Conv2d(32, 32, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=32, bias=False)
                (6): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (7): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
            (2): DilConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=32, bias=False)
                (2): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
            (3): DilConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(32, 32, kernel_size=(5, 5), stride=(1, 1), padding=(4, 4), dilation=(2, 2), groups=32, bias=False)
                (2): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
            (4): Identity()
            (5): Sequential(
              (0): AvgPool2d(kernel_size=3, stride=1, padding=1)
              (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
            )
            (6): Sequential(
              (0): MaxPool2d(kernel_size=3, stride=1, padding=1, dilation=1, ceil_mode=False)
              (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
            )
            (7): Zero()
          )
          (attention): AttentionModule(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (fc): Sequential(
              (0): Linear(in_features=256, out_features=32, bias=False)
              (1): ReLU(inplace=True)
              (2): Linear(in_features=32, out_features=256, bias=False)
              (3): Sigmoid()
            )
          )
        )
        (10): MixedOp(
          (_ops): ModuleList(
            (0): SepConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
                (2): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
                (4): ReLU()
                (5): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
                (6): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (7): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
            (1): SepConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(32, 32, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=32, bias=False)
                (2): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
                (4): ReLU()
                (5): Conv2d(32, 32, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=32, bias=False)
                (6): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (7): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
            (2): DilConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=32, bias=False)
                (2): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
            (3): DilConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(32, 32, kernel_size=(5, 5), stride=(1, 1), padding=(4, 4), dilation=(2, 2), groups=32, bias=False)
                (2): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
            (4): Identity()
            (5): Sequential(
              (0): AvgPool2d(kernel_size=3, stride=1, padding=1)
              (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
            )
            (6): Sequential(
              (0): MaxPool2d(kernel_size=3, stride=1, padding=1, dilation=1, ceil_mode=False)
              (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
            )
            (7): Zero()
          )
          (attention): AttentionModule(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (fc): Sequential(
              (0): Linear(in_features=256, out_features=32, bias=False)
              (1): ReLU(inplace=True)
              (2): Linear(in_features=32, out_features=256, bias=False)
              (3): Sigmoid()
            )
          )
        )
        (11): MixedOp(
          (_ops): ModuleList(
            (0): SepConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
                (2): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
                (4): ReLU()
                (5): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
                (6): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (7): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
            (1): SepConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(32, 32, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=32, bias=False)
                (2): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
                (4): ReLU()
                (5): Conv2d(32, 32, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=32, bias=False)
                (6): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (7): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
            (2): DilConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=32, bias=False)
                (2): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
            (3): DilConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(32, 32, kernel_size=(5, 5), stride=(1, 1), padding=(4, 4), dilation=(2, 2), groups=32, bias=False)
                (2): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
            (4): Identity()
            (5): Sequential(
              (0): AvgPool2d(kernel_size=3, stride=1, padding=1)
              (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
            )
            (6): Sequential(
              (0): MaxPool2d(kernel_size=3, stride=1, padding=1, dilation=1, ceil_mode=False)
              (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
            )
            (7): Zero()
          )
          (attention): AttentionModule(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (fc): Sequential(
              (0): Linear(in_features=256, out_features=32, bias=False)
              (1): ReLU(inplace=True)
              (2): Linear(in_features=32, out_features=256, bias=False)
              (3): Sigmoid()
            )
          )
        )
        (12): MixedOp(
          (_ops): ModuleList(
            (0): SepConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
                (2): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
                (4): ReLU()
                (5): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
                (6): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (7): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
            (1): SepConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(32, 32, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=32, bias=False)
                (2): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
                (4): ReLU()
                (5): Conv2d(32, 32, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=32, bias=False)
                (6): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (7): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
            (2): DilConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=32, bias=False)
                (2): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
            (3): DilConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(32, 32, kernel_size=(5, 5), stride=(1, 1), padding=(4, 4), dilation=(2, 2), groups=32, bias=False)
                (2): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
            (4): Identity()
            (5): Sequential(
              (0): AvgPool2d(kernel_size=3, stride=1, padding=1)
              (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
            )
            (6): Sequential(
              (0): MaxPool2d(kernel_size=3, stride=1, padding=1, dilation=1, ceil_mode=False)
              (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
            )
            (7): Zero()
          )
          (attention): AttentionModule(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (fc): Sequential(
              (0): Linear(in_features=256, out_features=32, bias=False)
              (1): ReLU(inplace=True)
              (2): Linear(in_features=32, out_features=256, bias=False)
              (3): Sigmoid()
            )
          )
        )
        (13): MixedOp(
          (_ops): ModuleList(
            (0): SepConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
                (2): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
                (4): ReLU()
                (5): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
                (6): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (7): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
            (1): SepConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(32, 32, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=32, bias=False)
                (2): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
                (4): ReLU()
                (5): Conv2d(32, 32, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=32, bias=False)
                (6): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (7): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
            (2): DilConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=32, bias=False)
                (2): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
            (3): DilConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(32, 32, kernel_size=(5, 5), stride=(1, 1), padding=(4, 4), dilation=(2, 2), groups=32, bias=False)
                (2): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
            (4): Identity()
            (5): Sequential(
              (0): AvgPool2d(kernel_size=3, stride=1, padding=1)
              (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
            )
            (6): Sequential(
              (0): MaxPool2d(kernel_size=3, stride=1, padding=1, dilation=1, ceil_mode=False)
              (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
            )
            (7): Zero()
          )
          (attention): AttentionModule(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (fc): Sequential(
              (0): Linear(in_features=256, out_features=32, bias=False)
              (1): ReLU(inplace=True)
              (2): Linear(in_features=32, out_features=256, bias=False)
              (3): Sigmoid()
            )
          )
        )
      )
      (_bns): ModuleList()
    )
    (4): Cell(
      (preprocess0): ReLUConvBN(
        (op): Sequential(
          (0): ReLU()
          (1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
        )
      )
      (preprocess1): ReLUConvBN(
        (op): Sequential(
          (0): ReLU()
          (1): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
        )
      )
      (_ops): ModuleList(
        (0): MixedOp(
          (_ops): ModuleList(
            (0): SepConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(64, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=64, bias=False)
                (2): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
                (4): ReLU()
                (5): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
                (6): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (7): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
            (1): SepConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(64, 64, kernel_size=(5, 5), stride=(2, 2), padding=(2, 2), groups=64, bias=False)
                (2): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
                (4): ReLU()
                (5): Conv2d(64, 64, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=64, bias=False)
                (6): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (7): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
            (2): DilConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(64, 64, kernel_size=(3, 3), stride=(2, 2), padding=(2, 2), dilation=(2, 2), groups=64, bias=False)
                (2): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
            (3): DilConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(64, 64, kernel_size=(5, 5), stride=(2, 2), padding=(4, 4), dilation=(2, 2), groups=64, bias=False)
                (2): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
            (4): FactorizedReduce(
              (relu): ReLU()
              (conv_1): Conv2d(64, 32, kernel_size=(1, 1), stride=(2, 2), bias=False)
              (conv_2): Conv2d(64, 32, kernel_size=(1, 1), stride=(2, 2), bias=False)
              (bn): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
            )
            (5): Sequential(
              (0): AvgPool2d(kernel_size=3, stride=2, padding=1)
              (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
            )
            (6): Sequential(
              (0): MaxPool2d(kernel_size=3, stride=2, padding=1, dilation=1, ceil_mode=False)
              (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
            )
            (7): Zero()
          )
          (attention): AttentionModule(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (fc): Sequential(
              (0): Linear(in_features=512, out_features=64, bias=False)
              (1): ReLU(inplace=True)
              (2): Linear(in_features=64, out_features=512, bias=False)
              (3): Sigmoid()
            )
          )
        )
        (1): MixedOp(
          (_ops): ModuleList(
            (0): SepConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(64, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=64, bias=False)
                (2): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
                (4): ReLU()
                (5): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
                (6): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (7): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
            (1): SepConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(64, 64, kernel_size=(5, 5), stride=(2, 2), padding=(2, 2), groups=64, bias=False)
                (2): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
                (4): ReLU()
                (5): Conv2d(64, 64, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=64, bias=False)
                (6): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (7): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
            (2): DilConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(64, 64, kernel_size=(3, 3), stride=(2, 2), padding=(2, 2), dilation=(2, 2), groups=64, bias=False)
                (2): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
            (3): DilConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(64, 64, kernel_size=(5, 5), stride=(2, 2), padding=(4, 4), dilation=(2, 2), groups=64, bias=False)
                (2): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
            (4): FactorizedReduce(
              (relu): ReLU()
              (conv_1): Conv2d(64, 32, kernel_size=(1, 1), stride=(2, 2), bias=False)
              (conv_2): Conv2d(64, 32, kernel_size=(1, 1), stride=(2, 2), bias=False)
              (bn): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
            )
            (5): Sequential(
              (0): AvgPool2d(kernel_size=3, stride=2, padding=1)
              (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
            )
            (6): Sequential(
              (0): MaxPool2d(kernel_size=3, stride=2, padding=1, dilation=1, ceil_mode=False)
              (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
            )
            (7): Zero()
          )
          (attention): AttentionModule(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (fc): Sequential(
              (0): Linear(in_features=512, out_features=64, bias=False)
              (1): ReLU(inplace=True)
              (2): Linear(in_features=64, out_features=512, bias=False)
              (3): Sigmoid()
            )
          )
        )
        (2): MixedOp(
          (_ops): ModuleList(
            (0): SepConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(64, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=64, bias=False)
                (2): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
                (4): ReLU()
                (5): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
                (6): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (7): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
            (1): SepConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(64, 64, kernel_size=(5, 5), stride=(2, 2), padding=(2, 2), groups=64, bias=False)
                (2): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
                (4): ReLU()
                (5): Conv2d(64, 64, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=64, bias=False)
                (6): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (7): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
            (2): DilConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(64, 64, kernel_size=(3, 3), stride=(2, 2), padding=(2, 2), dilation=(2, 2), groups=64, bias=False)
                (2): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
            (3): DilConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(64, 64, kernel_size=(5, 5), stride=(2, 2), padding=(4, 4), dilation=(2, 2), groups=64, bias=False)
                (2): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
            (4): FactorizedReduce(
              (relu): ReLU()
              (conv_1): Conv2d(64, 32, kernel_size=(1, 1), stride=(2, 2), bias=False)
              (conv_2): Conv2d(64, 32, kernel_size=(1, 1), stride=(2, 2), bias=False)
              (bn): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
            )
            (5): Sequential(
              (0): AvgPool2d(kernel_size=3, stride=2, padding=1)
              (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
            )
            (6): Sequential(
              (0): MaxPool2d(kernel_size=3, stride=2, padding=1, dilation=1, ceil_mode=False)
              (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
            )
            (7): Zero()
          )
          (attention): AttentionModule(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (fc): Sequential(
              (0): Linear(in_features=512, out_features=64, bias=False)
              (1): ReLU(inplace=True)
              (2): Linear(in_features=64, out_features=512, bias=False)
              (3): Sigmoid()
            )
          )
        )
        (3): MixedOp(
          (_ops): ModuleList(
            (0): SepConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(64, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=64, bias=False)
                (2): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
                (4): ReLU()
                (5): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
                (6): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (7): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
            (1): SepConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(64, 64, kernel_size=(5, 5), stride=(2, 2), padding=(2, 2), groups=64, bias=False)
                (2): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
                (4): ReLU()
                (5): Conv2d(64, 64, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=64, bias=False)
                (6): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (7): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
            (2): DilConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(64, 64, kernel_size=(3, 3), stride=(2, 2), padding=(2, 2), dilation=(2, 2), groups=64, bias=False)
                (2): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
            (3): DilConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(64, 64, kernel_size=(5, 5), stride=(2, 2), padding=(4, 4), dilation=(2, 2), groups=64, bias=False)
                (2): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
            (4): FactorizedReduce(
              (relu): ReLU()
              (conv_1): Conv2d(64, 32, kernel_size=(1, 1), stride=(2, 2), bias=False)
              (conv_2): Conv2d(64, 32, kernel_size=(1, 1), stride=(2, 2), bias=False)
              (bn): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
            )
            (5): Sequential(
              (0): AvgPool2d(kernel_size=3, stride=2, padding=1)
              (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
            )
            (6): Sequential(
              (0): MaxPool2d(kernel_size=3, stride=2, padding=1, dilation=1, ceil_mode=False)
              (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
            )
            (7): Zero()
          )
          (attention): AttentionModule(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (fc): Sequential(
              (0): Linear(in_features=512, out_features=64, bias=False)
              (1): ReLU(inplace=True)
              (2): Linear(in_features=64, out_features=512, bias=False)
              (3): Sigmoid()
            )
          )
        )
        (4): MixedOp(
          (_ops): ModuleList(
            (0): SepConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
                (2): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
                (4): ReLU()
                (5): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
                (6): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (7): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
            (1): SepConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(64, 64, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=64, bias=False)
                (2): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
                (4): ReLU()
                (5): Conv2d(64, 64, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=64, bias=False)
                (6): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (7): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
            (2): DilConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=64, bias=False)
                (2): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
            (3): DilConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(64, 64, kernel_size=(5, 5), stride=(1, 1), padding=(4, 4), dilation=(2, 2), groups=64, bias=False)
                (2): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
            (4): Identity()
            (5): Sequential(
              (0): AvgPool2d(kernel_size=3, stride=1, padding=1)
              (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
            )
            (6): Sequential(
              (0): MaxPool2d(kernel_size=3, stride=1, padding=1, dilation=1, ceil_mode=False)
              (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
            )
            (7): Zero()
          )
          (attention): AttentionModule(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (fc): Sequential(
              (0): Linear(in_features=512, out_features=64, bias=False)
              (1): ReLU(inplace=True)
              (2): Linear(in_features=64, out_features=512, bias=False)
              (3): Sigmoid()
            )
          )
        )
        (5): MixedOp(
          (_ops): ModuleList(
            (0): SepConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(64, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=64, bias=False)
                (2): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
                (4): ReLU()
                (5): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
                (6): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (7): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
            (1): SepConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(64, 64, kernel_size=(5, 5), stride=(2, 2), padding=(2, 2), groups=64, bias=False)
                (2): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
                (4): ReLU()
                (5): Conv2d(64, 64, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=64, bias=False)
                (6): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (7): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
            (2): DilConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(64, 64, kernel_size=(3, 3), stride=(2, 2), padding=(2, 2), dilation=(2, 2), groups=64, bias=False)
                (2): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
            (3): DilConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(64, 64, kernel_size=(5, 5), stride=(2, 2), padding=(4, 4), dilation=(2, 2), groups=64, bias=False)
                (2): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
            (4): FactorizedReduce(
              (relu): ReLU()
              (conv_1): Conv2d(64, 32, kernel_size=(1, 1), stride=(2, 2), bias=False)
              (conv_2): Conv2d(64, 32, kernel_size=(1, 1), stride=(2, 2), bias=False)
              (bn): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
            )
            (5): Sequential(
              (0): AvgPool2d(kernel_size=3, stride=2, padding=1)
              (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
            )
            (6): Sequential(
              (0): MaxPool2d(kernel_size=3, stride=2, padding=1, dilation=1, ceil_mode=False)
              (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
            )
            (7): Zero()
          )
          (attention): AttentionModule(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (fc): Sequential(
              (0): Linear(in_features=512, out_features=64, bias=False)
              (1): ReLU(inplace=True)
              (2): Linear(in_features=64, out_features=512, bias=False)
              (3): Sigmoid()
            )
          )
        )
        (6): MixedOp(
          (_ops): ModuleList(
            (0): SepConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(64, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=64, bias=False)
                (2): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
                (4): ReLU()
                (5): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
                (6): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (7): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
            (1): SepConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(64, 64, kernel_size=(5, 5), stride=(2, 2), padding=(2, 2), groups=64, bias=False)
                (2): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
                (4): ReLU()
                (5): Conv2d(64, 64, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=64, bias=False)
                (6): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (7): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
            (2): DilConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(64, 64, kernel_size=(3, 3), stride=(2, 2), padding=(2, 2), dilation=(2, 2), groups=64, bias=False)
                (2): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
            (3): DilConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(64, 64, kernel_size=(5, 5), stride=(2, 2), padding=(4, 4), dilation=(2, 2), groups=64, bias=False)
                (2): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
            (4): FactorizedReduce(
              (relu): ReLU()
              (conv_1): Conv2d(64, 32, kernel_size=(1, 1), stride=(2, 2), bias=False)
              (conv_2): Conv2d(64, 32, kernel_size=(1, 1), stride=(2, 2), bias=False)
              (bn): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
            )
            (5): Sequential(
              (0): AvgPool2d(kernel_size=3, stride=2, padding=1)
              (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
            )
            (6): Sequential(
              (0): MaxPool2d(kernel_size=3, stride=2, padding=1, dilation=1, ceil_mode=False)
              (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
            )
            (7): Zero()
          )
          (attention): AttentionModule(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (fc): Sequential(
              (0): Linear(in_features=512, out_features=64, bias=False)
              (1): ReLU(inplace=True)
              (2): Linear(in_features=64, out_features=512, bias=False)
              (3): Sigmoid()
            )
          )
        )
        (7): MixedOp(
          (_ops): ModuleList(
            (0): SepConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
                (2): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
                (4): ReLU()
                (5): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
                (6): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (7): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
            (1): SepConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(64, 64, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=64, bias=False)
                (2): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
                (4): ReLU()
                (5): Conv2d(64, 64, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=64, bias=False)
                (6): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (7): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
            (2): DilConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=64, bias=False)
                (2): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
            (3): DilConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(64, 64, kernel_size=(5, 5), stride=(1, 1), padding=(4, 4), dilation=(2, 2), groups=64, bias=False)
                (2): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
            (4): Identity()
            (5): Sequential(
              (0): AvgPool2d(kernel_size=3, stride=1, padding=1)
              (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
            )
            (6): Sequential(
              (0): MaxPool2d(kernel_size=3, stride=1, padding=1, dilation=1, ceil_mode=False)
              (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
            )
            (7): Zero()
          )
          (attention): AttentionModule(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (fc): Sequential(
              (0): Linear(in_features=512, out_features=64, bias=False)
              (1): ReLU(inplace=True)
              (2): Linear(in_features=64, out_features=512, bias=False)
              (3): Sigmoid()
            )
          )
        )
        (8): MixedOp(
          (_ops): ModuleList(
            (0): SepConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
                (2): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
                (4): ReLU()
                (5): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
                (6): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (7): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
            (1): SepConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(64, 64, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=64, bias=False)
                (2): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
                (4): ReLU()
                (5): Conv2d(64, 64, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=64, bias=False)
                (6): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (7): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
            (2): DilConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=64, bias=False)
                (2): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
            (3): DilConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(64, 64, kernel_size=(5, 5), stride=(1, 1), padding=(4, 4), dilation=(2, 2), groups=64, bias=False)
                (2): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
            (4): Identity()
            (5): Sequential(
              (0): AvgPool2d(kernel_size=3, stride=1, padding=1)
              (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
            )
            (6): Sequential(
              (0): MaxPool2d(kernel_size=3, stride=1, padding=1, dilation=1, ceil_mode=False)
              (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
            )
            (7): Zero()
          )
          (attention): AttentionModule(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (fc): Sequential(
              (0): Linear(in_features=512, out_features=64, bias=False)
              (1): ReLU(inplace=True)
              (2): Linear(in_features=64, out_features=512, bias=False)
              (3): Sigmoid()
            )
          )
        )
        (9): MixedOp(
          (_ops): ModuleList(
            (0): SepConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(64, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=64, bias=False)
                (2): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
                (4): ReLU()
                (5): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
                (6): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (7): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
            (1): SepConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(64, 64, kernel_size=(5, 5), stride=(2, 2), padding=(2, 2), groups=64, bias=False)
                (2): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
                (4): ReLU()
                (5): Conv2d(64, 64, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=64, bias=False)
                (6): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (7): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
            (2): DilConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(64, 64, kernel_size=(3, 3), stride=(2, 2), padding=(2, 2), dilation=(2, 2), groups=64, bias=False)
                (2): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
            (3): DilConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(64, 64, kernel_size=(5, 5), stride=(2, 2), padding=(4, 4), dilation=(2, 2), groups=64, bias=False)
                (2): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
            (4): FactorizedReduce(
              (relu): ReLU()
              (conv_1): Conv2d(64, 32, kernel_size=(1, 1), stride=(2, 2), bias=False)
              (conv_2): Conv2d(64, 32, kernel_size=(1, 1), stride=(2, 2), bias=False)
              (bn): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
            )
            (5): Sequential(
              (0): AvgPool2d(kernel_size=3, stride=2, padding=1)
              (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
            )
            (6): Sequential(
              (0): MaxPool2d(kernel_size=3, stride=2, padding=1, dilation=1, ceil_mode=False)
              (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
            )
            (7): Zero()
          )
          (attention): AttentionModule(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (fc): Sequential(
              (0): Linear(in_features=512, out_features=64, bias=False)
              (1): ReLU(inplace=True)
              (2): Linear(in_features=64, out_features=512, bias=False)
              (3): Sigmoid()
            )
          )
        )
        (10): MixedOp(
          (_ops): ModuleList(
            (0): SepConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(64, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=64, bias=False)
                (2): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
                (4): ReLU()
                (5): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
                (6): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (7): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
            (1): SepConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(64, 64, kernel_size=(5, 5), stride=(2, 2), padding=(2, 2), groups=64, bias=False)
                (2): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
                (4): ReLU()
                (5): Conv2d(64, 64, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=64, bias=False)
                (6): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (7): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
            (2): DilConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(64, 64, kernel_size=(3, 3), stride=(2, 2), padding=(2, 2), dilation=(2, 2), groups=64, bias=False)
                (2): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
            (3): DilConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(64, 64, kernel_size=(5, 5), stride=(2, 2), padding=(4, 4), dilation=(2, 2), groups=64, bias=False)
                (2): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
            (4): FactorizedReduce(
              (relu): ReLU()
              (conv_1): Conv2d(64, 32, kernel_size=(1, 1), stride=(2, 2), bias=False)
              (conv_2): Conv2d(64, 32, kernel_size=(1, 1), stride=(2, 2), bias=False)
              (bn): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
            )
            (5): Sequential(
              (0): AvgPool2d(kernel_size=3, stride=2, padding=1)
              (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
            )
            (6): Sequential(
              (0): MaxPool2d(kernel_size=3, stride=2, padding=1, dilation=1, ceil_mode=False)
              (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
            )
            (7): Zero()
          )
          (attention): AttentionModule(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (fc): Sequential(
              (0): Linear(in_features=512, out_features=64, bias=False)
              (1): ReLU(inplace=True)
              (2): Linear(in_features=64, out_features=512, bias=False)
              (3): Sigmoid()
            )
          )
        )
        (11): MixedOp(
          (_ops): ModuleList(
            (0): SepConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
                (2): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
                (4): ReLU()
                (5): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
                (6): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (7): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
            (1): SepConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(64, 64, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=64, bias=False)
                (2): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
                (4): ReLU()
                (5): Conv2d(64, 64, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=64, bias=False)
                (6): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (7): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
            (2): DilConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=64, bias=False)
                (2): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
            (3): DilConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(64, 64, kernel_size=(5, 5), stride=(1, 1), padding=(4, 4), dilation=(2, 2), groups=64, bias=False)
                (2): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
            (4): Identity()
            (5): Sequential(
              (0): AvgPool2d(kernel_size=3, stride=1, padding=1)
              (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
            )
            (6): Sequential(
              (0): MaxPool2d(kernel_size=3, stride=1, padding=1, dilation=1, ceil_mode=False)
              (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
            )
            (7): Zero()
          )
          (attention): AttentionModule(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (fc): Sequential(
              (0): Linear(in_features=512, out_features=64, bias=False)
              (1): ReLU(inplace=True)
              (2): Linear(in_features=64, out_features=512, bias=False)
              (3): Sigmoid()
            )
          )
        )
        (12): MixedOp(
          (_ops): ModuleList(
            (0): SepConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
                (2): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
                (4): ReLU()
                (5): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
                (6): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (7): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
            (1): SepConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(64, 64, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=64, bias=False)
                (2): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
                (4): ReLU()
                (5): Conv2d(64, 64, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=64, bias=False)
                (6): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (7): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
            (2): DilConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=64, bias=False)
                (2): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
            (3): DilConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(64, 64, kernel_size=(5, 5), stride=(1, 1), padding=(4, 4), dilation=(2, 2), groups=64, bias=False)
                (2): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
            (4): Identity()
            (5): Sequential(
              (0): AvgPool2d(kernel_size=3, stride=1, padding=1)
              (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
            )
            (6): Sequential(
              (0): MaxPool2d(kernel_size=3, stride=1, padding=1, dilation=1, ceil_mode=False)
              (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
            )
            (7): Zero()
          )
          (attention): AttentionModule(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (fc): Sequential(
              (0): Linear(in_features=512, out_features=64, bias=False)
              (1): ReLU(inplace=True)
              (2): Linear(in_features=64, out_features=512, bias=False)
              (3): Sigmoid()
            )
          )
        )
        (13): MixedOp(
          (_ops): ModuleList(
            (0): SepConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
                (2): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
                (4): ReLU()
                (5): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
                (6): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (7): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
            (1): SepConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(64, 64, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=64, bias=False)
                (2): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
                (4): ReLU()
                (5): Conv2d(64, 64, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=64, bias=False)
                (6): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (7): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
            (2): DilConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=64, bias=False)
                (2): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
            (3): DilConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(64, 64, kernel_size=(5, 5), stride=(1, 1), padding=(4, 4), dilation=(2, 2), groups=64, bias=False)
                (2): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
            (4): Identity()
            (5): Sequential(
              (0): AvgPool2d(kernel_size=3, stride=1, padding=1)
              (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
            )
            (6): Sequential(
              (0): MaxPool2d(kernel_size=3, stride=1, padding=1, dilation=1, ceil_mode=False)
              (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
            )
            (7): Zero()
          )
          (attention): AttentionModule(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (fc): Sequential(
              (0): Linear(in_features=512, out_features=64, bias=False)
              (1): ReLU(inplace=True)
              (2): Linear(in_features=64, out_features=512, bias=False)
              (3): Sigmoid()
            )
          )
        )
      )
      (_bns): ModuleList()
    )
    (5): Cell(
      (preprocess0): FactorizedReduce(
        (relu): ReLU()
        (conv_1): Conv2d(128, 32, kernel_size=(1, 1), stride=(2, 2), bias=False)
        (conv_2): Conv2d(128, 32, kernel_size=(1, 1), stride=(2, 2), bias=False)
        (bn): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
      )
      (preprocess1): ReLUConvBN(
        (op): Sequential(
          (0): ReLU()
          (1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
        )
      )
      (_ops): ModuleList(
        (0): MixedOp(
          (_ops): ModuleList(
            (0): SepConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
                (2): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
                (4): ReLU()
                (5): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
                (6): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (7): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
            (1): SepConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(64, 64, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=64, bias=False)
                (2): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
                (4): ReLU()
                (5): Conv2d(64, 64, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=64, bias=False)
                (6): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (7): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
            (2): DilConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=64, bias=False)
                (2): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
            (3): DilConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(64, 64, kernel_size=(5, 5), stride=(1, 1), padding=(4, 4), dilation=(2, 2), groups=64, bias=False)
                (2): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
            (4): Identity()
            (5): Sequential(
              (0): AvgPool2d(kernel_size=3, stride=1, padding=1)
              (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
            )
            (6): Sequential(
              (0): MaxPool2d(kernel_size=3, stride=1, padding=1, dilation=1, ceil_mode=False)
              (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
            )
            (7): Zero()
          )
          (attention): AttentionModule(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (fc): Sequential(
              (0): Linear(in_features=512, out_features=64, bias=False)
              (1): ReLU(inplace=True)
              (2): Linear(in_features=64, out_features=512, bias=False)
              (3): Sigmoid()
            )
          )
        )
        (1): MixedOp(
          (_ops): ModuleList(
            (0): SepConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
                (2): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
                (4): ReLU()
                (5): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
                (6): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (7): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
            (1): SepConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(64, 64, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=64, bias=False)
                (2): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
                (4): ReLU()
                (5): Conv2d(64, 64, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=64, bias=False)
                (6): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (7): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
            (2): DilConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=64, bias=False)
                (2): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
            (3): DilConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(64, 64, kernel_size=(5, 5), stride=(1, 1), padding=(4, 4), dilation=(2, 2), groups=64, bias=False)
                (2): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
            (4): Identity()
            (5): Sequential(
              (0): AvgPool2d(kernel_size=3, stride=1, padding=1)
              (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
            )
            (6): Sequential(
              (0): MaxPool2d(kernel_size=3, stride=1, padding=1, dilation=1, ceil_mode=False)
              (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
            )
            (7): Zero()
          )
          (attention): AttentionModule(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (fc): Sequential(
              (0): Linear(in_features=512, out_features=64, bias=False)
              (1): ReLU(inplace=True)
              (2): Linear(in_features=64, out_features=512, bias=False)
              (3): Sigmoid()
            )
          )
        )
        (2): MixedOp(
          (_ops): ModuleList(
            (0): SepConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
                (2): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
                (4): ReLU()
                (5): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
                (6): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (7): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
            (1): SepConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(64, 64, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=64, bias=False)
                (2): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
                (4): ReLU()
                (5): Conv2d(64, 64, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=64, bias=False)
                (6): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (7): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
            (2): DilConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=64, bias=False)
                (2): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
            (3): DilConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(64, 64, kernel_size=(5, 5), stride=(1, 1), padding=(4, 4), dilation=(2, 2), groups=64, bias=False)
                (2): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
            (4): Identity()
            (5): Sequential(
              (0): AvgPool2d(kernel_size=3, stride=1, padding=1)
              (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
            )
            (6): Sequential(
              (0): MaxPool2d(kernel_size=3, stride=1, padding=1, dilation=1, ceil_mode=False)
              (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
            )
            (7): Zero()
          )
          (attention): AttentionModule(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (fc): Sequential(
              (0): Linear(in_features=512, out_features=64, bias=False)
              (1): ReLU(inplace=True)
              (2): Linear(in_features=64, out_features=512, bias=False)
              (3): Sigmoid()
            )
          )
        )
        (3): MixedOp(
          (_ops): ModuleList(
            (0): SepConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
                (2): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
                (4): ReLU()
                (5): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
                (6): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (7): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
            (1): SepConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(64, 64, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=64, bias=False)
                (2): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
                (4): ReLU()
                (5): Conv2d(64, 64, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=64, bias=False)
                (6): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (7): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
            (2): DilConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=64, bias=False)
                (2): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
            (3): DilConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(64, 64, kernel_size=(5, 5), stride=(1, 1), padding=(4, 4), dilation=(2, 2), groups=64, bias=False)
                (2): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
            (4): Identity()
            (5): Sequential(
              (0): AvgPool2d(kernel_size=3, stride=1, padding=1)
              (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
            )
            (6): Sequential(
              (0): MaxPool2d(kernel_size=3, stride=1, padding=1, dilation=1, ceil_mode=False)
              (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
            )
            (7): Zero()
          )
          (attention): AttentionModule(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (fc): Sequential(
              (0): Linear(in_features=512, out_features=64, bias=False)
              (1): ReLU(inplace=True)
              (2): Linear(in_features=64, out_features=512, bias=False)
              (3): Sigmoid()
            )
          )
        )
        (4): MixedOp(
          (_ops): ModuleList(
            (0): SepConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
                (2): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
                (4): ReLU()
                (5): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
                (6): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (7): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
            (1): SepConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(64, 64, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=64, bias=False)
                (2): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
                (4): ReLU()
                (5): Conv2d(64, 64, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=64, bias=False)
                (6): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (7): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
            (2): DilConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=64, bias=False)
                (2): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
            (3): DilConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(64, 64, kernel_size=(5, 5), stride=(1, 1), padding=(4, 4), dilation=(2, 2), groups=64, bias=False)
                (2): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
            (4): Identity()
            (5): Sequential(
              (0): AvgPool2d(kernel_size=3, stride=1, padding=1)
              (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
            )
            (6): Sequential(
              (0): MaxPool2d(kernel_size=3, stride=1, padding=1, dilation=1, ceil_mode=False)
              (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
            )
            (7): Zero()
          )
          (attention): AttentionModule(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (fc): Sequential(
              (0): Linear(in_features=512, out_features=64, bias=False)
              (1): ReLU(inplace=True)
              (2): Linear(in_features=64, out_features=512, bias=False)
              (3): Sigmoid()
            )
          )
        )
        (5): MixedOp(
          (_ops): ModuleList(
            (0): SepConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
                (2): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
                (4): ReLU()
                (5): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
                (6): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (7): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
            (1): SepConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(64, 64, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=64, bias=False)
                (2): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
                (4): ReLU()
                (5): Conv2d(64, 64, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=64, bias=False)
                (6): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (7): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
            (2): DilConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=64, bias=False)
                (2): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
            (3): DilConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(64, 64, kernel_size=(5, 5), stride=(1, 1), padding=(4, 4), dilation=(2, 2), groups=64, bias=False)
                (2): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
            (4): Identity()
            (5): Sequential(
              (0): AvgPool2d(kernel_size=3, stride=1, padding=1)
              (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
            )
            (6): Sequential(
              (0): MaxPool2d(kernel_size=3, stride=1, padding=1, dilation=1, ceil_mode=False)
              (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
            )
            (7): Zero()
          )
          (attention): AttentionModule(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (fc): Sequential(
              (0): Linear(in_features=512, out_features=64, bias=False)
              (1): ReLU(inplace=True)
              (2): Linear(in_features=64, out_features=512, bias=False)
              (3): Sigmoid()
            )
          )
        )
        (6): MixedOp(
          (_ops): ModuleList(
            (0): SepConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
                (2): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
                (4): ReLU()
                (5): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
                (6): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (7): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
            (1): SepConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(64, 64, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=64, bias=False)
                (2): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
                (4): ReLU()
                (5): Conv2d(64, 64, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=64, bias=False)
                (6): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (7): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
            (2): DilConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=64, bias=False)
                (2): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
            (3): DilConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(64, 64, kernel_size=(5, 5), stride=(1, 1), padding=(4, 4), dilation=(2, 2), groups=64, bias=False)
                (2): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
            (4): Identity()
            (5): Sequential(
              (0): AvgPool2d(kernel_size=3, stride=1, padding=1)
              (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
            )
            (6): Sequential(
              (0): MaxPool2d(kernel_size=3, stride=1, padding=1, dilation=1, ceil_mode=False)
              (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
            )
            (7): Zero()
          )
          (attention): AttentionModule(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (fc): Sequential(
              (0): Linear(in_features=512, out_features=64, bias=False)
              (1): ReLU(inplace=True)
              (2): Linear(in_features=64, out_features=512, bias=False)
              (3): Sigmoid()
            )
          )
        )
        (7): MixedOp(
          (_ops): ModuleList(
            (0): SepConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
                (2): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
                (4): ReLU()
                (5): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
                (6): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (7): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
            (1): SepConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(64, 64, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=64, bias=False)
                (2): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
                (4): ReLU()
                (5): Conv2d(64, 64, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=64, bias=False)
                (6): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (7): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
            (2): DilConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=64, bias=False)
                (2): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
            (3): DilConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(64, 64, kernel_size=(5, 5), stride=(1, 1), padding=(4, 4), dilation=(2, 2), groups=64, bias=False)
                (2): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
            (4): Identity()
            (5): Sequential(
              (0): AvgPool2d(kernel_size=3, stride=1, padding=1)
              (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
            )
            (6): Sequential(
              (0): MaxPool2d(kernel_size=3, stride=1, padding=1, dilation=1, ceil_mode=False)
              (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
            )
            (7): Zero()
          )
          (attention): AttentionModule(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (fc): Sequential(
              (0): Linear(in_features=512, out_features=64, bias=False)
              (1): ReLU(inplace=True)
              (2): Linear(in_features=64, out_features=512, bias=False)
              (3): Sigmoid()
            )
          )
        )
        (8): MixedOp(
          (_ops): ModuleList(
            (0): SepConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
                (2): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
                (4): ReLU()
                (5): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
                (6): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (7): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
            (1): SepConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(64, 64, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=64, bias=False)
                (2): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
                (4): ReLU()
                (5): Conv2d(64, 64, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=64, bias=False)
                (6): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (7): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
            (2): DilConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=64, bias=False)
                (2): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
            (3): DilConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(64, 64, kernel_size=(5, 5), stride=(1, 1), padding=(4, 4), dilation=(2, 2), groups=64, bias=False)
                (2): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
            (4): Identity()
            (5): Sequential(
              (0): AvgPool2d(kernel_size=3, stride=1, padding=1)
              (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
            )
            (6): Sequential(
              (0): MaxPool2d(kernel_size=3, stride=1, padding=1, dilation=1, ceil_mode=False)
              (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
            )
            (7): Zero()
          )
          (attention): AttentionModule(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (fc): Sequential(
              (0): Linear(in_features=512, out_features=64, bias=False)
              (1): ReLU(inplace=True)
              (2): Linear(in_features=64, out_features=512, bias=False)
              (3): Sigmoid()
            )
          )
        )
        (9): MixedOp(
          (_ops): ModuleList(
            (0): SepConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
                (2): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
                (4): ReLU()
                (5): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
                (6): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (7): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
            (1): SepConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(64, 64, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=64, bias=False)
                (2): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
                (4): ReLU()
                (5): Conv2d(64, 64, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=64, bias=False)
                (6): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (7): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
            (2): DilConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=64, bias=False)
                (2): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
            (3): DilConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(64, 64, kernel_size=(5, 5), stride=(1, 1), padding=(4, 4), dilation=(2, 2), groups=64, bias=False)
                (2): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
            (4): Identity()
            (5): Sequential(
              (0): AvgPool2d(kernel_size=3, stride=1, padding=1)
              (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
            )
            (6): Sequential(
              (0): MaxPool2d(kernel_size=3, stride=1, padding=1, dilation=1, ceil_mode=False)
              (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
            )
            (7): Zero()
          )
          (attention): AttentionModule(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (fc): Sequential(
              (0): Linear(in_features=512, out_features=64, bias=False)
              (1): ReLU(inplace=True)
              (2): Linear(in_features=64, out_features=512, bias=False)
              (3): Sigmoid()
            )
          )
        )
        (10): MixedOp(
          (_ops): ModuleList(
            (0): SepConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
                (2): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
                (4): ReLU()
                (5): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
                (6): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (7): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
            (1): SepConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(64, 64, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=64, bias=False)
                (2): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
                (4): ReLU()
                (5): Conv2d(64, 64, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=64, bias=False)
                (6): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (7): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
            (2): DilConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=64, bias=False)
                (2): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
            (3): DilConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(64, 64, kernel_size=(5, 5), stride=(1, 1), padding=(4, 4), dilation=(2, 2), groups=64, bias=False)
                (2): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
            (4): Identity()
            (5): Sequential(
              (0): AvgPool2d(kernel_size=3, stride=1, padding=1)
              (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
            )
            (6): Sequential(
              (0): MaxPool2d(kernel_size=3, stride=1, padding=1, dilation=1, ceil_mode=False)
              (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
            )
            (7): Zero()
          )
          (attention): AttentionModule(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (fc): Sequential(
              (0): Linear(in_features=512, out_features=64, bias=False)
              (1): ReLU(inplace=True)
              (2): Linear(in_features=64, out_features=512, bias=False)
              (3): Sigmoid()
            )
          )
        )
        (11): MixedOp(
          (_ops): ModuleList(
            (0): SepConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
                (2): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
                (4): ReLU()
                (5): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
                (6): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (7): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
            (1): SepConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(64, 64, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=64, bias=False)
                (2): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
                (4): ReLU()
                (5): Conv2d(64, 64, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=64, bias=False)
                (6): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (7): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
            (2): DilConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=64, bias=False)
                (2): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
            (3): DilConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(64, 64, kernel_size=(5, 5), stride=(1, 1), padding=(4, 4), dilation=(2, 2), groups=64, bias=False)
                (2): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
            (4): Identity()
            (5): Sequential(
              (0): AvgPool2d(kernel_size=3, stride=1, padding=1)
              (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
            )
            (6): Sequential(
              (0): MaxPool2d(kernel_size=3, stride=1, padding=1, dilation=1, ceil_mode=False)
              (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
            )
            (7): Zero()
          )
          (attention): AttentionModule(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (fc): Sequential(
              (0): Linear(in_features=512, out_features=64, bias=False)
              (1): ReLU(inplace=True)
              (2): Linear(in_features=64, out_features=512, bias=False)
              (3): Sigmoid()
            )
          )
        )
        (12): MixedOp(
          (_ops): ModuleList(
            (0): SepConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
                (2): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
                (4): ReLU()
                (5): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
                (6): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (7): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
            (1): SepConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(64, 64, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=64, bias=False)
                (2): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
                (4): ReLU()
                (5): Conv2d(64, 64, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=64, bias=False)
                (6): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (7): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
            (2): DilConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=64, bias=False)
                (2): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
            (3): DilConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(64, 64, kernel_size=(5, 5), stride=(1, 1), padding=(4, 4), dilation=(2, 2), groups=64, bias=False)
                (2): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
            (4): Identity()
            (5): Sequential(
              (0): AvgPool2d(kernel_size=3, stride=1, padding=1)
              (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
            )
            (6): Sequential(
              (0): MaxPool2d(kernel_size=3, stride=1, padding=1, dilation=1, ceil_mode=False)
              (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
            )
            (7): Zero()
          )
          (attention): AttentionModule(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (fc): Sequential(
              (0): Linear(in_features=512, out_features=64, bias=False)
              (1): ReLU(inplace=True)
              (2): Linear(in_features=64, out_features=512, bias=False)
              (3): Sigmoid()
            )
          )
        )
        (13): MixedOp(
          (_ops): ModuleList(
            (0): SepConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
                (2): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
                (4): ReLU()
                (5): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
                (6): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (7): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
            (1): SepConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(64, 64, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=64, bias=False)
                (2): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
                (4): ReLU()
                (5): Conv2d(64, 64, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=64, bias=False)
                (6): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (7): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
            (2): DilConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), groups=64, bias=False)
                (2): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
            (3): DilConv(
              (op): Sequential(
                (0): ReLU()
                (1): Conv2d(64, 64, kernel_size=(5, 5), stride=(1, 1), padding=(4, 4), dilation=(2, 2), groups=64, bias=False)
                (2): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (3): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
              )
            )
            (4): Identity()
            (5): Sequential(
              (0): AvgPool2d(kernel_size=3, stride=1, padding=1)
              (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
            )
            (6): Sequential(
              (0): MaxPool2d(kernel_size=3, stride=1, padding=1, dilation=1, ceil_mode=False)
              (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=True)
            )
            (7): Zero()
          )
          (attention): AttentionModule(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (fc): Sequential(
              (0): Linear(in_features=512, out_features=64, bias=False)
              (1): ReLU(inplace=True)
              (2): Linear(in_features=64, out_features=512, bias=False)
              (3): Sigmoid()
            )
          )
        )
      )
      (_bns): ModuleList()
    )
  )
  (global_pooling): AdaptiveAvgPool2d(output_size=1)
  (classifier): Linear(in_features=256, out_features=3, bias=True)
)
2023-10-23 16:37:57,549 param size = 3.729139MB
2023-10-23 16:37:57,582 epoch 0 lr 2.481113e-02
2023-10-23 16:38:03,827 train 000 1.161676e+00 0.000000
2023-10-23 16:38:03,828 Cell_0 = Normal_Genotype(normal=[('dil_conv_5x5', 1), ('dil_conv_3x3', 0), ('dil_conv_3x3', 2), ('max_pool_3x3', 1), ('sep_conv_5x5', 3), ('dil_conv_5x5', 1), ('avg_pool_3x3', 2), ('dil_conv_3x3', 4)], normal_concat=range(2, 6))
2023-10-23 16:38:03,829 Cell_1 = Normal_Genotype(normal=[('avg_pool_3x3', 1), ('max_pool_3x3', 0), ('avg_pool_3x3', 2), ('avg_pool_3x3', 0), ('dil_conv_5x5', 3), ('dil_conv_3x3', 0), ('dil_conv_3x3', 4), ('dil_conv_5x5', 3)], normal_concat=range(2, 6))
2023-10-23 16:38:03,829 Cell_2 = Reduce_Genotype(reduce=[('dil_conv_5x5', 0), ('skip_connect', 1), ('dil_conv_5x5', 0), ('dil_conv_3x3', 2), ('avg_pool_3x3', 1), ('dil_conv_5x5', 2), ('avg_pool_3x3', 3), ('avg_pool_3x3', 2)], reduce_concat=range(2, 6))
2023-10-23 16:38:03,829 Cell_3 = Normal_Genotype(normal=[('sep_conv_5x5', 1), ('dil_conv_5x5', 0), ('avg_pool_3x3', 1), ('max_pool_3x3', 0), ('dil_conv_3x3', 2), ('max_pool_3x3', 3), ('sep_conv_5x5', 3), ('dil_conv_5x5', 4)], normal_concat=range(2, 6))
2023-10-23 16:38:03,829 Cell_4 = Normal_Genotype(normal=[('dil_conv_5x5', 0), ('dil_conv_3x3', 1), ('dil_conv_5x5', 2), ('skip_connect', 0), ('max_pool_3x3', 3), ('skip_connect', 0), ('max_pool_3x3', 4), ('max_pool_3x3', 3)], normal_concat=range(2, 6))
2023-10-23 16:38:03,829 Cell_5 = Reduce_Genotype(reduce=[('max_pool_3x3', 0), ('dil_conv_3x3', 1), ('sep_conv_3x3', 2), ('dil_conv_3x3', 1), ('dil_conv_5x5', 3), ('max_pool_3x3', 2), ('avg_pool_3x3', 4), ('sep_conv_5x5', 1)], reduce_concat=range(2, 6))
2023-10-23 16:41:37,556 train 050 1.110547e+00 52.941176
2023-10-23 16:41:37,558 Cell_0 = Normal_Genotype(normal=[('dil_conv_3x3', 1), ('dil_conv_3x3', 0), ('dil_conv_3x3', 2), ('dil_conv_3x3', 1), ('sep_conv_5x5', 3), ('dil_conv_5x5', 1), ('avg_pool_3x3', 4), ('sep_conv_3x3', 3)], normal_concat=range(2, 6))
2023-10-23 16:41:37,558 Cell_1 = Normal_Genotype(normal=[('sep_conv_3x3', 0), ('max_pool_3x3', 1), ('sep_conv_3x3', 0), ('dil_conv_3x3', 2), ('dil_conv_5x5', 3), ('sep_conv_5x5', 0), ('avg_pool_3x3', 4), ('skip_connect', 3)], normal_concat=range(2, 6))
2023-10-23 16:41:37,558 Cell_2 = Reduce_Genotype(reduce=[('max_pool_3x3', 1), ('dil_conv_5x5', 0), ('dil_conv_5x5', 0), ('dil_conv_3x3', 2), ('avg_pool_3x3', 1), ('max_pool_3x3', 3), ('avg_pool_3x3', 3), ('sep_conv_5x5', 1)], reduce_concat=range(2, 6))
2023-10-23 16:41:37,558 Cell_3 = Normal_Genotype(normal=[('dil_conv_3x3', 1), ('max_pool_3x3', 0), ('sep_conv_5x5', 1), ('max_pool_3x3', 0), ('skip_connect', 2), ('dil_conv_5x5', 3), ('sep_conv_5x5', 3), ('dil_conv_5x5', 4)], normal_concat=range(2, 6))
2023-10-23 16:41:37,558 Cell_4 = Normal_Genotype(normal=[('dil_conv_5x5', 0), ('sep_conv_3x3', 1), ('dil_conv_5x5', 2), ('skip_connect', 0), ('skip_connect', 0), ('skip_connect', 2), ('avg_pool_3x3', 3), ('sep_conv_3x3', 4)], normal_concat=range(2, 6))
2023-10-23 16:41:37,558 Cell_5 = Reduce_Genotype(reduce=[('dil_conv_5x5', 0), ('sep_conv_3x3', 1), ('skip_connect', 2), ('dil_conv_3x3', 1), ('dil_conv_5x5', 3), ('dil_conv_3x3', 0), ('sep_conv_5x5', 1), ('avg_pool_3x3', 4)], reduce_concat=range(2, 6))
2023-10-23 16:45:08,733 train 100 8.629818e-01 64.356436
2023-10-23 16:45:08,735 Cell_0 = Normal_Genotype(normal=[('sep_conv_5x5', 1), ('dil_conv_3x3', 0), ('dil_conv_3x3', 2), ('max_pool_3x3', 1), ('sep_conv_5x5', 3), ('dil_conv_5x5', 1), ('avg_pool_3x3', 4), ('sep_conv_3x3', 3)], normal_concat=range(2, 6))
2023-10-23 16:45:08,736 Cell_1 = Normal_Genotype(normal=[('sep_conv_3x3', 0), ('max_pool_3x3', 1), ('sep_conv_3x3', 0), ('dil_conv_3x3', 2), ('dil_conv_5x5', 3), ('sep_conv_5x5', 0), ('dil_conv_3x3', 4), ('skip_connect', 3)], normal_concat=range(2, 6))
2023-10-23 16:45:08,736 Cell_2 = Reduce_Genotype(reduce=[('max_pool_3x3', 1), ('skip_connect', 0), ('dil_conv_5x5', 0), ('dil_conv_3x3', 2), ('avg_pool_3x3', 1), ('max_pool_3x3', 3), ('avg_pool_3x3', 3), ('sep_conv_5x5', 1)], reduce_concat=range(2, 6))
2023-10-23 16:45:08,736 Cell_3 = Normal_Genotype(normal=[('dil_conv_3x3', 1), ('dil_conv_3x3', 0), ('sep_conv_5x5', 1), ('max_pool_3x3', 0), ('skip_connect', 2), ('dil_conv_5x5', 3), ('sep_conv_5x5', 3), ('dil_conv_5x5', 4)], normal_concat=range(2, 6))
2023-10-23 16:45:08,736 Cell_4 = Normal_Genotype(normal=[('dil_conv_5x5', 0), ('sep_conv_3x3', 1), ('dil_conv_5x5', 2), ('skip_connect', 0), ('skip_connect', 0), ('skip_connect', 2), ('avg_pool_3x3', 3), ('sep_conv_3x3', 4)], normal_concat=range(2, 6))
2023-10-23 16:45:08,736 Cell_5 = Reduce_Genotype(reduce=[('dil_conv_5x5', 0), ('sep_conv_3x3', 1), ('skip_connect', 2), ('dil_conv_3x3', 1), ('dil_conv_5x5', 3), ('dil_conv_3x3', 0), ('sep_conv_5x5', 1), ('avg_pool_3x3', 4)], reduce_concat=range(2, 6))
2023-10-23 16:48:40,622 train 150 7.755825e-01 67.880795
2023-10-23 16:48:40,624 Cell_0 = Normal_Genotype(normal=[('sep_conv_5x5', 1), ('dil_conv_3x3', 0), ('dil_conv_3x3', 2), ('max_pool_3x3', 1), ('sep_conv_5x5', 3), ('dil_conv_5x5', 1), ('avg_pool_3x3', 4), ('sep_conv_3x3', 3)], normal_concat=range(2, 6))
2023-10-23 16:48:40,625 Cell_1 = Normal_Genotype(normal=[('max_pool_3x3', 1), ('dil_conv_3x3', 0), ('sep_conv_3x3', 0), ('dil_conv_3x3', 2), ('dil_conv_5x5', 3), ('skip_connect', 0), ('dil_conv_3x3', 4), ('max_pool_3x3', 0)], normal_concat=range(2, 6))
2023-10-23 16:48:40,625 Cell_2 = Reduce_Genotype(reduce=[('dil_conv_3x3', 1), ('skip_connect', 0), ('dil_conv_5x5', 0), ('dil_conv_3x3', 2), ('avg_pool_3x3', 1), ('avg_pool_3x3', 0), ('sep_conv_5x5', 1), ('avg_pool_3x3', 3)], reduce_concat=range(2, 6))
2023-10-23 16:48:40,625 Cell_3 = Normal_Genotype(normal=[('dil_conv_3x3', 1), ('dil_conv_3x3', 0), ('sep_conv_5x5', 1), ('max_pool_3x3', 0), ('skip_connect', 2), ('dil_conv_5x5', 3), ('sep_conv_5x5', 3), ('dil_conv_5x5', 4)], normal_concat=range(2, 6))
2023-10-23 16:48:40,625 Cell_4 = Normal_Genotype(normal=[('dil_conv_5x5', 0), ('sep_conv_3x3', 1), ('dil_conv_5x5', 2), ('skip_connect', 0), ('skip_connect', 0), ('dil_conv_3x3', 1), ('avg_pool_3x3', 3), ('sep_conv_3x3', 4)], normal_concat=range(2, 6))
2023-10-23 16:48:40,625 Cell_5 = Reduce_Genotype(reduce=[('dil_conv_5x5', 0), ('sep_conv_3x3', 1), ('skip_connect', 2), ('dil_conv_3x3', 1), ('dil_conv_5x5', 3), ('dil_conv_3x3', 0), ('sep_conv_5x5', 1), ('avg_pool_3x3', 4)], reduce_concat=range(2, 6))
